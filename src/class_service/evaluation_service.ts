// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/evaluation_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { DetailedEvaluation, Evaluation, PersonalizedEvaluation } from "./evaluation";
import { EvaluationEntry } from "./evaluation_entry";
import { DetailedMarkCategory, PersonalizedMarkCategory } from "./mark_category";

export const protobufPackage = "class_service.evaluation_service";

/** Create Evaluation */
export interface CreateEvaluationRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  name: string;
  total: number;
  weight: number;
  /** YYYY-MM-DD format for NaiveDate */
  date: string;
  markCategory: ObjectId | undefined;
}

/** Update Evaluation */
export interface UpdateEvaluationRequest {
  context: RequestContext | undefined;
  evaluationId: ObjectId | undefined;
  name: string;
  total: number;
  weight: number;
  /** YYYY-MM-DD format for NaiveDate */
  date: string;
  markCategory: ObjectId | undefined;
}

/** Delete Evaluation */
export interface DeleteEvaluationRequest {
  context: RequestContext | undefined;
  evaluationId: ObjectId | undefined;
}

export interface GetCourseDetailedEvaluationsResponse {
  evaluations: DetailedEvaluation[];
}

export interface GetCourseEvaluationsResponse {
  evaluations: Evaluation[];
}

/** Publish/Unpublish Evaluation */
export interface PublishEvaluationRequest {
  context: RequestContext | undefined;
  evaluationId: ObjectId | undefined;
}

export interface UnpublishEvaluationRequest {
  context: RequestContext | undefined;
  evaluationId: ObjectId | undefined;
}

/** Get Evaluation Entries */
export interface GetEvaluationEntriesRequest {
  context: RequestContext | undefined;
  evaluationId: ObjectId | undefined;
}

export interface GetEvaluationEntriesResponse {
  entries: EvaluationEntry[];
}

/** Get Student Course Evaluation Entries */
export interface GetStudentCourseEvaluationEntriesRequest {
  context: RequestContext | undefined;
  studentId: ObjectId | undefined;
  courseId: ObjectId | undefined;
}

/** Update Evaluation Marks (Batch) */
export interface StudentMarkUpdate {
  studentId: ObjectId | undefined;
  mark: number;
}

export interface UpdateEvaluationMarksRequest {
  context: RequestContext | undefined;
  evaluationId: ObjectId | undefined;
  studentMarks: StudentMarkUpdate[];
}

/** Create Mark Category */
export interface CreateMarkCategoryRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  name: string;
  percentage: number;
}

/** Update Mark Category */
export interface UpdateMarkCategoryRequest {
  context: RequestContext | undefined;
  markCategoryId: ObjectId | undefined;
  name: string;
  percentage: number;
}

/** Delete Mark Category */
export interface DeleteMarkCategoryRequest {
  context: RequestContext | undefined;
  markCategoryId: ObjectId | undefined;
}

/** Get Course Mark Categories */
export interface GetCourseMarkCategoriesRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

export interface DetailedMarkCategoriesAndEvaluationsResponse {
  markCategories: DetailedMarkCategory[];
  evaluations: DetailedEvaluation[];
}

export interface GetCourseDetailedMarkCategoriesAndEvaluationsRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

/** Student Course Performance for a course */
export interface GetStudentsCoursePerformanceRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

export interface GetStudentsCoursePerformanceResponse {
  studentPerformanes: StudentCoursePerformance[];
}

export interface GetStudentCoursePerformanceRequest {
  context: RequestContext | undefined;
  studentId: ObjectId | undefined;
  courseId: ObjectId | undefined;
}

export interface StudentCoursePerformance {
  student: ObjectId | undefined;
  finalMark?: number | undefined;
  maximumPotentialMark: number;
  evaluations: PersonalizedEvaluation[];
  markCategories: PersonalizedMarkCategory[];
  studentEvaluationEntries: EvaluationEntry[];
}

/** Student Course Mark Overview */
export interface GetStudentCoursesMarkOverviewRequest {
  context: RequestContext | undefined;
  studentId: ObjectId | undefined;
  schoolYearId: ObjectId | undefined;
}

export interface GetStudentCoursesMarkOverviewResponse {
  courseMarks: StudentCourseMarkOverview[];
}

export interface StudentCourseMarkOverview {
  courseId: ObjectId | undefined;
  courseName: string;
  courseCode: string;
  semesterId:
    | ObjectId
    | undefined;
  /** the mark for published evaluations for this course through all categories */
  studentMark?:
    | number
    | undefined;
  /** assuming that the student got the full mark for non-marked evaluations */
  maximumPotentialMark: number;
}

/** Export Markbook Excel */
export interface ExportMarkbookExcelRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

export interface ExportMarkbookExcelResponse {
  /** base64 encoded excel file */
  excelData: string;
  courseName: string;
}

function createBaseCreateEvaluationRequest(): CreateEvaluationRequest {
  return { context: undefined, courseId: undefined, name: "", total: 0, weight: 0, date: "", markCategory: undefined };
}

export const CreateEvaluationRequest: MessageFns<CreateEvaluationRequest> = {
  encode(message: CreateEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.total !== 0) {
      writer.uint32(32).uint32(message.total);
    }
    if (message.weight !== 0) {
      writer.uint32(40).uint32(message.weight);
    }
    if (message.date !== "") {
      writer.uint32(50).string(message.date);
    }
    if (message.markCategory !== undefined) {
      ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.date = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.markCategory = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEvaluationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      markCategory: isSet(object.markCategory) ? ObjectId.fromJSON(object.markCategory) : undefined,
    };
  },

  toJSON(message: CreateEvaluationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.markCategory !== undefined) {
      obj.markCategory = ObjectId.toJSON(message.markCategory);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateEvaluationRequest>, I>>(base?: I): CreateEvaluationRequest {
    return CreateEvaluationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateEvaluationRequest>, I>>(object: I): CreateEvaluationRequest {
    const message = createBaseCreateEvaluationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.total = object.total ?? 0;
    message.weight = object.weight ?? 0;
    message.date = object.date ?? "";
    message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
      ? ObjectId.fromPartial(object.markCategory)
      : undefined;
    return message;
  },
};

function createBaseUpdateEvaluationRequest(): UpdateEvaluationRequest {
  return {
    context: undefined,
    evaluationId: undefined,
    name: "",
    total: 0,
    weight: 0,
    date: "",
    markCategory: undefined,
  };
}

export const UpdateEvaluationRequest: MessageFns<UpdateEvaluationRequest> = {
  encode(message: UpdateEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.total !== 0) {
      writer.uint32(32).uint32(message.total);
    }
    if (message.weight !== 0) {
      writer.uint32(40).uint32(message.weight);
    }
    if (message.date !== "") {
      writer.uint32(50).string(message.date);
    }
    if (message.markCategory !== undefined) {
      ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.date = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.markCategory = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEvaluationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      markCategory: isSet(object.markCategory) ? ObjectId.fromJSON(object.markCategory) : undefined,
    };
  },

  toJSON(message: UpdateEvaluationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.markCategory !== undefined) {
      obj.markCategory = ObjectId.toJSON(message.markCategory);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateEvaluationRequest>, I>>(base?: I): UpdateEvaluationRequest {
    return UpdateEvaluationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateEvaluationRequest>, I>>(object: I): UpdateEvaluationRequest {
    const message = createBaseUpdateEvaluationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    message.name = object.name ?? "";
    message.total = object.total ?? 0;
    message.weight = object.weight ?? 0;
    message.date = object.date ?? "";
    message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
      ? ObjectId.fromPartial(object.markCategory)
      : undefined;
    return message;
  },
};

function createBaseDeleteEvaluationRequest(): DeleteEvaluationRequest {
  return { context: undefined, evaluationId: undefined };
}

export const DeleteEvaluationRequest: MessageFns<DeleteEvaluationRequest> = {
  encode(message: DeleteEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEvaluationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
    };
  },

  toJSON(message: DeleteEvaluationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteEvaluationRequest>, I>>(base?: I): DeleteEvaluationRequest {
    return DeleteEvaluationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteEvaluationRequest>, I>>(object: I): DeleteEvaluationRequest {
    const message = createBaseDeleteEvaluationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    return message;
  },
};

function createBaseGetCourseDetailedEvaluationsResponse(): GetCourseDetailedEvaluationsResponse {
  return { evaluations: [] };
}

export const GetCourseDetailedEvaluationsResponse: MessageFns<GetCourseDetailedEvaluationsResponse> = {
  encode(message: GetCourseDetailedEvaluationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.evaluations) {
      DetailedEvaluation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseDetailedEvaluationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseDetailedEvaluationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evaluations.push(DetailedEvaluation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseDetailedEvaluationsResponse {
    return {
      evaluations: globalThis.Array.isArray(object?.evaluations)
        ? object.evaluations.map((e: any) => DetailedEvaluation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCourseDetailedEvaluationsResponse): unknown {
    const obj: any = {};
    if (message.evaluations?.length) {
      obj.evaluations = message.evaluations.map((e) => DetailedEvaluation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseDetailedEvaluationsResponse>, I>>(
    base?: I,
  ): GetCourseDetailedEvaluationsResponse {
    return GetCourseDetailedEvaluationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseDetailedEvaluationsResponse>, I>>(
    object: I,
  ): GetCourseDetailedEvaluationsResponse {
    const message = createBaseGetCourseDetailedEvaluationsResponse();
    message.evaluations = object.evaluations?.map((e) => DetailedEvaluation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetCourseEvaluationsResponse(): GetCourseEvaluationsResponse {
  return { evaluations: [] };
}

export const GetCourseEvaluationsResponse: MessageFns<GetCourseEvaluationsResponse> = {
  encode(message: GetCourseEvaluationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.evaluations) {
      Evaluation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseEvaluationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseEvaluationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evaluations.push(Evaluation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseEvaluationsResponse {
    return {
      evaluations: globalThis.Array.isArray(object?.evaluations)
        ? object.evaluations.map((e: any) => Evaluation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCourseEvaluationsResponse): unknown {
    const obj: any = {};
    if (message.evaluations?.length) {
      obj.evaluations = message.evaluations.map((e) => Evaluation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseEvaluationsResponse>, I>>(base?: I): GetCourseEvaluationsResponse {
    return GetCourseEvaluationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseEvaluationsResponse>, I>>(object: I): GetCourseEvaluationsResponse {
    const message = createBaseGetCourseEvaluationsResponse();
    message.evaluations = object.evaluations?.map((e) => Evaluation.fromPartial(e)) || [];
    return message;
  },
};

function createBasePublishEvaluationRequest(): PublishEvaluationRequest {
  return { context: undefined, evaluationId: undefined };
}

export const PublishEvaluationRequest: MessageFns<PublishEvaluationRequest> = {
  encode(message: PublishEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishEvaluationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
    };
  },

  toJSON(message: PublishEvaluationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishEvaluationRequest>, I>>(base?: I): PublishEvaluationRequest {
    return PublishEvaluationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishEvaluationRequest>, I>>(object: I): PublishEvaluationRequest {
    const message = createBasePublishEvaluationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    return message;
  },
};

function createBaseUnpublishEvaluationRequest(): UnpublishEvaluationRequest {
  return { context: undefined, evaluationId: undefined };
}

export const UnpublishEvaluationRequest: MessageFns<UnpublishEvaluationRequest> = {
  encode(message: UnpublishEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnpublishEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnpublishEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnpublishEvaluationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
    };
  },

  toJSON(message: UnpublishEvaluationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnpublishEvaluationRequest>, I>>(base?: I): UnpublishEvaluationRequest {
    return UnpublishEvaluationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnpublishEvaluationRequest>, I>>(object: I): UnpublishEvaluationRequest {
    const message = createBaseUnpublishEvaluationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    return message;
  },
};

function createBaseGetEvaluationEntriesRequest(): GetEvaluationEntriesRequest {
  return { context: undefined, evaluationId: undefined };
}

export const GetEvaluationEntriesRequest: MessageFns<GetEvaluationEntriesRequest> = {
  encode(message: GetEvaluationEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEvaluationEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEvaluationEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEvaluationEntriesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
    };
  },

  toJSON(message: GetEvaluationEntriesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEvaluationEntriesRequest>, I>>(base?: I): GetEvaluationEntriesRequest {
    return GetEvaluationEntriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEvaluationEntriesRequest>, I>>(object: I): GetEvaluationEntriesRequest {
    const message = createBaseGetEvaluationEntriesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    return message;
  },
};

function createBaseGetEvaluationEntriesResponse(): GetEvaluationEntriesResponse {
  return { entries: [] };
}

export const GetEvaluationEntriesResponse: MessageFns<GetEvaluationEntriesResponse> = {
  encode(message: GetEvaluationEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      EvaluationEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEvaluationEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEvaluationEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entries.push(EvaluationEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEvaluationEntriesResponse {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => EvaluationEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetEvaluationEntriesResponse): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => EvaluationEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEvaluationEntriesResponse>, I>>(base?: I): GetEvaluationEntriesResponse {
    return GetEvaluationEntriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEvaluationEntriesResponse>, I>>(object: I): GetEvaluationEntriesResponse {
    const message = createBaseGetEvaluationEntriesResponse();
    message.entries = object.entries?.map((e) => EvaluationEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStudentCourseEvaluationEntriesRequest(): GetStudentCourseEvaluationEntriesRequest {
  return { context: undefined, studentId: undefined, courseId: undefined };
}

export const GetStudentCourseEvaluationEntriesRequest: MessageFns<GetStudentCourseEvaluationEntriesRequest> = {
  encode(message: GetStudentCourseEvaluationEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentCourseEvaluationEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentCourseEvaluationEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentCourseEvaluationEntriesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetStudentCourseEvaluationEntriesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentCourseEvaluationEntriesRequest>, I>>(
    base?: I,
  ): GetStudentCourseEvaluationEntriesRequest {
    return GetStudentCourseEvaluationEntriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentCourseEvaluationEntriesRequest>, I>>(
    object: I,
  ): GetStudentCourseEvaluationEntriesRequest {
    const message = createBaseGetStudentCourseEvaluationEntriesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseStudentMarkUpdate(): StudentMarkUpdate {
  return { studentId: undefined, mark: 0 };
}

export const StudentMarkUpdate: MessageFns<StudentMarkUpdate> = {
  encode(message: StudentMarkUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(10).fork()).join();
    }
    if (message.mark !== 0) {
      writer.uint32(17).double(message.mark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StudentMarkUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudentMarkUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.mark = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudentMarkUpdate {
    return {
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      mark: isSet(object.mark) ? globalThis.Number(object.mark) : 0,
    };
  },

  toJSON(message: StudentMarkUpdate): unknown {
    const obj: any = {};
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.mark !== 0) {
      obj.mark = message.mark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudentMarkUpdate>, I>>(base?: I): StudentMarkUpdate {
    return StudentMarkUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudentMarkUpdate>, I>>(object: I): StudentMarkUpdate {
    const message = createBaseStudentMarkUpdate();
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.mark = object.mark ?? 0;
    return message;
  },
};

function createBaseUpdateEvaluationMarksRequest(): UpdateEvaluationMarksRequest {
  return { context: undefined, evaluationId: undefined, studentMarks: [] };
}

export const UpdateEvaluationMarksRequest: MessageFns<UpdateEvaluationMarksRequest> = {
  encode(message: UpdateEvaluationMarksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    for (const v of message.studentMarks) {
      StudentMarkUpdate.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEvaluationMarksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEvaluationMarksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentMarks.push(StudentMarkUpdate.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEvaluationMarksRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
      studentMarks: globalThis.Array.isArray(object?.studentMarks)
        ? object.studentMarks.map((e: any) => StudentMarkUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateEvaluationMarksRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    if (message.studentMarks?.length) {
      obj.studentMarks = message.studentMarks.map((e) => StudentMarkUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateEvaluationMarksRequest>, I>>(base?: I): UpdateEvaluationMarksRequest {
    return UpdateEvaluationMarksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateEvaluationMarksRequest>, I>>(object: I): UpdateEvaluationMarksRequest {
    const message = createBaseUpdateEvaluationMarksRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    message.studentMarks = object.studentMarks?.map((e) => StudentMarkUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMarkCategoryRequest(): CreateMarkCategoryRequest {
  return { context: undefined, courseId: undefined, name: "", percentage: 0 };
}

export const CreateMarkCategoryRequest: MessageFns<CreateMarkCategoryRequest> = {
  encode(message: CreateMarkCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.percentage !== 0) {
      writer.uint32(32).uint32(message.percentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMarkCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMarkCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.percentage = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMarkCategoryRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
    };
  },

  toJSON(message: CreateMarkCategoryRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.percentage !== 0) {
      obj.percentage = Math.round(message.percentage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMarkCategoryRequest>, I>>(base?: I): CreateMarkCategoryRequest {
    return CreateMarkCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMarkCategoryRequest>, I>>(object: I): CreateMarkCategoryRequest {
    const message = createBaseCreateMarkCategoryRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.percentage = object.percentage ?? 0;
    return message;
  },
};

function createBaseUpdateMarkCategoryRequest(): UpdateMarkCategoryRequest {
  return { context: undefined, markCategoryId: undefined, name: "", percentage: 0 };
}

export const UpdateMarkCategoryRequest: MessageFns<UpdateMarkCategoryRequest> = {
  encode(message: UpdateMarkCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.markCategoryId !== undefined) {
      ObjectId.encode(message.markCategoryId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.percentage !== 0) {
      writer.uint32(32).uint32(message.percentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMarkCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMarkCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.markCategoryId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.percentage = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMarkCategoryRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      markCategoryId: isSet(object.markCategoryId) ? ObjectId.fromJSON(object.markCategoryId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
    };
  },

  toJSON(message: UpdateMarkCategoryRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.markCategoryId !== undefined) {
      obj.markCategoryId = ObjectId.toJSON(message.markCategoryId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.percentage !== 0) {
      obj.percentage = Math.round(message.percentage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMarkCategoryRequest>, I>>(base?: I): UpdateMarkCategoryRequest {
    return UpdateMarkCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMarkCategoryRequest>, I>>(object: I): UpdateMarkCategoryRequest {
    const message = createBaseUpdateMarkCategoryRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.markCategoryId = (object.markCategoryId !== undefined && object.markCategoryId !== null)
      ? ObjectId.fromPartial(object.markCategoryId)
      : undefined;
    message.name = object.name ?? "";
    message.percentage = object.percentage ?? 0;
    return message;
  },
};

function createBaseDeleteMarkCategoryRequest(): DeleteMarkCategoryRequest {
  return { context: undefined, markCategoryId: undefined };
}

export const DeleteMarkCategoryRequest: MessageFns<DeleteMarkCategoryRequest> = {
  encode(message: DeleteMarkCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.markCategoryId !== undefined) {
      ObjectId.encode(message.markCategoryId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMarkCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMarkCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.markCategoryId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMarkCategoryRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      markCategoryId: isSet(object.markCategoryId) ? ObjectId.fromJSON(object.markCategoryId) : undefined,
    };
  },

  toJSON(message: DeleteMarkCategoryRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.markCategoryId !== undefined) {
      obj.markCategoryId = ObjectId.toJSON(message.markCategoryId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMarkCategoryRequest>, I>>(base?: I): DeleteMarkCategoryRequest {
    return DeleteMarkCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMarkCategoryRequest>, I>>(object: I): DeleteMarkCategoryRequest {
    const message = createBaseDeleteMarkCategoryRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.markCategoryId = (object.markCategoryId !== undefined && object.markCategoryId !== null)
      ? ObjectId.fromPartial(object.markCategoryId)
      : undefined;
    return message;
  },
};

function createBaseGetCourseMarkCategoriesRequest(): GetCourseMarkCategoriesRequest {
  return { context: undefined, courseId: undefined };
}

export const GetCourseMarkCategoriesRequest: MessageFns<GetCourseMarkCategoriesRequest> = {
  encode(message: GetCourseMarkCategoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseMarkCategoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseMarkCategoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseMarkCategoriesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetCourseMarkCategoriesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseMarkCategoriesRequest>, I>>(base?: I): GetCourseMarkCategoriesRequest {
    return GetCourseMarkCategoriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseMarkCategoriesRequest>, I>>(
    object: I,
  ): GetCourseMarkCategoriesRequest {
    const message = createBaseGetCourseMarkCategoriesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseDetailedMarkCategoriesAndEvaluationsResponse(): DetailedMarkCategoriesAndEvaluationsResponse {
  return { markCategories: [], evaluations: [] };
}

export const DetailedMarkCategoriesAndEvaluationsResponse: MessageFns<DetailedMarkCategoriesAndEvaluationsResponse> = {
  encode(
    message: DetailedMarkCategoriesAndEvaluationsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.markCategories) {
      DetailedMarkCategory.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.evaluations) {
      DetailedEvaluation.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailedMarkCategoriesAndEvaluationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailedMarkCategoriesAndEvaluationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.markCategories.push(DetailedMarkCategory.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluations.push(DetailedEvaluation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailedMarkCategoriesAndEvaluationsResponse {
    return {
      markCategories: globalThis.Array.isArray(object?.markCategories)
        ? object.markCategories.map((e: any) => DetailedMarkCategory.fromJSON(e))
        : [],
      evaluations: globalThis.Array.isArray(object?.evaluations)
        ? object.evaluations.map((e: any) => DetailedEvaluation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DetailedMarkCategoriesAndEvaluationsResponse): unknown {
    const obj: any = {};
    if (message.markCategories?.length) {
      obj.markCategories = message.markCategories.map((e) => DetailedMarkCategory.toJSON(e));
    }
    if (message.evaluations?.length) {
      obj.evaluations = message.evaluations.map((e) => DetailedEvaluation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailedMarkCategoriesAndEvaluationsResponse>, I>>(
    base?: I,
  ): DetailedMarkCategoriesAndEvaluationsResponse {
    return DetailedMarkCategoriesAndEvaluationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailedMarkCategoriesAndEvaluationsResponse>, I>>(
    object: I,
  ): DetailedMarkCategoriesAndEvaluationsResponse {
    const message = createBaseDetailedMarkCategoriesAndEvaluationsResponse();
    message.markCategories = object.markCategories?.map((e) => DetailedMarkCategory.fromPartial(e)) || [];
    message.evaluations = object.evaluations?.map((e) => DetailedEvaluation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetCourseDetailedMarkCategoriesAndEvaluationsRequest(): GetCourseDetailedMarkCategoriesAndEvaluationsRequest {
  return { context: undefined, courseId: undefined };
}

export const GetCourseDetailedMarkCategoriesAndEvaluationsRequest: MessageFns<
  GetCourseDetailedMarkCategoriesAndEvaluationsRequest
> = {
  encode(
    message: GetCourseDetailedMarkCategoriesAndEvaluationsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseDetailedMarkCategoriesAndEvaluationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseDetailedMarkCategoriesAndEvaluationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseDetailedMarkCategoriesAndEvaluationsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetCourseDetailedMarkCategoriesAndEvaluationsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseDetailedMarkCategoriesAndEvaluationsRequest>, I>>(
    base?: I,
  ): GetCourseDetailedMarkCategoriesAndEvaluationsRequest {
    return GetCourseDetailedMarkCategoriesAndEvaluationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseDetailedMarkCategoriesAndEvaluationsRequest>, I>>(
    object: I,
  ): GetCourseDetailedMarkCategoriesAndEvaluationsRequest {
    const message = createBaseGetCourseDetailedMarkCategoriesAndEvaluationsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseGetStudentsCoursePerformanceRequest(): GetStudentsCoursePerformanceRequest {
  return { context: undefined, courseId: undefined };
}

export const GetStudentsCoursePerformanceRequest: MessageFns<GetStudentsCoursePerformanceRequest> = {
  encode(message: GetStudentsCoursePerformanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentsCoursePerformanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentsCoursePerformanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentsCoursePerformanceRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetStudentsCoursePerformanceRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentsCoursePerformanceRequest>, I>>(
    base?: I,
  ): GetStudentsCoursePerformanceRequest {
    return GetStudentsCoursePerformanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentsCoursePerformanceRequest>, I>>(
    object: I,
  ): GetStudentsCoursePerformanceRequest {
    const message = createBaseGetStudentsCoursePerformanceRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseGetStudentsCoursePerformanceResponse(): GetStudentsCoursePerformanceResponse {
  return { studentPerformanes: [] };
}

export const GetStudentsCoursePerformanceResponse: MessageFns<GetStudentsCoursePerformanceResponse> = {
  encode(message: GetStudentsCoursePerformanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.studentPerformanes) {
      StudentCoursePerformance.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentsCoursePerformanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentsCoursePerformanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studentPerformanes.push(StudentCoursePerformance.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentsCoursePerformanceResponse {
    return {
      studentPerformanes: globalThis.Array.isArray(object?.studentPerformanes)
        ? object.studentPerformanes.map((e: any) => StudentCoursePerformance.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetStudentsCoursePerformanceResponse): unknown {
    const obj: any = {};
    if (message.studentPerformanes?.length) {
      obj.studentPerformanes = message.studentPerformanes.map((e) => StudentCoursePerformance.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentsCoursePerformanceResponse>, I>>(
    base?: I,
  ): GetStudentsCoursePerformanceResponse {
    return GetStudentsCoursePerformanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentsCoursePerformanceResponse>, I>>(
    object: I,
  ): GetStudentsCoursePerformanceResponse {
    const message = createBaseGetStudentsCoursePerformanceResponse();
    message.studentPerformanes = object.studentPerformanes?.map((e) => StudentCoursePerformance.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStudentCoursePerformanceRequest(): GetStudentCoursePerformanceRequest {
  return { context: undefined, studentId: undefined, courseId: undefined };
}

export const GetStudentCoursePerformanceRequest: MessageFns<GetStudentCoursePerformanceRequest> = {
  encode(message: GetStudentCoursePerformanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentCoursePerformanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentCoursePerformanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentCoursePerformanceRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetStudentCoursePerformanceRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentCoursePerformanceRequest>, I>>(
    base?: I,
  ): GetStudentCoursePerformanceRequest {
    return GetStudentCoursePerformanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentCoursePerformanceRequest>, I>>(
    object: I,
  ): GetStudentCoursePerformanceRequest {
    const message = createBaseGetStudentCoursePerformanceRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseStudentCoursePerformance(): StudentCoursePerformance {
  return {
    student: undefined,
    finalMark: 0,
    maximumPotentialMark: 0,
    evaluations: [],
    markCategories: [],
    studentEvaluationEntries: [],
  };
}

export const StudentCoursePerformance: MessageFns<StudentCoursePerformance> = {
  encode(message: StudentCoursePerformance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(10).fork()).join();
    }
    if (message.finalMark !== undefined && message.finalMark !== 0) {
      writer.uint32(17).double(message.finalMark);
    }
    if (message.maximumPotentialMark !== 0) {
      writer.uint32(25).double(message.maximumPotentialMark);
    }
    for (const v of message.evaluations) {
      PersonalizedEvaluation.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.markCategories) {
      PersonalizedMarkCategory.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.studentEvaluationEntries) {
      EvaluationEntry.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StudentCoursePerformance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudentCoursePerformance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.finalMark = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.maximumPotentialMark = reader.double();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.evaluations.push(PersonalizedEvaluation.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.markCategories.push(PersonalizedMarkCategory.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.studentEvaluationEntries.push(EvaluationEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudentCoursePerformance {
    return {
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      finalMark: isSet(object.finalMark) ? globalThis.Number(object.finalMark) : 0,
      maximumPotentialMark: isSet(object.maximumPotentialMark) ? globalThis.Number(object.maximumPotentialMark) : 0,
      evaluations: globalThis.Array.isArray(object?.evaluations)
        ? object.evaluations.map((e: any) => PersonalizedEvaluation.fromJSON(e))
        : [],
      markCategories: globalThis.Array.isArray(object?.markCategories)
        ? object.markCategories.map((e: any) => PersonalizedMarkCategory.fromJSON(e))
        : [],
      studentEvaluationEntries: globalThis.Array.isArray(object?.studentEvaluationEntries)
        ? object.studentEvaluationEntries.map((e: any) => EvaluationEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StudentCoursePerformance): unknown {
    const obj: any = {};
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.finalMark !== undefined && message.finalMark !== 0) {
      obj.finalMark = message.finalMark;
    }
    if (message.maximumPotentialMark !== 0) {
      obj.maximumPotentialMark = message.maximumPotentialMark;
    }
    if (message.evaluations?.length) {
      obj.evaluations = message.evaluations.map((e) => PersonalizedEvaluation.toJSON(e));
    }
    if (message.markCategories?.length) {
      obj.markCategories = message.markCategories.map((e) => PersonalizedMarkCategory.toJSON(e));
    }
    if (message.studentEvaluationEntries?.length) {
      obj.studentEvaluationEntries = message.studentEvaluationEntries.map((e) => EvaluationEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudentCoursePerformance>, I>>(base?: I): StudentCoursePerformance {
    return StudentCoursePerformance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudentCoursePerformance>, I>>(object: I): StudentCoursePerformance {
    const message = createBaseStudentCoursePerformance();
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.finalMark = object.finalMark ?? 0;
    message.maximumPotentialMark = object.maximumPotentialMark ?? 0;
    message.evaluations = object.evaluations?.map((e) => PersonalizedEvaluation.fromPartial(e)) || [];
    message.markCategories = object.markCategories?.map((e) => PersonalizedMarkCategory.fromPartial(e)) || [];
    message.studentEvaluationEntries = object.studentEvaluationEntries?.map((e) => EvaluationEntry.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseGetStudentCoursesMarkOverviewRequest(): GetStudentCoursesMarkOverviewRequest {
  return { context: undefined, studentId: undefined, schoolYearId: undefined };
}

export const GetStudentCoursesMarkOverviewRequest: MessageFns<GetStudentCoursesMarkOverviewRequest> = {
  encode(message: GetStudentCoursesMarkOverviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYearId !== undefined) {
      ObjectId.encode(message.schoolYearId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentCoursesMarkOverviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentCoursesMarkOverviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYearId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentCoursesMarkOverviewRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      schoolYearId: isSet(object.schoolYearId) ? ObjectId.fromJSON(object.schoolYearId) : undefined,
    };
  },

  toJSON(message: GetStudentCoursesMarkOverviewRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.schoolYearId !== undefined) {
      obj.schoolYearId = ObjectId.toJSON(message.schoolYearId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentCoursesMarkOverviewRequest>, I>>(
    base?: I,
  ): GetStudentCoursesMarkOverviewRequest {
    return GetStudentCoursesMarkOverviewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentCoursesMarkOverviewRequest>, I>>(
    object: I,
  ): GetStudentCoursesMarkOverviewRequest {
    const message = createBaseGetStudentCoursesMarkOverviewRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
      ? ObjectId.fromPartial(object.schoolYearId)
      : undefined;
    return message;
  },
};

function createBaseGetStudentCoursesMarkOverviewResponse(): GetStudentCoursesMarkOverviewResponse {
  return { courseMarks: [] };
}

export const GetStudentCoursesMarkOverviewResponse: MessageFns<GetStudentCoursesMarkOverviewResponse> = {
  encode(message: GetStudentCoursesMarkOverviewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.courseMarks) {
      StudentCourseMarkOverview.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentCoursesMarkOverviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentCoursesMarkOverviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.courseMarks.push(StudentCourseMarkOverview.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentCoursesMarkOverviewResponse {
    return {
      courseMarks: globalThis.Array.isArray(object?.courseMarks)
        ? object.courseMarks.map((e: any) => StudentCourseMarkOverview.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetStudentCoursesMarkOverviewResponse): unknown {
    const obj: any = {};
    if (message.courseMarks?.length) {
      obj.courseMarks = message.courseMarks.map((e) => StudentCourseMarkOverview.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentCoursesMarkOverviewResponse>, I>>(
    base?: I,
  ): GetStudentCoursesMarkOverviewResponse {
    return GetStudentCoursesMarkOverviewResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentCoursesMarkOverviewResponse>, I>>(
    object: I,
  ): GetStudentCoursesMarkOverviewResponse {
    const message = createBaseGetStudentCoursesMarkOverviewResponse();
    message.courseMarks = object.courseMarks?.map((e) => StudentCourseMarkOverview.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStudentCourseMarkOverview(): StudentCourseMarkOverview {
  return {
    courseId: undefined,
    courseName: "",
    courseCode: "",
    semesterId: undefined,
    studentMark: 0,
    maximumPotentialMark: 0,
  };
}

export const StudentCourseMarkOverview: MessageFns<StudentCourseMarkOverview> = {
  encode(message: StudentCourseMarkOverview, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(10).fork()).join();
    }
    if (message.courseName !== "") {
      writer.uint32(18).string(message.courseName);
    }
    if (message.courseCode !== "") {
      writer.uint32(26).string(message.courseCode);
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
    }
    if (message.studentMark !== undefined && message.studentMark !== 0) {
      writer.uint32(41).double(message.studentMark);
    }
    if (message.maximumPotentialMark !== 0) {
      writer.uint32(49).double(message.maximumPotentialMark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StudentCourseMarkOverview {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudentCourseMarkOverview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.courseCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.studentMark = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.maximumPotentialMark = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudentCourseMarkOverview {
    return {
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      courseName: isSet(object.courseName) ? globalThis.String(object.courseName) : "",
      courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      studentMark: isSet(object.studentMark) ? globalThis.Number(object.studentMark) : 0,
      maximumPotentialMark: isSet(object.maximumPotentialMark) ? globalThis.Number(object.maximumPotentialMark) : 0,
    };
  },

  toJSON(message: StudentCourseMarkOverview): unknown {
    const obj: any = {};
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.courseName !== "") {
      obj.courseName = message.courseName;
    }
    if (message.courseCode !== "") {
      obj.courseCode = message.courseCode;
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.studentMark !== undefined && message.studentMark !== 0) {
      obj.studentMark = message.studentMark;
    }
    if (message.maximumPotentialMark !== 0) {
      obj.maximumPotentialMark = message.maximumPotentialMark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudentCourseMarkOverview>, I>>(base?: I): StudentCourseMarkOverview {
    return StudentCourseMarkOverview.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudentCourseMarkOverview>, I>>(object: I): StudentCourseMarkOverview {
    const message = createBaseStudentCourseMarkOverview();
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.courseName = object.courseName ?? "";
    message.courseCode = object.courseCode ?? "";
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.studentMark = object.studentMark ?? 0;
    message.maximumPotentialMark = object.maximumPotentialMark ?? 0;
    return message;
  },
};

function createBaseExportMarkbookExcelRequest(): ExportMarkbookExcelRequest {
  return { context: undefined, courseId: undefined };
}

export const ExportMarkbookExcelRequest: MessageFns<ExportMarkbookExcelRequest> = {
  encode(message: ExportMarkbookExcelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportMarkbookExcelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportMarkbookExcelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportMarkbookExcelRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: ExportMarkbookExcelRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportMarkbookExcelRequest>, I>>(base?: I): ExportMarkbookExcelRequest {
    return ExportMarkbookExcelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportMarkbookExcelRequest>, I>>(object: I): ExportMarkbookExcelRequest {
    const message = createBaseExportMarkbookExcelRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseExportMarkbookExcelResponse(): ExportMarkbookExcelResponse {
  return { excelData: "", courseName: "" };
}

export const ExportMarkbookExcelResponse: MessageFns<ExportMarkbookExcelResponse> = {
  encode(message: ExportMarkbookExcelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.excelData !== "") {
      writer.uint32(10).string(message.excelData);
    }
    if (message.courseName !== "") {
      writer.uint32(18).string(message.courseName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportMarkbookExcelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportMarkbookExcelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.excelData = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportMarkbookExcelResponse {
    return {
      excelData: isSet(object.excelData) ? globalThis.String(object.excelData) : "",
      courseName: isSet(object.courseName) ? globalThis.String(object.courseName) : "",
    };
  },

  toJSON(message: ExportMarkbookExcelResponse): unknown {
    const obj: any = {};
    if (message.excelData !== "") {
      obj.excelData = message.excelData;
    }
    if (message.courseName !== "") {
      obj.courseName = message.courseName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportMarkbookExcelResponse>, I>>(base?: I): ExportMarkbookExcelResponse {
    return ExportMarkbookExcelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportMarkbookExcelResponse>, I>>(object: I): ExportMarkbookExcelResponse {
    const message = createBaseExportMarkbookExcelResponse();
    message.excelData = object.excelData ?? "";
    message.courseName = object.courseName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
