// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/evaluation_entry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "class_service";

export interface EvaluationEntry {
  id: ObjectId | undefined;
  evaluationId: ObjectId | undefined;
  student: ObjectId | undefined;
  mark: number;
  lastPublishedAt?: Date | undefined;
}

function createBaseEvaluationEntry(): EvaluationEntry {
  return { id: undefined, evaluationId: undefined, student: undefined, mark: 0, lastPublishedAt: undefined };
}

export const EvaluationEntry: MessageFns<EvaluationEntry> = {
  encode(message: EvaluationEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.evaluationId !== undefined) {
      ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(26).fork()).join();
    }
    if (message.mark !== 0) {
      writer.uint32(33).double(message.mark);
    }
    if (message.lastPublishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.lastPublishedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluationEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluationEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.mark = reader.double();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastPublishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluationEntry {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      evaluationId: isSet(object.evaluationId) ? ObjectId.fromJSON(object.evaluationId) : undefined,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      mark: isSet(object.mark) ? globalThis.Number(object.mark) : 0,
      lastPublishedAt: isSet(object.lastPublishedAt) ? fromJsonTimestamp(object.lastPublishedAt) : undefined,
    };
  },

  toJSON(message: EvaluationEntry): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.evaluationId !== undefined) {
      obj.evaluationId = ObjectId.toJSON(message.evaluationId);
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.mark !== 0) {
      obj.mark = message.mark;
    }
    if (message.lastPublishedAt !== undefined) {
      obj.lastPublishedAt = message.lastPublishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluationEntry>, I>>(base?: I): EvaluationEntry {
    return EvaluationEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluationEntry>, I>>(object: I): EvaluationEntry {
    const message = createBaseEvaluationEntry();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
      ? ObjectId.fromPartial(object.evaluationId)
      : undefined;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.mark = object.mark ?? 0;
    message.lastPublishedAt = object.lastPublishedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
