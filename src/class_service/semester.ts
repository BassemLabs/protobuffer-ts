// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/semester.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "class_service";

export enum ReportType {
  Progress = 1,
  Midterm = 2,
  Final = 3,
  UNRECOGNIZED = -1,
}

export function reportTypeFromJSON(object: any): ReportType {
  switch (object) {
    case 1:
    case "Progress":
      return ReportType.Progress;
    case 2:
    case "Midterm":
      return ReportType.Midterm;
    case 3:
    case "Final":
      return ReportType.Final;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReportType.UNRECOGNIZED;
  }
}

export function reportTypeToJSON(object: ReportType): string {
  switch (object) {
    case ReportType.Progress:
      return "Progress";
    case ReportType.Midterm:
      return "Midterm";
    case ReportType.Final:
      return "Final";
    case ReportType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Semester {
  id: ObjectId | undefined;
  name: string;
  archived: boolean;
  startDate: Date | undefined;
  endDate: Date | undefined;
  reportLayout?: SemesterReportLayout | undefined;
}

export interface SemesterReportLayout {
  commentCharLimit: number;
  includeProgressReportCards: boolean;
  showCreditsEarnedEntry: boolean;
  learningSkills: SemesterLearningSkill[];
  reportDates: ReportDates[];
  hideLearningSkillsFromHomerooms: boolean;
  hideLearningSkillsFromCourses: boolean;
}

export interface ReportDates {
  reportType: ReportType;
  dueDate?: Date | undefined;
  distributionDate?: Date | undefined;
}

export interface SemesterLearningSkill {
  id: ObjectId | undefined;
  title: string;
  description: string;
}

function createBaseSemester(): Semester {
  return {
    id: undefined,
    name: "",
    archived: false,
    startDate: undefined,
    endDate: undefined,
    reportLayout: undefined,
  };
}

export const Semester: MessageFns<Semester> = {
  encode(message: Semester, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.archived !== false) {
      writer.uint32(24).bool(message.archived);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
    }
    if (message.reportLayout !== undefined) {
      SemesterReportLayout.encode(message.reportLayout, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Semester {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSemester();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.archived = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.reportLayout = SemesterReportLayout.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Semester {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
      reportLayout: isSet(object.reportLayout) ? SemesterReportLayout.fromJSON(object.reportLayout) : undefined,
    };
  },

  toJSON(message: Semester): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.archived !== false) {
      obj.archived = message.archived;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    if (message.reportLayout !== undefined) {
      obj.reportLayout = SemesterReportLayout.toJSON(message.reportLayout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Semester>, I>>(base?: I): Semester {
    return Semester.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Semester>, I>>(object: I): Semester {
    const message = createBaseSemester();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    message.archived = object.archived ?? false;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.reportLayout = (object.reportLayout !== undefined && object.reportLayout !== null)
      ? SemesterReportLayout.fromPartial(object.reportLayout)
      : undefined;
    return message;
  },
};

function createBaseSemesterReportLayout(): SemesterReportLayout {
  return {
    commentCharLimit: 0,
    includeProgressReportCards: false,
    showCreditsEarnedEntry: false,
    learningSkills: [],
    reportDates: [],
    hideLearningSkillsFromHomerooms: false,
    hideLearningSkillsFromCourses: false,
  };
}

export const SemesterReportLayout: MessageFns<SemesterReportLayout> = {
  encode(message: SemesterReportLayout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commentCharLimit !== 0) {
      writer.uint32(8).uint32(message.commentCharLimit);
    }
    if (message.includeProgressReportCards !== false) {
      writer.uint32(16).bool(message.includeProgressReportCards);
    }
    if (message.showCreditsEarnedEntry !== false) {
      writer.uint32(24).bool(message.showCreditsEarnedEntry);
    }
    for (const v of message.learningSkills) {
      SemesterLearningSkill.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.reportDates) {
      ReportDates.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.hideLearningSkillsFromHomerooms !== false) {
      writer.uint32(48).bool(message.hideLearningSkillsFromHomerooms);
    }
    if (message.hideLearningSkillsFromCourses !== false) {
      writer.uint32(56).bool(message.hideLearningSkillsFromCourses);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SemesterReportLayout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSemesterReportLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.commentCharLimit = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeProgressReportCards = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.showCreditsEarnedEntry = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.learningSkills.push(SemesterLearningSkill.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.reportDates.push(ReportDates.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hideLearningSkillsFromHomerooms = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.hideLearningSkillsFromCourses = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SemesterReportLayout {
    return {
      commentCharLimit: isSet(object.commentCharLimit) ? globalThis.Number(object.commentCharLimit) : 0,
      includeProgressReportCards: isSet(object.includeProgressReportCards)
        ? globalThis.Boolean(object.includeProgressReportCards)
        : false,
      showCreditsEarnedEntry: isSet(object.showCreditsEarnedEntry)
        ? globalThis.Boolean(object.showCreditsEarnedEntry)
        : false,
      learningSkills: globalThis.Array.isArray(object?.learningSkills)
        ? object.learningSkills.map((e: any) => SemesterLearningSkill.fromJSON(e))
        : [],
      reportDates: globalThis.Array.isArray(object?.reportDates)
        ? object.reportDates.map((e: any) => ReportDates.fromJSON(e))
        : [],
      hideLearningSkillsFromHomerooms: isSet(object.hideLearningSkillsFromHomerooms)
        ? globalThis.Boolean(object.hideLearningSkillsFromHomerooms)
        : false,
      hideLearningSkillsFromCourses: isSet(object.hideLearningSkillsFromCourses)
        ? globalThis.Boolean(object.hideLearningSkillsFromCourses)
        : false,
    };
  },

  toJSON(message: SemesterReportLayout): unknown {
    const obj: any = {};
    if (message.commentCharLimit !== 0) {
      obj.commentCharLimit = Math.round(message.commentCharLimit);
    }
    if (message.includeProgressReportCards !== false) {
      obj.includeProgressReportCards = message.includeProgressReportCards;
    }
    if (message.showCreditsEarnedEntry !== false) {
      obj.showCreditsEarnedEntry = message.showCreditsEarnedEntry;
    }
    if (message.learningSkills?.length) {
      obj.learningSkills = message.learningSkills.map((e) => SemesterLearningSkill.toJSON(e));
    }
    if (message.reportDates?.length) {
      obj.reportDates = message.reportDates.map((e) => ReportDates.toJSON(e));
    }
    if (message.hideLearningSkillsFromHomerooms !== false) {
      obj.hideLearningSkillsFromHomerooms = message.hideLearningSkillsFromHomerooms;
    }
    if (message.hideLearningSkillsFromCourses !== false) {
      obj.hideLearningSkillsFromCourses = message.hideLearningSkillsFromCourses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SemesterReportLayout>, I>>(base?: I): SemesterReportLayout {
    return SemesterReportLayout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SemesterReportLayout>, I>>(object: I): SemesterReportLayout {
    const message = createBaseSemesterReportLayout();
    message.commentCharLimit = object.commentCharLimit ?? 0;
    message.includeProgressReportCards = object.includeProgressReportCards ?? false;
    message.showCreditsEarnedEntry = object.showCreditsEarnedEntry ?? false;
    message.learningSkills = object.learningSkills?.map((e) => SemesterLearningSkill.fromPartial(e)) || [];
    message.reportDates = object.reportDates?.map((e) => ReportDates.fromPartial(e)) || [];
    message.hideLearningSkillsFromHomerooms = object.hideLearningSkillsFromHomerooms ?? false;
    message.hideLearningSkillsFromCourses = object.hideLearningSkillsFromCourses ?? false;
    return message;
  },
};

function createBaseReportDates(): ReportDates {
  return { reportType: 1, dueDate: undefined, distributionDate: undefined };
}

export const ReportDates: MessageFns<ReportDates> = {
  encode(message: ReportDates, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reportType !== 1) {
      writer.uint32(8).int32(message.reportType);
    }
    if (message.dueDate !== undefined) {
      Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(18).fork()).join();
    }
    if (message.distributionDate !== undefined) {
      Timestamp.encode(toTimestamp(message.distributionDate), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportDates {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportDates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reportType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dueDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.distributionDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportDates {
    return {
      reportType: isSet(object.reportType) ? reportTypeFromJSON(object.reportType) : 1,
      dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
      distributionDate: isSet(object.distributionDate) ? fromJsonTimestamp(object.distributionDate) : undefined,
    };
  },

  toJSON(message: ReportDates): unknown {
    const obj: any = {};
    if (message.reportType !== 1) {
      obj.reportType = reportTypeToJSON(message.reportType);
    }
    if (message.dueDate !== undefined) {
      obj.dueDate = message.dueDate.toISOString();
    }
    if (message.distributionDate !== undefined) {
      obj.distributionDate = message.distributionDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportDates>, I>>(base?: I): ReportDates {
    return ReportDates.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportDates>, I>>(object: I): ReportDates {
    const message = createBaseReportDates();
    message.reportType = object.reportType ?? 1;
    message.dueDate = object.dueDate ?? undefined;
    message.distributionDate = object.distributionDate ?? undefined;
    return message;
  },
};

function createBaseSemesterLearningSkill(): SemesterLearningSkill {
  return { id: undefined, title: "", description: "" };
}

export const SemesterLearningSkill: MessageFns<SemesterLearningSkill> = {
  encode(message: SemesterLearningSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SemesterLearningSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSemesterLearningSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SemesterLearningSkill {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: SemesterLearningSkill): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SemesterLearningSkill>, I>>(base?: I): SemesterLearningSkill {
    return SemesterLearningSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SemesterLearningSkill>, I>>(object: I): SemesterLearningSkill {
    const message = createBaseSemesterLearningSkill();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
