// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/evaluation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "class_service";

export interface Evaluation {
  id: ObjectId | undefined;
  courseId: ObjectId | undefined;
  name: string;
  total: number;
  weight: number;
  /** YYYY-MM-DD format for NaiveDate */
  date: string;
  markCategory: ObjectId | undefined;
  visibleToParentsAndStudents: boolean;
}

export interface DetailedEvaluation {
  id: ObjectId | undefined;
  courseId: ObjectId | undefined;
  name: string;
  total: number;
  weight: number;
  /** YYYY-MM-DD format for NaiveDate */
  date: string;
  markCategory: ObjectId | undefined;
  visibleToParentsAndStudents: boolean;
  /** Percentage contribution of this evaluation to the final course mark (0-100) */
  evaluationContributionToFinalMark: number;
}

export interface PersonalizedEvaluation {
  id: ObjectId | undefined;
  studentId: ObjectId | undefined;
  courseId: ObjectId | undefined;
  name: string;
  total: number;
  weight: number;
  /** YYYY-MM-DD format for NaiveDate */
  date: string;
  markCategory: ObjectId | undefined;
  visibleToParentsAndStudents: boolean;
  /** calculated based on the student's marked evaluations */
  evaluationContributionToStudentFinalMark: number;
}

function createBaseEvaluation(): Evaluation {
  return {
    id: undefined,
    courseId: undefined,
    name: "",
    total: 0,
    weight: 0,
    date: "",
    markCategory: undefined,
    visibleToParentsAndStudents: false,
  };
}

export const Evaluation: MessageFns<Evaluation> = {
  encode(message: Evaluation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.total !== 0) {
      writer.uint32(32).uint32(message.total);
    }
    if (message.weight !== 0) {
      writer.uint32(40).uint32(message.weight);
    }
    if (message.date !== "") {
      writer.uint32(50).string(message.date);
    }
    if (message.markCategory !== undefined) {
      ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
    }
    if (message.visibleToParentsAndStudents !== false) {
      writer.uint32(64).bool(message.visibleToParentsAndStudents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Evaluation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.date = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.markCategory = ObjectId.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.visibleToParentsAndStudents = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Evaluation {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      markCategory: isSet(object.markCategory) ? ObjectId.fromJSON(object.markCategory) : undefined,
      visibleToParentsAndStudents: isSet(object.visibleToParentsAndStudents)
        ? globalThis.Boolean(object.visibleToParentsAndStudents)
        : false,
    };
  },

  toJSON(message: Evaluation): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.markCategory !== undefined) {
      obj.markCategory = ObjectId.toJSON(message.markCategory);
    }
    if (message.visibleToParentsAndStudents !== false) {
      obj.visibleToParentsAndStudents = message.visibleToParentsAndStudents;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Evaluation>, I>>(base?: I): Evaluation {
    return Evaluation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Evaluation>, I>>(object: I): Evaluation {
    const message = createBaseEvaluation();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.total = object.total ?? 0;
    message.weight = object.weight ?? 0;
    message.date = object.date ?? "";
    message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
      ? ObjectId.fromPartial(object.markCategory)
      : undefined;
    message.visibleToParentsAndStudents = object.visibleToParentsAndStudents ?? false;
    return message;
  },
};

function createBaseDetailedEvaluation(): DetailedEvaluation {
  return {
    id: undefined,
    courseId: undefined,
    name: "",
    total: 0,
    weight: 0,
    date: "",
    markCategory: undefined,
    visibleToParentsAndStudents: false,
    evaluationContributionToFinalMark: 0,
  };
}

export const DetailedEvaluation: MessageFns<DetailedEvaluation> = {
  encode(message: DetailedEvaluation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.total !== 0) {
      writer.uint32(32).uint32(message.total);
    }
    if (message.weight !== 0) {
      writer.uint32(40).uint32(message.weight);
    }
    if (message.date !== "") {
      writer.uint32(50).string(message.date);
    }
    if (message.markCategory !== undefined) {
      ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
    }
    if (message.visibleToParentsAndStudents !== false) {
      writer.uint32(64).bool(message.visibleToParentsAndStudents);
    }
    if (message.evaluationContributionToFinalMark !== 0) {
      writer.uint32(73).double(message.evaluationContributionToFinalMark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailedEvaluation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailedEvaluation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.date = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.markCategory = ObjectId.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.visibleToParentsAndStudents = reader.bool();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.evaluationContributionToFinalMark = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailedEvaluation {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      markCategory: isSet(object.markCategory) ? ObjectId.fromJSON(object.markCategory) : undefined,
      visibleToParentsAndStudents: isSet(object.visibleToParentsAndStudents)
        ? globalThis.Boolean(object.visibleToParentsAndStudents)
        : false,
      evaluationContributionToFinalMark: isSet(object.evaluationContributionToFinalMark)
        ? globalThis.Number(object.evaluationContributionToFinalMark)
        : 0,
    };
  },

  toJSON(message: DetailedEvaluation): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.markCategory !== undefined) {
      obj.markCategory = ObjectId.toJSON(message.markCategory);
    }
    if (message.visibleToParentsAndStudents !== false) {
      obj.visibleToParentsAndStudents = message.visibleToParentsAndStudents;
    }
    if (message.evaluationContributionToFinalMark !== 0) {
      obj.evaluationContributionToFinalMark = message.evaluationContributionToFinalMark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailedEvaluation>, I>>(base?: I): DetailedEvaluation {
    return DetailedEvaluation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailedEvaluation>, I>>(object: I): DetailedEvaluation {
    const message = createBaseDetailedEvaluation();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.total = object.total ?? 0;
    message.weight = object.weight ?? 0;
    message.date = object.date ?? "";
    message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
      ? ObjectId.fromPartial(object.markCategory)
      : undefined;
    message.visibleToParentsAndStudents = object.visibleToParentsAndStudents ?? false;
    message.evaluationContributionToFinalMark = object.evaluationContributionToFinalMark ?? 0;
    return message;
  },
};

function createBasePersonalizedEvaluation(): PersonalizedEvaluation {
  return {
    id: undefined,
    studentId: undefined,
    courseId: undefined,
    name: "",
    total: 0,
    weight: 0,
    date: "",
    markCategory: undefined,
    visibleToParentsAndStudents: false,
    evaluationContributionToStudentFinalMark: 0,
  };
}

export const PersonalizedEvaluation: MessageFns<PersonalizedEvaluation> = {
  encode(message: PersonalizedEvaluation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.total !== 0) {
      writer.uint32(40).uint32(message.total);
    }
    if (message.weight !== 0) {
      writer.uint32(48).uint32(message.weight);
    }
    if (message.date !== "") {
      writer.uint32(58).string(message.date);
    }
    if (message.markCategory !== undefined) {
      ObjectId.encode(message.markCategory, writer.uint32(66).fork()).join();
    }
    if (message.visibleToParentsAndStudents !== false) {
      writer.uint32(72).bool(message.visibleToParentsAndStudents);
    }
    if (message.evaluationContributionToStudentFinalMark !== 0) {
      writer.uint32(81).double(message.evaluationContributionToStudentFinalMark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonalizedEvaluation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonalizedEvaluation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.date = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.markCategory = ObjectId.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.visibleToParentsAndStudents = reader.bool();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.evaluationContributionToStudentFinalMark = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PersonalizedEvaluation {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      markCategory: isSet(object.markCategory) ? ObjectId.fromJSON(object.markCategory) : undefined,
      visibleToParentsAndStudents: isSet(object.visibleToParentsAndStudents)
        ? globalThis.Boolean(object.visibleToParentsAndStudents)
        : false,
      evaluationContributionToStudentFinalMark: isSet(object.evaluationContributionToStudentFinalMark)
        ? globalThis.Number(object.evaluationContributionToStudentFinalMark)
        : 0,
    };
  },

  toJSON(message: PersonalizedEvaluation): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.markCategory !== undefined) {
      obj.markCategory = ObjectId.toJSON(message.markCategory);
    }
    if (message.visibleToParentsAndStudents !== false) {
      obj.visibleToParentsAndStudents = message.visibleToParentsAndStudents;
    }
    if (message.evaluationContributionToStudentFinalMark !== 0) {
      obj.evaluationContributionToStudentFinalMark = message.evaluationContributionToStudentFinalMark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PersonalizedEvaluation>, I>>(base?: I): PersonalizedEvaluation {
    return PersonalizedEvaluation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PersonalizedEvaluation>, I>>(object: I): PersonalizedEvaluation {
    const message = createBasePersonalizedEvaluation();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.total = object.total ?? 0;
    message.weight = object.weight ?? 0;
    message.date = object.date ?? "";
    message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
      ? ObjectId.fromPartial(object.markCategory)
      : undefined;
    message.visibleToParentsAndStudents = object.visibleToParentsAndStudents ?? false;
    message.evaluationContributionToStudentFinalMark = object.evaluationContributionToStudentFinalMark ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
