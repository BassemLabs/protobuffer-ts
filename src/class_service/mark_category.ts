// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/mark_category.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "class_service";

export interface MarkCategory {
  id: ObjectId | undefined;
  courseId: ObjectId | undefined;
  name: string;
  percentage: number;
}

export interface DetailedMarkCategory {
  id: ObjectId | undefined;
  courseId: ObjectId | undefined;
  name: string;
  /** Original configured percentage */
  percentage: number;
  /** Adjusted percentage after redistribution of non evaluated categories of the course */
  effectivePercentage: number;
}

export interface PersonalizedMarkCategory {
  id: ObjectId | undefined;
  courseId: ObjectId | undefined;
  studentId: ObjectId | undefined;
  name: string;
  percentage: number;
  /** calculated based on the student's marked evaluations */
  effectivePercentageForStudent: number;
}

function createBaseMarkCategory(): MarkCategory {
  return { id: undefined, courseId: undefined, name: "", percentage: 0 };
}

export const MarkCategory: MessageFns<MarkCategory> = {
  encode(message: MarkCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.percentage !== 0) {
      writer.uint32(32).uint32(message.percentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.percentage = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkCategory {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
    };
  },

  toJSON(message: MarkCategory): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.percentage !== 0) {
      obj.percentage = Math.round(message.percentage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkCategory>, I>>(base?: I): MarkCategory {
    return MarkCategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkCategory>, I>>(object: I): MarkCategory {
    const message = createBaseMarkCategory();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.percentage = object.percentage ?? 0;
    return message;
  },
};

function createBaseDetailedMarkCategory(): DetailedMarkCategory {
  return { id: undefined, courseId: undefined, name: "", percentage: 0, effectivePercentage: 0 };
}

export const DetailedMarkCategory: MessageFns<DetailedMarkCategory> = {
  encode(message: DetailedMarkCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.percentage !== 0) {
      writer.uint32(32).uint32(message.percentage);
    }
    if (message.effectivePercentage !== 0) {
      writer.uint32(41).double(message.effectivePercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailedMarkCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailedMarkCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.percentage = reader.uint32();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.effectivePercentage = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailedMarkCategory {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
      effectivePercentage: isSet(object.effectivePercentage) ? globalThis.Number(object.effectivePercentage) : 0,
    };
  },

  toJSON(message: DetailedMarkCategory): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.percentage !== 0) {
      obj.percentage = Math.round(message.percentage);
    }
    if (message.effectivePercentage !== 0) {
      obj.effectivePercentage = message.effectivePercentage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailedMarkCategory>, I>>(base?: I): DetailedMarkCategory {
    return DetailedMarkCategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailedMarkCategory>, I>>(object: I): DetailedMarkCategory {
    const message = createBaseDetailedMarkCategory();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.percentage = object.percentage ?? 0;
    message.effectivePercentage = object.effectivePercentage ?? 0;
    return message;
  },
};

function createBasePersonalizedMarkCategory(): PersonalizedMarkCategory {
  return {
    id: undefined,
    courseId: undefined,
    studentId: undefined,
    name: "",
    percentage: 0,
    effectivePercentageForStudent: 0,
  };
}

export const PersonalizedMarkCategory: MessageFns<PersonalizedMarkCategory> = {
  encode(message: PersonalizedMarkCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.percentage !== 0) {
      writer.uint32(40).uint32(message.percentage);
    }
    if (message.effectivePercentageForStudent !== 0) {
      writer.uint32(49).double(message.effectivePercentageForStudent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonalizedMarkCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonalizedMarkCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.percentage = reader.uint32();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.effectivePercentageForStudent = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PersonalizedMarkCategory {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
      effectivePercentageForStudent: isSet(object.effectivePercentageForStudent)
        ? globalThis.Number(object.effectivePercentageForStudent)
        : 0,
    };
  },

  toJSON(message: PersonalizedMarkCategory): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.percentage !== 0) {
      obj.percentage = Math.round(message.percentage);
    }
    if (message.effectivePercentageForStudent !== 0) {
      obj.effectivePercentageForStudent = message.effectivePercentageForStudent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PersonalizedMarkCategory>, I>>(base?: I): PersonalizedMarkCategory {
    return PersonalizedMarkCategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PersonalizedMarkCategory>, I>>(object: I): PersonalizedMarkCategory {
    const message = createBasePersonalizedMarkCategory();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.name = object.name ?? "";
    message.percentage = object.percentage ?? 0;
    message.effectivePercentageForStudent = object.effectivePercentageForStudent ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
