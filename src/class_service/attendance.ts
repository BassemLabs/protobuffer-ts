// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/attendance.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectId } from "../utils/object_id";
import { UserType, userTypeFromJSON, userTypeToJSON, userTypeToNumber } from "../utils/user_type";

export const protobufPackage = "class_service";

export enum AttendanceStatus {
  None = "None",
  Present = "Present",
  Late = "Late",
  Absent = "Absent",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function attendanceStatusFromJSON(object: any): AttendanceStatus {
  switch (object) {
    case 0:
    case "None":
      return AttendanceStatus.None;
    case 1:
    case "Present":
      return AttendanceStatus.Present;
    case 2:
    case "Late":
      return AttendanceStatus.Late;
    case 3:
    case "Absent":
      return AttendanceStatus.Absent;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttendanceStatus.UNRECOGNIZED;
  }
}

export function attendanceStatusToJSON(object: AttendanceStatus): string {
  switch (object) {
    case AttendanceStatus.None:
      return "None";
    case AttendanceStatus.Present:
      return "Present";
    case AttendanceStatus.Late:
      return "Late";
    case AttendanceStatus.Absent:
      return "Absent";
    case AttendanceStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function attendanceStatusToNumber(object: AttendanceStatus): number {
  switch (object) {
    case AttendanceStatus.None:
      return 0;
    case AttendanceStatus.Present:
      return 1;
    case AttendanceStatus.Late:
      return 2;
    case AttendanceStatus.Absent:
      return 3;
    case AttendanceStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface Attendance {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  student: ObjectId | undefined;
  course?: ObjectId | undefined;
  homeroom?:
    | ObjectId
    | undefined;
  /** YYYY-MM-DD format for NaiveDate */
  date: string;
  periodNumber: number;
  reason: string;
  signInTime?: Date | undefined;
  signOutTime?: Date | undefined;
  status: AttendanceStatus;
  lateDismissalDate?: Date | undefined;
  studentExcusedBy?: ObjectId | undefined;
  studentExcusedByUserType?: UserType | undefined;
}

function createBaseAttendance(): Attendance {
  return {
    id: undefined,
    organization: undefined,
    student: undefined,
    course: undefined,
    homeroom: undefined,
    date: "",
    periodNumber: 0,
    reason: "",
    signInTime: undefined,
    signOutTime: undefined,
    status: AttendanceStatus.None,
    lateDismissalDate: undefined,
    studentExcusedBy: undefined,
    studentExcusedByUserType: UserType.None,
  };
}

export const Attendance: MessageFns<Attendance> = {
  encode(message: Attendance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(26).fork()).join();
    }
    if (message.course !== undefined) {
      ObjectId.encode(message.course, writer.uint32(34).fork()).join();
    }
    if (message.homeroom !== undefined) {
      ObjectId.encode(message.homeroom, writer.uint32(42).fork()).join();
    }
    if (message.date !== "") {
      writer.uint32(50).string(message.date);
    }
    if (message.periodNumber !== 0) {
      writer.uint32(56).uint32(message.periodNumber);
    }
    if (message.reason !== "") {
      writer.uint32(66).string(message.reason);
    }
    if (message.signInTime !== undefined) {
      Timestamp.encode(toTimestamp(message.signInTime), writer.uint32(74).fork()).join();
    }
    if (message.signOutTime !== undefined) {
      Timestamp.encode(toTimestamp(message.signOutTime), writer.uint32(82).fork()).join();
    }
    if (message.status !== AttendanceStatus.None) {
      writer.uint32(88).int32(attendanceStatusToNumber(message.status));
    }
    if (message.lateDismissalDate !== undefined) {
      Timestamp.encode(toTimestamp(message.lateDismissalDate), writer.uint32(98).fork()).join();
    }
    if (message.studentExcusedBy !== undefined) {
      ObjectId.encode(message.studentExcusedBy, writer.uint32(106).fork()).join();
    }
    if (message.studentExcusedByUserType !== undefined && message.studentExcusedByUserType !== UserType.None) {
      writer.uint32(112).int32(userTypeToNumber(message.studentExcusedByUserType));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attendance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttendance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.course = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.homeroom = ObjectId.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.date = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.periodNumber = reader.uint32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.signInTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.signOutTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.status = attendanceStatusFromJSON(reader.int32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.lateDismissalDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.studentExcusedBy = ObjectId.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.studentExcusedByUserType = userTypeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attendance {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      course: isSet(object.course) ? ObjectId.fromJSON(object.course) : undefined,
      homeroom: isSet(object.homeroom) ? ObjectId.fromJSON(object.homeroom) : undefined,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      periodNumber: isSet(object.periodNumber) ? globalThis.Number(object.periodNumber) : 0,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      signInTime: isSet(object.signInTime) ? fromJsonTimestamp(object.signInTime) : undefined,
      signOutTime: isSet(object.signOutTime) ? fromJsonTimestamp(object.signOutTime) : undefined,
      status: isSet(object.status) ? attendanceStatusFromJSON(object.status) : AttendanceStatus.None,
      lateDismissalDate: isSet(object.lateDismissalDate) ? fromJsonTimestamp(object.lateDismissalDate) : undefined,
      studentExcusedBy: isSet(object.studentExcusedBy) ? ObjectId.fromJSON(object.studentExcusedBy) : undefined,
      studentExcusedByUserType: isSet(object.studentExcusedByUserType)
        ? userTypeFromJSON(object.studentExcusedByUserType)
        : UserType.None,
    };
  },

  toJSON(message: Attendance): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.course !== undefined) {
      obj.course = ObjectId.toJSON(message.course);
    }
    if (message.homeroom !== undefined) {
      obj.homeroom = ObjectId.toJSON(message.homeroom);
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.periodNumber !== 0) {
      obj.periodNumber = Math.round(message.periodNumber);
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.signInTime !== undefined) {
      obj.signInTime = message.signInTime.toISOString();
    }
    if (message.signOutTime !== undefined) {
      obj.signOutTime = message.signOutTime.toISOString();
    }
    if (message.status !== AttendanceStatus.None) {
      obj.status = attendanceStatusToJSON(message.status);
    }
    if (message.lateDismissalDate !== undefined) {
      obj.lateDismissalDate = message.lateDismissalDate.toISOString();
    }
    if (message.studentExcusedBy !== undefined) {
      obj.studentExcusedBy = ObjectId.toJSON(message.studentExcusedBy);
    }
    if (message.studentExcusedByUserType !== undefined && message.studentExcusedByUserType !== UserType.None) {
      obj.studentExcusedByUserType = userTypeToJSON(message.studentExcusedByUserType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attendance>, I>>(base?: I): Attendance {
    return Attendance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attendance>, I>>(object: I): Attendance {
    const message = createBaseAttendance();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.course = (object.course !== undefined && object.course !== null)
      ? ObjectId.fromPartial(object.course)
      : undefined;
    message.homeroom = (object.homeroom !== undefined && object.homeroom !== null)
      ? ObjectId.fromPartial(object.homeroom)
      : undefined;
    message.date = object.date ?? "";
    message.periodNumber = object.periodNumber ?? 0;
    message.reason = object.reason ?? "";
    message.signInTime = object.signInTime ?? undefined;
    message.signOutTime = object.signOutTime ?? undefined;
    message.status = object.status ?? AttendanceStatus.None;
    message.lateDismissalDate = object.lateDismissalDate ?? undefined;
    message.studentExcusedBy = (object.studentExcusedBy !== undefined && object.studentExcusedBy !== null)
      ? ObjectId.fromPartial(object.studentExcusedBy)
      : undefined;
    message.studentExcusedByUserType = object.studentExcusedByUserType ?? UserType.None;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
