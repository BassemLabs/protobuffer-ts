// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/lms_course.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "class_service";

export enum LmsProviderType {
  GOOGLE_CLASSROOM = "GOOGLE_CLASSROOM",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function lmsProviderTypeFromJSON(object: any): LmsProviderType {
  switch (object) {
    case 1:
    case "GOOGLE_CLASSROOM":
      return LmsProviderType.GOOGLE_CLASSROOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LmsProviderType.UNRECOGNIZED;
  }
}

export function lmsProviderTypeToJSON(object: LmsProviderType): string {
  switch (object) {
    case LmsProviderType.GOOGLE_CLASSROOM:
      return "GOOGLE_CLASSROOM";
    case LmsProviderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function lmsProviderTypeToNumber(object: LmsProviderType): number {
  switch (object) {
    case LmsProviderType.GOOGLE_CLASSROOM:
      return 1;
    case LmsProviderType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum LmsWorkType {
  ASSIGNMENT = "ASSIGNMENT",
  MULTIPLE_CHOICE = "MULTIPLE_CHOICE",
  SHORT_ANSWER = "SHORT_ANSWER",
  QUIZ = "QUIZ",
  DISCUSSION = "DISCUSSION",
  EXTERNAL_TOOL = "EXTERNAL_TOOL",
  OTHER = "OTHER",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function lmsWorkTypeFromJSON(object: any): LmsWorkType {
  switch (object) {
    case 0:
    case "ASSIGNMENT":
      return LmsWorkType.ASSIGNMENT;
    case 1:
    case "MULTIPLE_CHOICE":
      return LmsWorkType.MULTIPLE_CHOICE;
    case 2:
    case "SHORT_ANSWER":
      return LmsWorkType.SHORT_ANSWER;
    case 3:
    case "QUIZ":
      return LmsWorkType.QUIZ;
    case 4:
    case "DISCUSSION":
      return LmsWorkType.DISCUSSION;
    case 5:
    case "EXTERNAL_TOOL":
      return LmsWorkType.EXTERNAL_TOOL;
    case 6:
    case "OTHER":
      return LmsWorkType.OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LmsWorkType.UNRECOGNIZED;
  }
}

export function lmsWorkTypeToJSON(object: LmsWorkType): string {
  switch (object) {
    case LmsWorkType.ASSIGNMENT:
      return "ASSIGNMENT";
    case LmsWorkType.MULTIPLE_CHOICE:
      return "MULTIPLE_CHOICE";
    case LmsWorkType.SHORT_ANSWER:
      return "SHORT_ANSWER";
    case LmsWorkType.QUIZ:
      return "QUIZ";
    case LmsWorkType.DISCUSSION:
      return "DISCUSSION";
    case LmsWorkType.EXTERNAL_TOOL:
      return "EXTERNAL_TOOL";
    case LmsWorkType.OTHER:
      return "OTHER";
    case LmsWorkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function lmsWorkTypeToNumber(object: LmsWorkType): number {
  switch (object) {
    case LmsWorkType.ASSIGNMENT:
      return 0;
    case LmsWorkType.MULTIPLE_CHOICE:
      return 1;
    case LmsWorkType.SHORT_ANSWER:
      return 2;
    case LmsWorkType.QUIZ:
      return 3;
    case LmsWorkType.DISCUSSION:
      return 4;
    case LmsWorkType.EXTERNAL_TOOL:
      return 5;
    case LmsWorkType.OTHER:
      return 6;
    case LmsWorkType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum LmsSubmissionState {
  /**
   * UNSUBMITTED - Submission has never been turned in.
   * Google Classroom: NEW / CREATED
   * Canvas: unsubmitted / missing / late / excused / pending
   */
  UNSUBMITTED = "UNSUBMITTED",
  /**
   * SUBMITTED - Student has actively submitted the assignment.
   * Google Classroom: TURNED_IN / RECLAIMED_BY_STUDENT
   * Canvas: submitted
   */
  SUBMITTED = "SUBMITTED",
  /**
   * GRADED - Assignment has been graded / returned by teacher.
   * Google Classroom: RETURNED
   * Canvas: graded
   */
  GRADED = "GRADED",
  /**
   * UNSPECIFIED - Unknown / unspecified state.
   * Google Classroom: SUBMISSION_STATE_UNSPECIFIED
   * Canvas: not applicable
   */
  UNSPECIFIED = "UNSPECIFIED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function lmsSubmissionStateFromJSON(object: any): LmsSubmissionState {
  switch (object) {
    case 0:
    case "UNSUBMITTED":
      return LmsSubmissionState.UNSUBMITTED;
    case 1:
    case "SUBMITTED":
      return LmsSubmissionState.SUBMITTED;
    case 2:
    case "GRADED":
      return LmsSubmissionState.GRADED;
    case 7:
    case "UNSPECIFIED":
      return LmsSubmissionState.UNSPECIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LmsSubmissionState.UNRECOGNIZED;
  }
}

export function lmsSubmissionStateToJSON(object: LmsSubmissionState): string {
  switch (object) {
    case LmsSubmissionState.UNSUBMITTED:
      return "UNSUBMITTED";
    case LmsSubmissionState.SUBMITTED:
      return "SUBMITTED";
    case LmsSubmissionState.GRADED:
      return "GRADED";
    case LmsSubmissionState.UNSPECIFIED:
      return "UNSPECIFIED";
    case LmsSubmissionState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function lmsSubmissionStateToNumber(object: LmsSubmissionState): number {
  switch (object) {
    case LmsSubmissionState.UNSUBMITTED:
      return 0;
    case LmsSubmissionState.SUBMITTED:
      return 1;
    case LmsSubmissionState.GRADED:
      return 2;
    case LmsSubmissionState.UNSPECIFIED:
      return 7;
    case LmsSubmissionState.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface LmsCourse {
  id: string;
  name: string;
  section: string;
  url: string;
  provider: LmsProviderType;
}

export interface LmsCourseWork {
  lmsCourseWorkId: string;
  /** Provider course id */
  lmsCourseId: string;
  title?: string | undefined;
  description?: string | undefined;
  link?: string | undefined;
  attachments: Attachment[];
  creationTime?: Date | undefined;
  dueDate?:
    | Date
    | undefined;
  /** Classroom: maxPoints, Canvas: points_possible */
  maxPoints?: number | undefined;
  workType?: LmsWorkType | undefined;
  provider: LmsProviderType;
  /** Store original LMS JSON */
  rawJson?: string | undefined;
}

export interface Attachment {
  url: string;
}

export interface LmsSubmission {
  /**
   * Unified submission ID across providers.
   * - Google Classroom: maps directly to StudentSubmission.id
   * - Canvas: Canvas does not always expose a distinct submission ID.
   *   Instead, a submission is usually identified by (assignment_id + student_id).
   *   For consistency, when ingesting Canvas data generate a synthetic ID:
   *     "canvas_{assignmentId}_{studentId}"
   *   Store provider raw_json so you can re-hydrate provider-specific identifiers if needed.
   */
  lmsSubmissionId: string;
  lmsCourseWorkId: string;
  lmsCourseId: string;
  /** Local user id (in BassemLabs) */
  studentId:
    | ObjectId
    | undefined;
  /**
   * URL to view the submission in the LMS web UI.
   * - Google Classroom: maps to StudentSubmission.alternateLink.
   * - Canvas: maps to Submission.preview_url or html_url.
   */
  submissionUrl: string;
  state: LmsSubmissionState;
  submittedAt?:
    | Date
    | undefined;
  /**
   * - Google Classroom: inferred if submitted after dueDate.
   * - Canvas: late status provided.
   */
  late?:
    | boolean
    | undefined;
  /** final grade */
  grade?:
    | number
    | undefined;
  /** Grade/state history (normalized) */
  history: LmsHistory[];
  provider: LmsProviderType;
  /** Provider raw JSON (always keep for edge cases) */
  rawJson?: string | undefined;
}

export interface LmsHistory {
  /** Who made the change (provider user id) */
  actorId: string;
  /** grade_change, state_change, comment, etc. */
  type: string;
  oldValue?: string | undefined;
  newValue?: string | undefined;
  timestamp?:
    | Date
    | undefined;
  /** raw provider entry if present */
  rawEntry?: string | undefined;
}

function createBaseLmsCourse(): LmsCourse {
  return { id: "", name: "", section: "", url: "", provider: LmsProviderType.GOOGLE_CLASSROOM };
}

export const LmsCourse: MessageFns<LmsCourse> = {
  encode(message: LmsCourse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.section !== "") {
      writer.uint32(26).string(message.section);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
      writer.uint32(40).int32(lmsProviderTypeToNumber(message.provider));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LmsCourse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLmsCourse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.section = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.provider = lmsProviderTypeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LmsCourse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      section: isSet(object.section) ? globalThis.String(object.section) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      provider: isSet(object.provider) ? lmsProviderTypeFromJSON(object.provider) : LmsProviderType.GOOGLE_CLASSROOM,
    };
  },

  toJSON(message: LmsCourse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.section !== "") {
      obj.section = message.section;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
      obj.provider = lmsProviderTypeToJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LmsCourse>, I>>(base?: I): LmsCourse {
    return LmsCourse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LmsCourse>, I>>(object: I): LmsCourse {
    const message = createBaseLmsCourse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.section = object.section ?? "";
    message.url = object.url ?? "";
    message.provider = object.provider ?? LmsProviderType.GOOGLE_CLASSROOM;
    return message;
  },
};

function createBaseLmsCourseWork(): LmsCourseWork {
  return {
    lmsCourseWorkId: "",
    lmsCourseId: "",
    title: "",
    description: "",
    link: "",
    attachments: [],
    creationTime: undefined,
    dueDate: undefined,
    maxPoints: 0,
    workType: LmsWorkType.ASSIGNMENT,
    provider: LmsProviderType.GOOGLE_CLASSROOM,
    rawJson: "",
  };
}

export const LmsCourseWork: MessageFns<LmsCourseWork> = {
  encode(message: LmsCourseWork, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lmsCourseWorkId !== "") {
      writer.uint32(10).string(message.lmsCourseWorkId);
    }
    if (message.lmsCourseId !== "") {
      writer.uint32(18).string(message.lmsCourseId);
    }
    if (message.title !== undefined && message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== undefined && message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.link !== undefined && message.link !== "") {
      writer.uint32(42).string(message.link);
    }
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.creationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(58).fork()).join();
    }
    if (message.dueDate !== undefined) {
      Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(66).fork()).join();
    }
    if (message.maxPoints !== undefined && message.maxPoints !== 0) {
      writer.uint32(73).double(message.maxPoints);
    }
    if (message.workType !== undefined && message.workType !== LmsWorkType.ASSIGNMENT) {
      writer.uint32(80).int32(lmsWorkTypeToNumber(message.workType));
    }
    if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
      writer.uint32(88).int32(lmsProviderTypeToNumber(message.provider));
    }
    if (message.rawJson !== undefined && message.rawJson !== "") {
      writer.uint32(98).string(message.rawJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LmsCourseWork {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLmsCourseWork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lmsCourseWorkId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lmsCourseId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.link = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.creationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.dueDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.maxPoints = reader.double();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.workType = lmsWorkTypeFromJSON(reader.int32());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.provider = lmsProviderTypeFromJSON(reader.int32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.rawJson = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LmsCourseWork {
    return {
      lmsCourseWorkId: isSet(object.lmsCourseWorkId) ? globalThis.String(object.lmsCourseWorkId) : "",
      lmsCourseId: isSet(object.lmsCourseId) ? globalThis.String(object.lmsCourseId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      link: isSet(object.link) ? globalThis.String(object.link) : "",
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => Attachment.fromJSON(e))
        : [],
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
      maxPoints: isSet(object.maxPoints) ? globalThis.Number(object.maxPoints) : 0,
      workType: isSet(object.workType) ? lmsWorkTypeFromJSON(object.workType) : LmsWorkType.ASSIGNMENT,
      provider: isSet(object.provider) ? lmsProviderTypeFromJSON(object.provider) : LmsProviderType.GOOGLE_CLASSROOM,
      rawJson: isSet(object.rawJson) ? globalThis.String(object.rawJson) : "",
    };
  },

  toJSON(message: LmsCourseWork): unknown {
    const obj: any = {};
    if (message.lmsCourseWorkId !== "") {
      obj.lmsCourseWorkId = message.lmsCourseWorkId;
    }
    if (message.lmsCourseId !== "") {
      obj.lmsCourseId = message.lmsCourseId;
    }
    if (message.title !== undefined && message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== undefined && message.description !== "") {
      obj.description = message.description;
    }
    if (message.link !== undefined && message.link !== "") {
      obj.link = message.link;
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => Attachment.toJSON(e));
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.dueDate !== undefined) {
      obj.dueDate = message.dueDate.toISOString();
    }
    if (message.maxPoints !== undefined && message.maxPoints !== 0) {
      obj.maxPoints = message.maxPoints;
    }
    if (message.workType !== undefined && message.workType !== LmsWorkType.ASSIGNMENT) {
      obj.workType = lmsWorkTypeToJSON(message.workType);
    }
    if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
      obj.provider = lmsProviderTypeToJSON(message.provider);
    }
    if (message.rawJson !== undefined && message.rawJson !== "") {
      obj.rawJson = message.rawJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LmsCourseWork>, I>>(base?: I): LmsCourseWork {
    return LmsCourseWork.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LmsCourseWork>, I>>(object: I): LmsCourseWork {
    const message = createBaseLmsCourseWork();
    message.lmsCourseWorkId = object.lmsCourseWorkId ?? "";
    message.lmsCourseId = object.lmsCourseId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.link = object.link ?? "";
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    message.creationTime = object.creationTime ?? undefined;
    message.dueDate = object.dueDate ?? undefined;
    message.maxPoints = object.maxPoints ?? 0;
    message.workType = object.workType ?? LmsWorkType.ASSIGNMENT;
    message.provider = object.provider ?? LmsProviderType.GOOGLE_CLASSROOM;
    message.rawJson = object.rawJson ?? "";
    return message;
  },
};

function createBaseAttachment(): Attachment {
  return { url: "" };
}

export const Attachment: MessageFns<Attachment> = {
  encode(message: Attachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attachment {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: Attachment): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attachment>, I>>(base?: I): Attachment {
    return Attachment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attachment>, I>>(object: I): Attachment {
    const message = createBaseAttachment();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseLmsSubmission(): LmsSubmission {
  return {
    lmsSubmissionId: "",
    lmsCourseWorkId: "",
    lmsCourseId: "",
    studentId: undefined,
    submissionUrl: "",
    state: LmsSubmissionState.UNSUBMITTED,
    submittedAt: undefined,
    late: false,
    grade: 0,
    history: [],
    provider: LmsProviderType.GOOGLE_CLASSROOM,
    rawJson: "",
  };
}

export const LmsSubmission: MessageFns<LmsSubmission> = {
  encode(message: LmsSubmission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lmsSubmissionId !== "") {
      writer.uint32(10).string(message.lmsSubmissionId);
    }
    if (message.lmsCourseWorkId !== "") {
      writer.uint32(18).string(message.lmsCourseWorkId);
    }
    if (message.lmsCourseId !== "") {
      writer.uint32(26).string(message.lmsCourseId);
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(34).fork()).join();
    }
    if (message.submissionUrl !== "") {
      writer.uint32(42).string(message.submissionUrl);
    }
    if (message.state !== LmsSubmissionState.UNSUBMITTED) {
      writer.uint32(48).int32(lmsSubmissionStateToNumber(message.state));
    }
    if (message.submittedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.submittedAt), writer.uint32(58).fork()).join();
    }
    if (message.late !== undefined && message.late !== false) {
      writer.uint32(64).bool(message.late);
    }
    if (message.grade !== undefined && message.grade !== 0) {
      writer.uint32(73).double(message.grade);
    }
    for (const v of message.history) {
      LmsHistory.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
      writer.uint32(88).int32(lmsProviderTypeToNumber(message.provider));
    }
    if (message.rawJson !== undefined && message.rawJson !== "") {
      writer.uint32(98).string(message.rawJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LmsSubmission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLmsSubmission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lmsSubmissionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lmsCourseWorkId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lmsCourseId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.submissionUrl = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = lmsSubmissionStateFromJSON(reader.int32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.submittedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.late = reader.bool();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.grade = reader.double();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.history.push(LmsHistory.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.provider = lmsProviderTypeFromJSON(reader.int32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.rawJson = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LmsSubmission {
    return {
      lmsSubmissionId: isSet(object.lmsSubmissionId) ? globalThis.String(object.lmsSubmissionId) : "",
      lmsCourseWorkId: isSet(object.lmsCourseWorkId) ? globalThis.String(object.lmsCourseWorkId) : "",
      lmsCourseId: isSet(object.lmsCourseId) ? globalThis.String(object.lmsCourseId) : "",
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      submissionUrl: isSet(object.submissionUrl) ? globalThis.String(object.submissionUrl) : "",
      state: isSet(object.state) ? lmsSubmissionStateFromJSON(object.state) : LmsSubmissionState.UNSUBMITTED,
      submittedAt: isSet(object.submittedAt) ? fromJsonTimestamp(object.submittedAt) : undefined,
      late: isSet(object.late) ? globalThis.Boolean(object.late) : false,
      grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
      history: globalThis.Array.isArray(object?.history) ? object.history.map((e: any) => LmsHistory.fromJSON(e)) : [],
      provider: isSet(object.provider) ? lmsProviderTypeFromJSON(object.provider) : LmsProviderType.GOOGLE_CLASSROOM,
      rawJson: isSet(object.rawJson) ? globalThis.String(object.rawJson) : "",
    };
  },

  toJSON(message: LmsSubmission): unknown {
    const obj: any = {};
    if (message.lmsSubmissionId !== "") {
      obj.lmsSubmissionId = message.lmsSubmissionId;
    }
    if (message.lmsCourseWorkId !== "") {
      obj.lmsCourseWorkId = message.lmsCourseWorkId;
    }
    if (message.lmsCourseId !== "") {
      obj.lmsCourseId = message.lmsCourseId;
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.submissionUrl !== "") {
      obj.submissionUrl = message.submissionUrl;
    }
    if (message.state !== LmsSubmissionState.UNSUBMITTED) {
      obj.state = lmsSubmissionStateToJSON(message.state);
    }
    if (message.submittedAt !== undefined) {
      obj.submittedAt = message.submittedAt.toISOString();
    }
    if (message.late !== undefined && message.late !== false) {
      obj.late = message.late;
    }
    if (message.grade !== undefined && message.grade !== 0) {
      obj.grade = message.grade;
    }
    if (message.history?.length) {
      obj.history = message.history.map((e) => LmsHistory.toJSON(e));
    }
    if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
      obj.provider = lmsProviderTypeToJSON(message.provider);
    }
    if (message.rawJson !== undefined && message.rawJson !== "") {
      obj.rawJson = message.rawJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LmsSubmission>, I>>(base?: I): LmsSubmission {
    return LmsSubmission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LmsSubmission>, I>>(object: I): LmsSubmission {
    const message = createBaseLmsSubmission();
    message.lmsSubmissionId = object.lmsSubmissionId ?? "";
    message.lmsCourseWorkId = object.lmsCourseWorkId ?? "";
    message.lmsCourseId = object.lmsCourseId ?? "";
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.submissionUrl = object.submissionUrl ?? "";
    message.state = object.state ?? LmsSubmissionState.UNSUBMITTED;
    message.submittedAt = object.submittedAt ?? undefined;
    message.late = object.late ?? false;
    message.grade = object.grade ?? 0;
    message.history = object.history?.map((e) => LmsHistory.fromPartial(e)) || [];
    message.provider = object.provider ?? LmsProviderType.GOOGLE_CLASSROOM;
    message.rawJson = object.rawJson ?? "";
    return message;
  },
};

function createBaseLmsHistory(): LmsHistory {
  return { actorId: "", type: "", oldValue: "", newValue: "", timestamp: undefined, rawEntry: "" };
}

export const LmsHistory: MessageFns<LmsHistory> = {
  encode(message: LmsHistory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actorId !== "") {
      writer.uint32(10).string(message.actorId);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.oldValue !== undefined && message.oldValue !== "") {
      writer.uint32(26).string(message.oldValue);
    }
    if (message.newValue !== undefined && message.newValue !== "") {
      writer.uint32(34).string(message.newValue);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).join();
    }
    if (message.rawEntry !== undefined && message.rawEntry !== "") {
      writer.uint32(50).string(message.rawEntry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LmsHistory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLmsHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actorId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.oldValue = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.newValue = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.rawEntry = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LmsHistory {
    return {
      actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      oldValue: isSet(object.oldValue) ? globalThis.String(object.oldValue) : "",
      newValue: isSet(object.newValue) ? globalThis.String(object.newValue) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      rawEntry: isSet(object.rawEntry) ? globalThis.String(object.rawEntry) : "",
    };
  },

  toJSON(message: LmsHistory): unknown {
    const obj: any = {};
    if (message.actorId !== "") {
      obj.actorId = message.actorId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.oldValue !== undefined && message.oldValue !== "") {
      obj.oldValue = message.oldValue;
    }
    if (message.newValue !== undefined && message.newValue !== "") {
      obj.newValue = message.newValue;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.rawEntry !== undefined && message.rawEntry !== "") {
      obj.rawEntry = message.rawEntry;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LmsHistory>, I>>(base?: I): LmsHistory {
    return LmsHistory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LmsHistory>, I>>(object: I): LmsHistory {
    const message = createBaseLmsHistory();
    message.actorId = object.actorId ?? "";
    message.type = object.type ?? "";
    message.oldValue = object.oldValue ?? "";
    message.newValue = object.newValue ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.rawEntry = object.rawEntry ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
