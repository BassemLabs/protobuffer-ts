// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/course_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { Course } from "./course";
import {
  LmsCourseWork,
  LmsProviderType,
  lmsProviderTypeFromJSON,
  lmsProviderTypeToJSON,
  lmsProviderTypeToNumber,
  LmsSubmission,
} from "./lms_course";

export const protobufPackage = "class_service.course_service";

export interface GetCourseRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

export interface AggregateCourseRequest {
  context: RequestContext | undefined;
  aggregationDocument: string;
}

export interface AggregateCourseResponse {
  result: string;
}

export interface CourseResponse {
  course: Course[];
}

export interface LmsCourseWorkResponse {
  lmsCourseWork: LmsCourseWork[];
}

export interface LmsStudentSubmissionResponse {
  lmsStudentSubmission: LmsSubmission[];
}

/** Request to get student courses */
export interface GetStudentCoursesRequest {
  context: RequestContext | undefined;
  studentId: ObjectId | undefined;
  includeArchived?: boolean | undefined;
}

export interface GetStudentCoursesForSchoolYearRequest {
  context: RequestContext | undefined;
  studentId: ObjectId | undefined;
  schoolYearId: ObjectId | undefined;
}

/** Request to archive a course */
export interface ArchiveCourseRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

export interface UnarchiveCourseRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

/** Request to update a course */
export interface UpdateCourseRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  name: string;
  semesterId: ObjectId | undefined;
  courseCode?: string | undefined;
}

/** Request to add teachers to a course */
export interface AddTeachersRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  teacherIds: ObjectId[];
}

/** Request to remove teachers from a course */
export interface RemoveTeachersRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  teacherIds: ObjectId[];
}

/** Request to add students to a course */
export interface AddStudentsRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  studentIds: ObjectId[];
}

/** Request to remove students from a course */
export interface RemoveStudentsRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  studentIds: ObjectId[];
}

/** Request to add attendance teachers */
export interface AddAttendanceTeachersRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  teacherIds: ObjectId[];
}

/** Request to get attendance classes for a specific teacher */
export interface AttendanceClassesRequest {
  context: RequestContext | undefined;
  teacherId: ObjectId | undefined;
}

/** Request to get all attendance classes */
export interface AllAttendanceClassesRequest {
  context: RequestContext | undefined;
}

/** Request to get LMS course work for a course */
export interface GetLmsCourseWorkRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

/** Request to get LMS student submissions for a course and student */
export interface GetStudentLmsCourseWorkRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
  studentId: ObjectId | undefined;
}

/** Request for standalone_create */
export interface StandaloneCreateRequest {
  context: RequestContext | undefined;
  name: string;
  semesterId: ObjectId | undefined;
  teachers: ObjectId[];
  courseCode: string;
  lmsProvider?: LmsProviderType | undefined;
}

/** Request for standalone_clone */
export interface StandaloneCloneRequest {
  context: RequestContext | undefined;
  courseToClone: ObjectId | undefined;
  name: string;
  semesterId: ObjectId | undefined;
  teachers: ObjectId[];
  courseCode: string;
  gclassCreate: boolean;
}

/** Request for homeroom_create */
export interface HomeroomCreateRequest {
  context: RequestContext | undefined;
  name: string;
  courseCode: string;
  teachers: ObjectId[];
  homeroomId: ObjectId | undefined;
  lmsProvider?: LmsProviderType | undefined;
}

/** Request for homeroom_clone */
export interface HomeroomCloneRequest {
  context: RequestContext | undefined;
  courseToClone: ObjectId | undefined;
  homeroomToCloneTo: ObjectId | undefined;
  name: string;
  courseCode: string;
  teachers: ObjectId[];
  gclassCreate: boolean;
}

function createBaseGetCourseRequest(): GetCourseRequest {
  return { context: undefined, courseId: undefined };
}

export const GetCourseRequest: MessageFns<GetCourseRequest> = {
  encode(message: GetCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetCourseRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseRequest>, I>>(base?: I): GetCourseRequest {
    return GetCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseRequest>, I>>(object: I): GetCourseRequest {
    const message = createBaseGetCourseRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseAggregateCourseRequest(): AggregateCourseRequest {
  return { context: undefined, aggregationDocument: "" };
}

export const AggregateCourseRequest: MessageFns<AggregateCourseRequest> = {
  encode(message: AggregateCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.aggregationDocument !== "") {
      writer.uint32(18).string(message.aggregationDocument);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregateCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aggregationDocument = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregateCourseRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      aggregationDocument: isSet(object.aggregationDocument) ? globalThis.String(object.aggregationDocument) : "",
    };
  },

  toJSON(message: AggregateCourseRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.aggregationDocument !== "") {
      obj.aggregationDocument = message.aggregationDocument;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AggregateCourseRequest>, I>>(base?: I): AggregateCourseRequest {
    return AggregateCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AggregateCourseRequest>, I>>(object: I): AggregateCourseRequest {
    const message = createBaseAggregateCourseRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.aggregationDocument = object.aggregationDocument ?? "";
    return message;
  },
};

function createBaseAggregateCourseResponse(): AggregateCourseResponse {
  return { result: "" };
}

export const AggregateCourseResponse: MessageFns<AggregateCourseResponse> = {
  encode(message: AggregateCourseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregateCourseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateCourseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregateCourseResponse {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: AggregateCourseResponse): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AggregateCourseResponse>, I>>(base?: I): AggregateCourseResponse {
    return AggregateCourseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AggregateCourseResponse>, I>>(object: I): AggregateCourseResponse {
    const message = createBaseAggregateCourseResponse();
    message.result = object.result ?? "";
    return message;
  },
};

function createBaseCourseResponse(): CourseResponse {
  return { course: [] };
}

export const CourseResponse: MessageFns<CourseResponse> = {
  encode(message: CourseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.course) {
      Course.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.course.push(Course.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseResponse {
    return {
      course: globalThis.Array.isArray(object?.course) ? object.course.map((e: any) => Course.fromJSON(e)) : [],
    };
  },

  toJSON(message: CourseResponse): unknown {
    const obj: any = {};
    if (message.course?.length) {
      obj.course = message.course.map((e) => Course.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseResponse>, I>>(base?: I): CourseResponse {
    return CourseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseResponse>, I>>(object: I): CourseResponse {
    const message = createBaseCourseResponse();
    message.course = object.course?.map((e) => Course.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLmsCourseWorkResponse(): LmsCourseWorkResponse {
  return { lmsCourseWork: [] };
}

export const LmsCourseWorkResponse: MessageFns<LmsCourseWorkResponse> = {
  encode(message: LmsCourseWorkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.lmsCourseWork) {
      LmsCourseWork.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LmsCourseWorkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLmsCourseWorkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lmsCourseWork.push(LmsCourseWork.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LmsCourseWorkResponse {
    return {
      lmsCourseWork: globalThis.Array.isArray(object?.lmsCourseWork)
        ? object.lmsCourseWork.map((e: any) => LmsCourseWork.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LmsCourseWorkResponse): unknown {
    const obj: any = {};
    if (message.lmsCourseWork?.length) {
      obj.lmsCourseWork = message.lmsCourseWork.map((e) => LmsCourseWork.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LmsCourseWorkResponse>, I>>(base?: I): LmsCourseWorkResponse {
    return LmsCourseWorkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LmsCourseWorkResponse>, I>>(object: I): LmsCourseWorkResponse {
    const message = createBaseLmsCourseWorkResponse();
    message.lmsCourseWork = object.lmsCourseWork?.map((e) => LmsCourseWork.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLmsStudentSubmissionResponse(): LmsStudentSubmissionResponse {
  return { lmsStudentSubmission: [] };
}

export const LmsStudentSubmissionResponse: MessageFns<LmsStudentSubmissionResponse> = {
  encode(message: LmsStudentSubmissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.lmsStudentSubmission) {
      LmsSubmission.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LmsStudentSubmissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLmsStudentSubmissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lmsStudentSubmission.push(LmsSubmission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LmsStudentSubmissionResponse {
    return {
      lmsStudentSubmission: globalThis.Array.isArray(object?.lmsStudentSubmission)
        ? object.lmsStudentSubmission.map((e: any) => LmsSubmission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LmsStudentSubmissionResponse): unknown {
    const obj: any = {};
    if (message.lmsStudentSubmission?.length) {
      obj.lmsStudentSubmission = message.lmsStudentSubmission.map((e) => LmsSubmission.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LmsStudentSubmissionResponse>, I>>(base?: I): LmsStudentSubmissionResponse {
    return LmsStudentSubmissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LmsStudentSubmissionResponse>, I>>(object: I): LmsStudentSubmissionResponse {
    const message = createBaseLmsStudentSubmissionResponse();
    message.lmsStudentSubmission = object.lmsStudentSubmission?.map((e) => LmsSubmission.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStudentCoursesRequest(): GetStudentCoursesRequest {
  return { context: undefined, studentId: undefined, includeArchived: false };
}

export const GetStudentCoursesRequest: MessageFns<GetStudentCoursesRequest> = {
  encode(message: GetStudentCoursesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.includeArchived !== undefined && message.includeArchived !== false) {
      writer.uint32(24).bool(message.includeArchived);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentCoursesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentCoursesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeArchived = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentCoursesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      includeArchived: isSet(object.includeArchived) ? globalThis.Boolean(object.includeArchived) : false,
    };
  },

  toJSON(message: GetStudentCoursesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.includeArchived !== undefined && message.includeArchived !== false) {
      obj.includeArchived = message.includeArchived;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentCoursesRequest>, I>>(base?: I): GetStudentCoursesRequest {
    return GetStudentCoursesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentCoursesRequest>, I>>(object: I): GetStudentCoursesRequest {
    const message = createBaseGetStudentCoursesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.includeArchived = object.includeArchived ?? false;
    return message;
  },
};

function createBaseGetStudentCoursesForSchoolYearRequest(): GetStudentCoursesForSchoolYearRequest {
  return { context: undefined, studentId: undefined, schoolYearId: undefined };
}

export const GetStudentCoursesForSchoolYearRequest: MessageFns<GetStudentCoursesForSchoolYearRequest> = {
  encode(message: GetStudentCoursesForSchoolYearRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYearId !== undefined) {
      ObjectId.encode(message.schoolYearId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentCoursesForSchoolYearRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentCoursesForSchoolYearRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYearId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentCoursesForSchoolYearRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      schoolYearId: isSet(object.schoolYearId) ? ObjectId.fromJSON(object.schoolYearId) : undefined,
    };
  },

  toJSON(message: GetStudentCoursesForSchoolYearRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.schoolYearId !== undefined) {
      obj.schoolYearId = ObjectId.toJSON(message.schoolYearId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentCoursesForSchoolYearRequest>, I>>(
    base?: I,
  ): GetStudentCoursesForSchoolYearRequest {
    return GetStudentCoursesForSchoolYearRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentCoursesForSchoolYearRequest>, I>>(
    object: I,
  ): GetStudentCoursesForSchoolYearRequest {
    const message = createBaseGetStudentCoursesForSchoolYearRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
      ? ObjectId.fromPartial(object.schoolYearId)
      : undefined;
    return message;
  },
};

function createBaseArchiveCourseRequest(): ArchiveCourseRequest {
  return { context: undefined, courseId: undefined };
}

export const ArchiveCourseRequest: MessageFns<ArchiveCourseRequest> = {
  encode(message: ArchiveCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveCourseRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: ArchiveCourseRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArchiveCourseRequest>, I>>(base?: I): ArchiveCourseRequest {
    return ArchiveCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArchiveCourseRequest>, I>>(object: I): ArchiveCourseRequest {
    const message = createBaseArchiveCourseRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseUnarchiveCourseRequest(): UnarchiveCourseRequest {
  return { context: undefined, courseId: undefined };
}

export const UnarchiveCourseRequest: MessageFns<UnarchiveCourseRequest> = {
  encode(message: UnarchiveCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnarchiveCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnarchiveCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnarchiveCourseRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: UnarchiveCourseRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnarchiveCourseRequest>, I>>(base?: I): UnarchiveCourseRequest {
    return UnarchiveCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnarchiveCourseRequest>, I>>(object: I): UnarchiveCourseRequest {
    const message = createBaseUnarchiveCourseRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseUpdateCourseRequest(): UpdateCourseRequest {
  return { context: undefined, courseId: undefined, name: "", semesterId: undefined, courseCode: "" };
}

export const UpdateCourseRequest: MessageFns<UpdateCourseRequest> = {
  encode(message: UpdateCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
    }
    if (message.courseCode !== undefined && message.courseCode !== "") {
      writer.uint32(42).string(message.courseCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.courseCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCourseRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
    };
  },

  toJSON(message: UpdateCourseRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.courseCode !== undefined && message.courseCode !== "") {
      obj.courseCode = message.courseCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCourseRequest>, I>>(base?: I): UpdateCourseRequest {
    return UpdateCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCourseRequest>, I>>(object: I): UpdateCourseRequest {
    const message = createBaseUpdateCourseRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.name = object.name ?? "";
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.courseCode = object.courseCode ?? "";
    return message;
  },
};

function createBaseAddTeachersRequest(): AddTeachersRequest {
  return { context: undefined, courseId: undefined, teacherIds: [] };
}

export const AddTeachersRequest: MessageFns<AddTeachersRequest> = {
  encode(message: AddTeachersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTeachersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTeachersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTeachersRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddTeachersRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddTeachersRequest>, I>>(base?: I): AddTeachersRequest {
    return AddTeachersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddTeachersRequest>, I>>(object: I): AddTeachersRequest {
    const message = createBaseAddTeachersRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveTeachersRequest(): RemoveTeachersRequest {
  return { context: undefined, courseId: undefined, teacherIds: [] };
}

export const RemoveTeachersRequest: MessageFns<RemoveTeachersRequest> = {
  encode(message: RemoveTeachersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTeachersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTeachersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTeachersRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RemoveTeachersRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTeachersRequest>, I>>(base?: I): RemoveTeachersRequest {
    return RemoveTeachersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTeachersRequest>, I>>(object: I): RemoveTeachersRequest {
    const message = createBaseRemoveTeachersRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddStudentsRequest(): AddStudentsRequest {
  return { context: undefined, courseId: undefined, studentIds: [] };
}

export const AddStudentsRequest: MessageFns<AddStudentsRequest> = {
  encode(message: AddStudentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    for (const v of message.studentIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddStudentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddStudentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddStudentsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      studentIds: globalThis.Array.isArray(object?.studentIds)
        ? object.studentIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddStudentsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.studentIds?.length) {
      obj.studentIds = message.studentIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddStudentsRequest>, I>>(base?: I): AddStudentsRequest {
    return AddStudentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddStudentsRequest>, I>>(object: I): AddStudentsRequest {
    const message = createBaseAddStudentsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.studentIds = object.studentIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveStudentsRequest(): RemoveStudentsRequest {
  return { context: undefined, courseId: undefined, studentIds: [] };
}

export const RemoveStudentsRequest: MessageFns<RemoveStudentsRequest> = {
  encode(message: RemoveStudentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    for (const v of message.studentIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveStudentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveStudentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveStudentsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      studentIds: globalThis.Array.isArray(object?.studentIds)
        ? object.studentIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RemoveStudentsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.studentIds?.length) {
      obj.studentIds = message.studentIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveStudentsRequest>, I>>(base?: I): RemoveStudentsRequest {
    return RemoveStudentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveStudentsRequest>, I>>(object: I): RemoveStudentsRequest {
    const message = createBaseRemoveStudentsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.studentIds = object.studentIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddAttendanceTeachersRequest(): AddAttendanceTeachersRequest {
  return { context: undefined, courseId: undefined, teacherIds: [] };
}

export const AddAttendanceTeachersRequest: MessageFns<AddAttendanceTeachersRequest> = {
  encode(message: AddAttendanceTeachersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAttendanceTeachersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAttendanceTeachersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAttendanceTeachersRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddAttendanceTeachersRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAttendanceTeachersRequest>, I>>(base?: I): AddAttendanceTeachersRequest {
    return AddAttendanceTeachersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAttendanceTeachersRequest>, I>>(object: I): AddAttendanceTeachersRequest {
    const message = createBaseAddAttendanceTeachersRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttendanceClassesRequest(): AttendanceClassesRequest {
  return { context: undefined, teacherId: undefined };
}

export const AttendanceClassesRequest: MessageFns<AttendanceClassesRequest> = {
  encode(message: AttendanceClassesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.teacherId !== undefined) {
      ObjectId.encode(message.teacherId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttendanceClassesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttendanceClassesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.teacherId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttendanceClassesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      teacherId: isSet(object.teacherId) ? ObjectId.fromJSON(object.teacherId) : undefined,
    };
  },

  toJSON(message: AttendanceClassesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.teacherId !== undefined) {
      obj.teacherId = ObjectId.toJSON(message.teacherId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttendanceClassesRequest>, I>>(base?: I): AttendanceClassesRequest {
    return AttendanceClassesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttendanceClassesRequest>, I>>(object: I): AttendanceClassesRequest {
    const message = createBaseAttendanceClassesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.teacherId = (object.teacherId !== undefined && object.teacherId !== null)
      ? ObjectId.fromPartial(object.teacherId)
      : undefined;
    return message;
  },
};

function createBaseAllAttendanceClassesRequest(): AllAttendanceClassesRequest {
  return { context: undefined };
}

export const AllAttendanceClassesRequest: MessageFns<AllAttendanceClassesRequest> = {
  encode(message: AllAttendanceClassesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllAttendanceClassesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllAttendanceClassesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllAttendanceClassesRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: AllAttendanceClassesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllAttendanceClassesRequest>, I>>(base?: I): AllAttendanceClassesRequest {
    return AllAttendanceClassesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllAttendanceClassesRequest>, I>>(object: I): AllAttendanceClassesRequest {
    const message = createBaseAllAttendanceClassesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetLmsCourseWorkRequest(): GetLmsCourseWorkRequest {
  return { context: undefined, courseId: undefined };
}

export const GetLmsCourseWorkRequest: MessageFns<GetLmsCourseWorkRequest> = {
  encode(message: GetLmsCourseWorkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLmsCourseWorkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLmsCourseWorkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLmsCourseWorkRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetLmsCourseWorkRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLmsCourseWorkRequest>, I>>(base?: I): GetLmsCourseWorkRequest {
    return GetLmsCourseWorkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLmsCourseWorkRequest>, I>>(object: I): GetLmsCourseWorkRequest {
    const message = createBaseGetLmsCourseWorkRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseGetStudentLmsCourseWorkRequest(): GetStudentLmsCourseWorkRequest {
  return { context: undefined, courseId: undefined, studentId: undefined };
}

export const GetStudentLmsCourseWorkRequest: MessageFns<GetStudentLmsCourseWorkRequest> = {
  encode(message: GetStudentLmsCourseWorkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentLmsCourseWorkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentLmsCourseWorkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentLmsCourseWorkRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
    };
  },

  toJSON(message: GetStudentLmsCourseWorkRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentLmsCourseWorkRequest>, I>>(base?: I): GetStudentLmsCourseWorkRequest {
    return GetStudentLmsCourseWorkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentLmsCourseWorkRequest>, I>>(
    object: I,
  ): GetStudentLmsCourseWorkRequest {
    const message = createBaseGetStudentLmsCourseWorkRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    return message;
  },
};

function createBaseStandaloneCreateRequest(): StandaloneCreateRequest {
  return {
    context: undefined,
    name: "",
    semesterId: undefined,
    teachers: [],
    courseCode: "",
    lmsProvider: LmsProviderType.GOOGLE_CLASSROOM,
  };
}

export const StandaloneCreateRequest: MessageFns<StandaloneCreateRequest> = {
  encode(message: StandaloneCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(26).fork()).join();
    }
    for (const v of message.teachers) {
      ObjectId.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.courseCode !== "") {
      writer.uint32(42).string(message.courseCode);
    }
    if (message.lmsProvider !== undefined && message.lmsProvider !== LmsProviderType.GOOGLE_CLASSROOM) {
      writer.uint32(48).int32(lmsProviderTypeToNumber(message.lmsProvider));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StandaloneCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStandaloneCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teachers.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.courseCode = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.lmsProvider = lmsProviderTypeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StandaloneCreateRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e: any) => ObjectId.fromJSON(e)) : [],
      courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
      lmsProvider: isSet(object.lmsProvider)
        ? lmsProviderTypeFromJSON(object.lmsProvider)
        : LmsProviderType.GOOGLE_CLASSROOM,
    };
  },

  toJSON(message: StandaloneCreateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.teachers?.length) {
      obj.teachers = message.teachers.map((e) => ObjectId.toJSON(e));
    }
    if (message.courseCode !== "") {
      obj.courseCode = message.courseCode;
    }
    if (message.lmsProvider !== undefined && message.lmsProvider !== LmsProviderType.GOOGLE_CLASSROOM) {
      obj.lmsProvider = lmsProviderTypeToJSON(message.lmsProvider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StandaloneCreateRequest>, I>>(base?: I): StandaloneCreateRequest {
    return StandaloneCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StandaloneCreateRequest>, I>>(object: I): StandaloneCreateRequest {
    const message = createBaseStandaloneCreateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.name = object.name ?? "";
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.teachers = object.teachers?.map((e) => ObjectId.fromPartial(e)) || [];
    message.courseCode = object.courseCode ?? "";
    message.lmsProvider = object.lmsProvider ?? LmsProviderType.GOOGLE_CLASSROOM;
    return message;
  },
};

function createBaseStandaloneCloneRequest(): StandaloneCloneRequest {
  return {
    context: undefined,
    courseToClone: undefined,
    name: "",
    semesterId: undefined,
    teachers: [],
    courseCode: "",
    gclassCreate: false,
  };
}

export const StandaloneCloneRequest: MessageFns<StandaloneCloneRequest> = {
  encode(message: StandaloneCloneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseToClone !== undefined) {
      ObjectId.encode(message.courseToClone, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
    }
    for (const v of message.teachers) {
      ObjectId.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.courseCode !== "") {
      writer.uint32(50).string(message.courseCode);
    }
    if (message.gclassCreate !== false) {
      writer.uint32(56).bool(message.gclassCreate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StandaloneCloneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStandaloneCloneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseToClone = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.teachers.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.courseCode = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.gclassCreate = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StandaloneCloneRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseToClone: isSet(object.courseToClone) ? ObjectId.fromJSON(object.courseToClone) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e: any) => ObjectId.fromJSON(e)) : [],
      courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
      gclassCreate: isSet(object.gclassCreate) ? globalThis.Boolean(object.gclassCreate) : false,
    };
  },

  toJSON(message: StandaloneCloneRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseToClone !== undefined) {
      obj.courseToClone = ObjectId.toJSON(message.courseToClone);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.teachers?.length) {
      obj.teachers = message.teachers.map((e) => ObjectId.toJSON(e));
    }
    if (message.courseCode !== "") {
      obj.courseCode = message.courseCode;
    }
    if (message.gclassCreate !== false) {
      obj.gclassCreate = message.gclassCreate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StandaloneCloneRequest>, I>>(base?: I): StandaloneCloneRequest {
    return StandaloneCloneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StandaloneCloneRequest>, I>>(object: I): StandaloneCloneRequest {
    const message = createBaseStandaloneCloneRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseToClone = (object.courseToClone !== undefined && object.courseToClone !== null)
      ? ObjectId.fromPartial(object.courseToClone)
      : undefined;
    message.name = object.name ?? "";
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.teachers = object.teachers?.map((e) => ObjectId.fromPartial(e)) || [];
    message.courseCode = object.courseCode ?? "";
    message.gclassCreate = object.gclassCreate ?? false;
    return message;
  },
};

function createBaseHomeroomCreateRequest(): HomeroomCreateRequest {
  return {
    context: undefined,
    name: "",
    courseCode: "",
    teachers: [],
    homeroomId: undefined,
    lmsProvider: LmsProviderType.GOOGLE_CLASSROOM,
  };
}

export const HomeroomCreateRequest: MessageFns<HomeroomCreateRequest> = {
  encode(message: HomeroomCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.courseCode !== "") {
      writer.uint32(26).string(message.courseCode);
    }
    for (const v of message.teachers) {
      ObjectId.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(42).fork()).join();
    }
    if (message.lmsProvider !== undefined && message.lmsProvider !== LmsProviderType.GOOGLE_CLASSROOM) {
      writer.uint32(48).int32(lmsProviderTypeToNumber(message.lmsProvider));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HomeroomCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHomeroomCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.courseCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teachers.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.lmsProvider = lmsProviderTypeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HomeroomCreateRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
      teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e: any) => ObjectId.fromJSON(e)) : [],
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      lmsProvider: isSet(object.lmsProvider)
        ? lmsProviderTypeFromJSON(object.lmsProvider)
        : LmsProviderType.GOOGLE_CLASSROOM,
    };
  },

  toJSON(message: HomeroomCreateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.courseCode !== "") {
      obj.courseCode = message.courseCode;
    }
    if (message.teachers?.length) {
      obj.teachers = message.teachers.map((e) => ObjectId.toJSON(e));
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.lmsProvider !== undefined && message.lmsProvider !== LmsProviderType.GOOGLE_CLASSROOM) {
      obj.lmsProvider = lmsProviderTypeToJSON(message.lmsProvider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HomeroomCreateRequest>, I>>(base?: I): HomeroomCreateRequest {
    return HomeroomCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HomeroomCreateRequest>, I>>(object: I): HomeroomCreateRequest {
    const message = createBaseHomeroomCreateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.name = object.name ?? "";
    message.courseCode = object.courseCode ?? "";
    message.teachers = object.teachers?.map((e) => ObjectId.fromPartial(e)) || [];
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.lmsProvider = object.lmsProvider ?? LmsProviderType.GOOGLE_CLASSROOM;
    return message;
  },
};

function createBaseHomeroomCloneRequest(): HomeroomCloneRequest {
  return {
    context: undefined,
    courseToClone: undefined,
    homeroomToCloneTo: undefined,
    name: "",
    courseCode: "",
    teachers: [],
    gclassCreate: false,
  };
}

export const HomeroomCloneRequest: MessageFns<HomeroomCloneRequest> = {
  encode(message: HomeroomCloneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseToClone !== undefined) {
      ObjectId.encode(message.courseToClone, writer.uint32(18).fork()).join();
    }
    if (message.homeroomToCloneTo !== undefined) {
      ObjectId.encode(message.homeroomToCloneTo, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.courseCode !== "") {
      writer.uint32(42).string(message.courseCode);
    }
    for (const v of message.teachers) {
      ObjectId.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.gclassCreate !== false) {
      writer.uint32(56).bool(message.gclassCreate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HomeroomCloneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHomeroomCloneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseToClone = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.homeroomToCloneTo = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.courseCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.teachers.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.gclassCreate = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HomeroomCloneRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseToClone: isSet(object.courseToClone) ? ObjectId.fromJSON(object.courseToClone) : undefined,
      homeroomToCloneTo: isSet(object.homeroomToCloneTo) ? ObjectId.fromJSON(object.homeroomToCloneTo) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
      teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e: any) => ObjectId.fromJSON(e)) : [],
      gclassCreate: isSet(object.gclassCreate) ? globalThis.Boolean(object.gclassCreate) : false,
    };
  },

  toJSON(message: HomeroomCloneRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseToClone !== undefined) {
      obj.courseToClone = ObjectId.toJSON(message.courseToClone);
    }
    if (message.homeroomToCloneTo !== undefined) {
      obj.homeroomToCloneTo = ObjectId.toJSON(message.homeroomToCloneTo);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.courseCode !== "") {
      obj.courseCode = message.courseCode;
    }
    if (message.teachers?.length) {
      obj.teachers = message.teachers.map((e) => ObjectId.toJSON(e));
    }
    if (message.gclassCreate !== false) {
      obj.gclassCreate = message.gclassCreate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HomeroomCloneRequest>, I>>(base?: I): HomeroomCloneRequest {
    return HomeroomCloneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HomeroomCloneRequest>, I>>(object: I): HomeroomCloneRequest {
    const message = createBaseHomeroomCloneRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseToClone = (object.courseToClone !== undefined && object.courseToClone !== null)
      ? ObjectId.fromPartial(object.courseToClone)
      : undefined;
    message.homeroomToCloneTo = (object.homeroomToCloneTo !== undefined && object.homeroomToCloneTo !== null)
      ? ObjectId.fromPartial(object.homeroomToCloneTo)
      : undefined;
    message.name = object.name ?? "";
    message.courseCode = object.courseCode ?? "";
    message.teachers = object.teachers?.map((e) => ObjectId.fromPartial(e)) || [];
    message.gclassCreate = object.gclassCreate ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
