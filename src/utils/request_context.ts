// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: utils/request_context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "./object_id";
import { UserType, userTypeFromJSON, userTypeToJSON, userTypeToNumber } from "./user_type";

export const protobufPackage = "utils";

export enum ServiceContext {
  AutoPaymentScheduling = "AutoPaymentScheduling",
  AutoPaymentConsumer = "AutoPaymentConsumer",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function serviceContextFromJSON(object: any): ServiceContext {
  switch (object) {
    case 1:
    case "AutoPaymentScheduling":
      return ServiceContext.AutoPaymentScheduling;
    case 2:
    case "AutoPaymentConsumer":
      return ServiceContext.AutoPaymentConsumer;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServiceContext.UNRECOGNIZED;
  }
}

export function serviceContextToJSON(object: ServiceContext): string {
  switch (object) {
    case ServiceContext.AutoPaymentScheduling:
      return "AutoPaymentScheduling";
    case ServiceContext.AutoPaymentConsumer:
      return "AutoPaymentConsumer";
    case ServiceContext.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function serviceContextToNumber(object: ServiceContext): number {
  switch (object) {
    case ServiceContext.AutoPaymentScheduling:
      return 1;
    case ServiceContext.AutoPaymentConsumer:
      return 2;
    case ServiceContext.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface RequestContext {
  userContext: UserContext | undefined;
  isTesting: boolean;
  serviceBasedContextName?: ServiceContext | undefined;
}

export interface UserContext {
  userId: ObjectId | undefined;
  userType: UserType;
  userAuthToken: string;
  organizationId?: ObjectId | undefined;
  roles: string[];
  parentFamilyIds: ObjectId[];
  fullName: string;
  firebaseToken: string;
  exp: number;
  traceId: string;
}

function createBaseRequestContext(): RequestContext {
  return { userContext: undefined, isTesting: false, serviceBasedContextName: ServiceContext.AutoPaymentScheduling };
}

export const RequestContext: MessageFns<RequestContext> = {
  encode(message: RequestContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userContext !== undefined) {
      UserContext.encode(message.userContext, writer.uint32(10).fork()).join();
    }
    if (message.isTesting !== false) {
      writer.uint32(16).bool(message.isTesting);
    }
    if (
      message.serviceBasedContextName !== undefined &&
      message.serviceBasedContextName !== ServiceContext.AutoPaymentScheduling
    ) {
      writer.uint32(24).int32(serviceContextToNumber(message.serviceBasedContextName));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userContext = UserContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isTesting = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.serviceBasedContextName = serviceContextFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestContext {
    return {
      userContext: isSet(object.userContext) ? UserContext.fromJSON(object.userContext) : undefined,
      isTesting: isSet(object.isTesting) ? globalThis.Boolean(object.isTesting) : false,
      serviceBasedContextName: isSet(object.serviceBasedContextName)
        ? serviceContextFromJSON(object.serviceBasedContextName)
        : ServiceContext.AutoPaymentScheduling,
    };
  },

  toJSON(message: RequestContext): unknown {
    const obj: any = {};
    if (message.userContext !== undefined) {
      obj.userContext = UserContext.toJSON(message.userContext);
    }
    if (message.isTesting !== false) {
      obj.isTesting = message.isTesting;
    }
    if (
      message.serviceBasedContextName !== undefined &&
      message.serviceBasedContextName !== ServiceContext.AutoPaymentScheduling
    ) {
      obj.serviceBasedContextName = serviceContextToJSON(message.serviceBasedContextName);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestContext>, I>>(base?: I): RequestContext {
    return RequestContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestContext>, I>>(object: I): RequestContext {
    const message = createBaseRequestContext();
    message.userContext = (object.userContext !== undefined && object.userContext !== null)
      ? UserContext.fromPartial(object.userContext)
      : undefined;
    message.isTesting = object.isTesting ?? false;
    message.serviceBasedContextName = object.serviceBasedContextName ?? ServiceContext.AutoPaymentScheduling;
    return message;
  },
};

function createBaseUserContext(): UserContext {
  return {
    userId: undefined,
    userType: UserType.None,
    userAuthToken: "",
    organizationId: undefined,
    roles: [],
    parentFamilyIds: [],
    fullName: "",
    firebaseToken: "",
    exp: 0,
    traceId: "",
  };
}

export const UserContext: MessageFns<UserContext> = {
  encode(message: UserContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      ObjectId.encode(message.userId, writer.uint32(10).fork()).join();
    }
    if (message.userType !== UserType.None) {
      writer.uint32(16).int32(userTypeToNumber(message.userType));
    }
    if (message.userAuthToken !== "") {
      writer.uint32(26).string(message.userAuthToken);
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(34).fork()).join();
    }
    for (const v of message.roles) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.parentFamilyIds) {
      ObjectId.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.fullName !== "") {
      writer.uint32(58).string(message.fullName);
    }
    if (message.firebaseToken !== "") {
      writer.uint32(66).string(message.firebaseToken);
    }
    if (message.exp !== 0) {
      writer.uint32(72).uint64(message.exp);
    }
    if (message.traceId !== "") {
      writer.uint32(82).string(message.traceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userType = userTypeFromJSON(reader.int32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userAuthToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.roles.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.parentFamilyIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.fullName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.firebaseToken = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.exp = longToNumber(reader.uint64());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.traceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserContext {
    return {
      userId: isSet(object.userId) ? ObjectId.fromJSON(object.userId) : undefined,
      userType: isSet(object.userType) ? userTypeFromJSON(object.userType) : UserType.None,
      userAuthToken: isSet(object.userAuthToken) ? globalThis.String(object.userAuthToken) : "",
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
      parentFamilyIds: globalThis.Array.isArray(object?.parentFamilyIds)
        ? object.parentFamilyIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
      fullName: isSet(object.fullName) ? globalThis.String(object.fullName) : "",
      firebaseToken: isSet(object.firebaseToken) ? globalThis.String(object.firebaseToken) : "",
      exp: isSet(object.exp) ? globalThis.Number(object.exp) : 0,
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : "",
    };
  },

  toJSON(message: UserContext): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = ObjectId.toJSON(message.userId);
    }
    if (message.userType !== UserType.None) {
      obj.userType = userTypeToJSON(message.userType);
    }
    if (message.userAuthToken !== "") {
      obj.userAuthToken = message.userAuthToken;
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.parentFamilyIds?.length) {
      obj.parentFamilyIds = message.parentFamilyIds.map((e) => ObjectId.toJSON(e));
    }
    if (message.fullName !== "") {
      obj.fullName = message.fullName;
    }
    if (message.firebaseToken !== "") {
      obj.firebaseToken = message.firebaseToken;
    }
    if (message.exp !== 0) {
      obj.exp = Math.round(message.exp);
    }
    if (message.traceId !== "") {
      obj.traceId = message.traceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserContext>, I>>(base?: I): UserContext {
    return UserContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserContext>, I>>(object: I): UserContext {
    const message = createBaseUserContext();
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? ObjectId.fromPartial(object.userId)
      : undefined;
    message.userType = object.userType ?? UserType.None;
    message.userAuthToken = object.userAuthToken ?? "";
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.roles = object.roles?.map((e) => e) || [];
    message.parentFamilyIds = object.parentFamilyIds?.map((e) => ObjectId.fromPartial(e)) || [];
    message.fullName = object.fullName ?? "";
    message.firebaseToken = object.firebaseToken ?? "";
    message.exp = object.exp ?? 0;
    message.traceId = object.traceId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
