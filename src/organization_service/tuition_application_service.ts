// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/tuition_application_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { AdditionalFeeApplication, DiscountApplication } from "./tuition_application";

export const protobufPackage = "organization_service";

/** Discount Application messages */
export interface ApplyDiscountRequest {
  context: RequestContext | undefined;
  discount: ObjectId | undefined;
  student?: ObjectId | undefined;
  family?: ObjectId | undefined;
}

export interface RemoveDiscountRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface RemoveDiscountResponse {
  success: boolean;
}

export interface ListStudentDiscountsRequest {
  context: RequestContext | undefined;
  student: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListStudentDiscountsResponse {
  applications: DiscountApplication[];
}

export interface ListFamilyDiscountsRequest {
  context: RequestContext | undefined;
  family: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListFamilyDiscountsResponse {
  applications: DiscountApplication[];
}

/** Additional Fee Application messages */
export interface ApplyAdditionalFeeRequest {
  context: RequestContext | undefined;
  additionalFee: ObjectId | undefined;
  student?: ObjectId | undefined;
  family?: ObjectId | undefined;
}

export interface RemoveAdditionalFeeRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface RemoveAdditionalFeeResponse {
  success: boolean;
}

export interface ListStudentAdditionalFeesRequest {
  context: RequestContext | undefined;
  student: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListStudentAdditionalFeesResponse {
  applications: AdditionalFeeApplication[];
}

export interface ListFamilyAdditionalFeesRequest {
  context: RequestContext | undefined;
  family: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListFamilyAdditionalFeesResponse {
  applications: AdditionalFeeApplication[];
}

function createBaseApplyDiscountRequest(): ApplyDiscountRequest {
  return { context: undefined, discount: undefined, student: undefined, family: undefined };
}

export const ApplyDiscountRequest: MessageFns<ApplyDiscountRequest> = {
  encode(message: ApplyDiscountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.discount !== undefined) {
      ObjectId.encode(message.discount, writer.uint32(18).fork()).join();
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(26).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyDiscountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyDiscountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.discount = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyDiscountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      discount: isSet(object.discount) ? ObjectId.fromJSON(object.discount) : undefined,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
    };
  },

  toJSON(message: ApplyDiscountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.discount !== undefined) {
      obj.discount = ObjectId.toJSON(message.discount);
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplyDiscountRequest>, I>>(base?: I): ApplyDiscountRequest {
    return ApplyDiscountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplyDiscountRequest>, I>>(object: I): ApplyDiscountRequest {
    const message = createBaseApplyDiscountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.discount = (object.discount !== undefined && object.discount !== null)
      ? ObjectId.fromPartial(object.discount)
      : undefined;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    return message;
  },
};

function createBaseRemoveDiscountRequest(): RemoveDiscountRequest {
  return { context: undefined, id: undefined };
}

export const RemoveDiscountRequest: MessageFns<RemoveDiscountRequest> = {
  encode(message: RemoveDiscountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveDiscountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveDiscountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveDiscountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: RemoveDiscountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveDiscountRequest>, I>>(base?: I): RemoveDiscountRequest {
    return RemoveDiscountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveDiscountRequest>, I>>(object: I): RemoveDiscountRequest {
    const message = createBaseRemoveDiscountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseRemoveDiscountResponse(): RemoveDiscountResponse {
  return { success: false };
}

export const RemoveDiscountResponse: MessageFns<RemoveDiscountResponse> = {
  encode(message: RemoveDiscountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveDiscountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveDiscountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveDiscountResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RemoveDiscountResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveDiscountResponse>, I>>(base?: I): RemoveDiscountResponse {
    return RemoveDiscountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveDiscountResponse>, I>>(object: I): RemoveDiscountResponse {
    const message = createBaseRemoveDiscountResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListStudentDiscountsRequest(): ListStudentDiscountsRequest {
  return { context: undefined, student: undefined, schoolYear: undefined };
}

export const ListStudentDiscountsRequest: MessageFns<ListStudentDiscountsRequest> = {
  encode(message: ListStudentDiscountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStudentDiscountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudentDiscountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudentDiscountsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListStudentDiscountsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStudentDiscountsRequest>, I>>(base?: I): ListStudentDiscountsRequest {
    return ListStudentDiscountsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStudentDiscountsRequest>, I>>(object: I): ListStudentDiscountsRequest {
    const message = createBaseListStudentDiscountsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListStudentDiscountsResponse(): ListStudentDiscountsResponse {
  return { applications: [] };
}

export const ListStudentDiscountsResponse: MessageFns<ListStudentDiscountsResponse> = {
  encode(message: ListStudentDiscountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.applications) {
      DiscountApplication.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStudentDiscountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudentDiscountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.applications.push(DiscountApplication.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudentDiscountsResponse {
    return {
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => DiscountApplication.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListStudentDiscountsResponse): unknown {
    const obj: any = {};
    if (message.applications?.length) {
      obj.applications = message.applications.map((e) => DiscountApplication.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStudentDiscountsResponse>, I>>(base?: I): ListStudentDiscountsResponse {
    return ListStudentDiscountsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStudentDiscountsResponse>, I>>(object: I): ListStudentDiscountsResponse {
    const message = createBaseListStudentDiscountsResponse();
    message.applications = object.applications?.map((e) => DiscountApplication.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFamilyDiscountsRequest(): ListFamilyDiscountsRequest {
  return { context: undefined, family: undefined, schoolYear: undefined };
}

export const ListFamilyDiscountsRequest: MessageFns<ListFamilyDiscountsRequest> = {
  encode(message: ListFamilyDiscountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFamilyDiscountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFamilyDiscountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFamilyDiscountsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListFamilyDiscountsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFamilyDiscountsRequest>, I>>(base?: I): ListFamilyDiscountsRequest {
    return ListFamilyDiscountsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFamilyDiscountsRequest>, I>>(object: I): ListFamilyDiscountsRequest {
    const message = createBaseListFamilyDiscountsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListFamilyDiscountsResponse(): ListFamilyDiscountsResponse {
  return { applications: [] };
}

export const ListFamilyDiscountsResponse: MessageFns<ListFamilyDiscountsResponse> = {
  encode(message: ListFamilyDiscountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.applications) {
      DiscountApplication.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFamilyDiscountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFamilyDiscountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.applications.push(DiscountApplication.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFamilyDiscountsResponse {
    return {
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => DiscountApplication.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListFamilyDiscountsResponse): unknown {
    const obj: any = {};
    if (message.applications?.length) {
      obj.applications = message.applications.map((e) => DiscountApplication.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFamilyDiscountsResponse>, I>>(base?: I): ListFamilyDiscountsResponse {
    return ListFamilyDiscountsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFamilyDiscountsResponse>, I>>(object: I): ListFamilyDiscountsResponse {
    const message = createBaseListFamilyDiscountsResponse();
    message.applications = object.applications?.map((e) => DiscountApplication.fromPartial(e)) || [];
    return message;
  },
};

function createBaseApplyAdditionalFeeRequest(): ApplyAdditionalFeeRequest {
  return { context: undefined, additionalFee: undefined, student: undefined, family: undefined };
}

export const ApplyAdditionalFeeRequest: MessageFns<ApplyAdditionalFeeRequest> = {
  encode(message: ApplyAdditionalFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.additionalFee !== undefined) {
      ObjectId.encode(message.additionalFee, writer.uint32(18).fork()).join();
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(26).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyAdditionalFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyAdditionalFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.additionalFee = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyAdditionalFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      additionalFee: isSet(object.additionalFee) ? ObjectId.fromJSON(object.additionalFee) : undefined,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
    };
  },

  toJSON(message: ApplyAdditionalFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.additionalFee !== undefined) {
      obj.additionalFee = ObjectId.toJSON(message.additionalFee);
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplyAdditionalFeeRequest>, I>>(base?: I): ApplyAdditionalFeeRequest {
    return ApplyAdditionalFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplyAdditionalFeeRequest>, I>>(object: I): ApplyAdditionalFeeRequest {
    const message = createBaseApplyAdditionalFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.additionalFee = (object.additionalFee !== undefined && object.additionalFee !== null)
      ? ObjectId.fromPartial(object.additionalFee)
      : undefined;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    return message;
  },
};

function createBaseRemoveAdditionalFeeRequest(): RemoveAdditionalFeeRequest {
  return { context: undefined, id: undefined };
}

export const RemoveAdditionalFeeRequest: MessageFns<RemoveAdditionalFeeRequest> = {
  encode(message: RemoveAdditionalFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAdditionalFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAdditionalFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAdditionalFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: RemoveAdditionalFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAdditionalFeeRequest>, I>>(base?: I): RemoveAdditionalFeeRequest {
    return RemoveAdditionalFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAdditionalFeeRequest>, I>>(object: I): RemoveAdditionalFeeRequest {
    const message = createBaseRemoveAdditionalFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseRemoveAdditionalFeeResponse(): RemoveAdditionalFeeResponse {
  return { success: false };
}

export const RemoveAdditionalFeeResponse: MessageFns<RemoveAdditionalFeeResponse> = {
  encode(message: RemoveAdditionalFeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAdditionalFeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAdditionalFeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAdditionalFeeResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RemoveAdditionalFeeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAdditionalFeeResponse>, I>>(base?: I): RemoveAdditionalFeeResponse {
    return RemoveAdditionalFeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAdditionalFeeResponse>, I>>(object: I): RemoveAdditionalFeeResponse {
    const message = createBaseRemoveAdditionalFeeResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListStudentAdditionalFeesRequest(): ListStudentAdditionalFeesRequest {
  return { context: undefined, student: undefined, schoolYear: undefined };
}

export const ListStudentAdditionalFeesRequest: MessageFns<ListStudentAdditionalFeesRequest> = {
  encode(message: ListStudentAdditionalFeesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStudentAdditionalFeesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudentAdditionalFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudentAdditionalFeesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListStudentAdditionalFeesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStudentAdditionalFeesRequest>, I>>(
    base?: I,
  ): ListStudentAdditionalFeesRequest {
    return ListStudentAdditionalFeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStudentAdditionalFeesRequest>, I>>(
    object: I,
  ): ListStudentAdditionalFeesRequest {
    const message = createBaseListStudentAdditionalFeesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListStudentAdditionalFeesResponse(): ListStudentAdditionalFeesResponse {
  return { applications: [] };
}

export const ListStudentAdditionalFeesResponse: MessageFns<ListStudentAdditionalFeesResponse> = {
  encode(message: ListStudentAdditionalFeesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.applications) {
      AdditionalFeeApplication.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStudentAdditionalFeesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudentAdditionalFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.applications.push(AdditionalFeeApplication.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudentAdditionalFeesResponse {
    return {
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => AdditionalFeeApplication.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListStudentAdditionalFeesResponse): unknown {
    const obj: any = {};
    if (message.applications?.length) {
      obj.applications = message.applications.map((e) => AdditionalFeeApplication.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStudentAdditionalFeesResponse>, I>>(
    base?: I,
  ): ListStudentAdditionalFeesResponse {
    return ListStudentAdditionalFeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStudentAdditionalFeesResponse>, I>>(
    object: I,
  ): ListStudentAdditionalFeesResponse {
    const message = createBaseListStudentAdditionalFeesResponse();
    message.applications = object.applications?.map((e) => AdditionalFeeApplication.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFamilyAdditionalFeesRequest(): ListFamilyAdditionalFeesRequest {
  return { context: undefined, family: undefined, schoolYear: undefined };
}

export const ListFamilyAdditionalFeesRequest: MessageFns<ListFamilyAdditionalFeesRequest> = {
  encode(message: ListFamilyAdditionalFeesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFamilyAdditionalFeesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFamilyAdditionalFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFamilyAdditionalFeesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListFamilyAdditionalFeesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFamilyAdditionalFeesRequest>, I>>(base?: I): ListFamilyAdditionalFeesRequest {
    return ListFamilyAdditionalFeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFamilyAdditionalFeesRequest>, I>>(
    object: I,
  ): ListFamilyAdditionalFeesRequest {
    const message = createBaseListFamilyAdditionalFeesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListFamilyAdditionalFeesResponse(): ListFamilyAdditionalFeesResponse {
  return { applications: [] };
}

export const ListFamilyAdditionalFeesResponse: MessageFns<ListFamilyAdditionalFeesResponse> = {
  encode(message: ListFamilyAdditionalFeesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.applications) {
      AdditionalFeeApplication.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFamilyAdditionalFeesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFamilyAdditionalFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.applications.push(AdditionalFeeApplication.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFamilyAdditionalFeesResponse {
    return {
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => AdditionalFeeApplication.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListFamilyAdditionalFeesResponse): unknown {
    const obj: any = {};
    if (message.applications?.length) {
      obj.applications = message.applications.map((e) => AdditionalFeeApplication.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFamilyAdditionalFeesResponse>, I>>(
    base?: I,
  ): ListFamilyAdditionalFeesResponse {
    return ListFamilyAdditionalFeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFamilyAdditionalFeesResponse>, I>>(
    object: I,
  ): ListFamilyAdditionalFeesResponse {
    const message = createBaseListFamilyAdditionalFeesResponse();
    message.applications = object.applications?.map((e) => AdditionalFeeApplication.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
