// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/organization_profile_settings_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { ProfileSection, profileSectionFromJSON, profileSectionToJSON } from "./organization_profile_settings";

export const protobufPackage = "organization_service";

/** Request to fetch profile settings of an organization by ID */
export interface GetOrganizationProfileSettingsRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

/** Request to add a "parent" profile section */
export interface AddParentProfileSectionRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  newProfileSection: ProfileSection;
}

/** Request to remove a "parent" profile section */
export interface RemoveParentProfileSectionRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  removeProfileSection: ProfileSection;
}

/** Request to add a "teacher" profile section */
export interface AddTeacherProfileSectionRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  newProfileSection: ProfileSection;
}

/** Request to remove a "teacher" profile section */
export interface RemoveTeacherProfileSectionRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  removeProfileSection: ProfileSection;
}

/** Request to add a "student" profile section */
export interface AddStudentProfileSectionRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  newProfileSection: ProfileSection;
}

/** Request to remove a "student" profile section */
export interface RemoveStudentProfileSectionRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  removeProfileSection: ProfileSection;
}

function createBaseGetOrganizationProfileSettingsRequest(): GetOrganizationProfileSettingsRequest {
  return { context: undefined, organizationId: undefined };
}

export const GetOrganizationProfileSettingsRequest: MessageFns<GetOrganizationProfileSettingsRequest> = {
  encode(message: GetOrganizationProfileSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationProfileSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationProfileSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationProfileSettingsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: GetOrganizationProfileSettingsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationProfileSettingsRequest>, I>>(
    base?: I,
  ): GetOrganizationProfileSettingsRequest {
    return GetOrganizationProfileSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationProfileSettingsRequest>, I>>(
    object: I,
  ): GetOrganizationProfileSettingsRequest {
    const message = createBaseGetOrganizationProfileSettingsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseAddParentProfileSectionRequest(): AddParentProfileSectionRequest {
  return { context: undefined, organizationId: undefined, newProfileSection: 0 };
}

export const AddParentProfileSectionRequest: MessageFns<AddParentProfileSectionRequest> = {
  encode(message: AddParentProfileSectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.newProfileSection !== 0) {
      writer.uint32(24).int32(message.newProfileSection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddParentProfileSectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddParentProfileSectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.newProfileSection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddParentProfileSectionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      newProfileSection: isSet(object.newProfileSection) ? profileSectionFromJSON(object.newProfileSection) : 0,
    };
  },

  toJSON(message: AddParentProfileSectionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.newProfileSection !== 0) {
      obj.newProfileSection = profileSectionToJSON(message.newProfileSection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddParentProfileSectionRequest>, I>>(base?: I): AddParentProfileSectionRequest {
    return AddParentProfileSectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddParentProfileSectionRequest>, I>>(
    object: I,
  ): AddParentProfileSectionRequest {
    const message = createBaseAddParentProfileSectionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.newProfileSection = object.newProfileSection ?? 0;
    return message;
  },
};

function createBaseRemoveParentProfileSectionRequest(): RemoveParentProfileSectionRequest {
  return { context: undefined, organizationId: undefined, removeProfileSection: 0 };
}

export const RemoveParentProfileSectionRequest: MessageFns<RemoveParentProfileSectionRequest> = {
  encode(message: RemoveParentProfileSectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.removeProfileSection !== 0) {
      writer.uint32(24).int32(message.removeProfileSection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveParentProfileSectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveParentProfileSectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.removeProfileSection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveParentProfileSectionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      removeProfileSection: isSet(object.removeProfileSection)
        ? profileSectionFromJSON(object.removeProfileSection)
        : 0,
    };
  },

  toJSON(message: RemoveParentProfileSectionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.removeProfileSection !== 0) {
      obj.removeProfileSection = profileSectionToJSON(message.removeProfileSection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveParentProfileSectionRequest>, I>>(
    base?: I,
  ): RemoveParentProfileSectionRequest {
    return RemoveParentProfileSectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveParentProfileSectionRequest>, I>>(
    object: I,
  ): RemoveParentProfileSectionRequest {
    const message = createBaseRemoveParentProfileSectionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.removeProfileSection = object.removeProfileSection ?? 0;
    return message;
  },
};

function createBaseAddTeacherProfileSectionRequest(): AddTeacherProfileSectionRequest {
  return { context: undefined, organizationId: undefined, newProfileSection: 0 };
}

export const AddTeacherProfileSectionRequest: MessageFns<AddTeacherProfileSectionRequest> = {
  encode(message: AddTeacherProfileSectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.newProfileSection !== 0) {
      writer.uint32(24).int32(message.newProfileSection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTeacherProfileSectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTeacherProfileSectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.newProfileSection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTeacherProfileSectionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      newProfileSection: isSet(object.newProfileSection) ? profileSectionFromJSON(object.newProfileSection) : 0,
    };
  },

  toJSON(message: AddTeacherProfileSectionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.newProfileSection !== 0) {
      obj.newProfileSection = profileSectionToJSON(message.newProfileSection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddTeacherProfileSectionRequest>, I>>(base?: I): AddTeacherProfileSectionRequest {
    return AddTeacherProfileSectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddTeacherProfileSectionRequest>, I>>(
    object: I,
  ): AddTeacherProfileSectionRequest {
    const message = createBaseAddTeacherProfileSectionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.newProfileSection = object.newProfileSection ?? 0;
    return message;
  },
};

function createBaseRemoveTeacherProfileSectionRequest(): RemoveTeacherProfileSectionRequest {
  return { context: undefined, organizationId: undefined, removeProfileSection: 0 };
}

export const RemoveTeacherProfileSectionRequest: MessageFns<RemoveTeacherProfileSectionRequest> = {
  encode(message: RemoveTeacherProfileSectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.removeProfileSection !== 0) {
      writer.uint32(24).int32(message.removeProfileSection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTeacherProfileSectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTeacherProfileSectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.removeProfileSection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTeacherProfileSectionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      removeProfileSection: isSet(object.removeProfileSection)
        ? profileSectionFromJSON(object.removeProfileSection)
        : 0,
    };
  },

  toJSON(message: RemoveTeacherProfileSectionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.removeProfileSection !== 0) {
      obj.removeProfileSection = profileSectionToJSON(message.removeProfileSection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTeacherProfileSectionRequest>, I>>(
    base?: I,
  ): RemoveTeacherProfileSectionRequest {
    return RemoveTeacherProfileSectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTeacherProfileSectionRequest>, I>>(
    object: I,
  ): RemoveTeacherProfileSectionRequest {
    const message = createBaseRemoveTeacherProfileSectionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.removeProfileSection = object.removeProfileSection ?? 0;
    return message;
  },
};

function createBaseAddStudentProfileSectionRequest(): AddStudentProfileSectionRequest {
  return { context: undefined, organizationId: undefined, newProfileSection: 0 };
}

export const AddStudentProfileSectionRequest: MessageFns<AddStudentProfileSectionRequest> = {
  encode(message: AddStudentProfileSectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.newProfileSection !== 0) {
      writer.uint32(24).int32(message.newProfileSection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddStudentProfileSectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddStudentProfileSectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.newProfileSection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddStudentProfileSectionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      newProfileSection: isSet(object.newProfileSection) ? profileSectionFromJSON(object.newProfileSection) : 0,
    };
  },

  toJSON(message: AddStudentProfileSectionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.newProfileSection !== 0) {
      obj.newProfileSection = profileSectionToJSON(message.newProfileSection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddStudentProfileSectionRequest>, I>>(base?: I): AddStudentProfileSectionRequest {
    return AddStudentProfileSectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddStudentProfileSectionRequest>, I>>(
    object: I,
  ): AddStudentProfileSectionRequest {
    const message = createBaseAddStudentProfileSectionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.newProfileSection = object.newProfileSection ?? 0;
    return message;
  },
};

function createBaseRemoveStudentProfileSectionRequest(): RemoveStudentProfileSectionRequest {
  return { context: undefined, organizationId: undefined, removeProfileSection: 0 };
}

export const RemoveStudentProfileSectionRequest: MessageFns<RemoveStudentProfileSectionRequest> = {
  encode(message: RemoveStudentProfileSectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.removeProfileSection !== 0) {
      writer.uint32(24).int32(message.removeProfileSection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveStudentProfileSectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveStudentProfileSectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.removeProfileSection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveStudentProfileSectionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      removeProfileSection: isSet(object.removeProfileSection)
        ? profileSectionFromJSON(object.removeProfileSection)
        : 0,
    };
  },

  toJSON(message: RemoveStudentProfileSectionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.removeProfileSection !== 0) {
      obj.removeProfileSection = profileSectionToJSON(message.removeProfileSection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveStudentProfileSectionRequest>, I>>(
    base?: I,
  ): RemoveStudentProfileSectionRequest {
    return RemoveStudentProfileSectionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveStudentProfileSectionRequest>, I>>(
    object: I,
  ): RemoveStudentProfileSectionRequest {
    const message = createBaseRemoveStudentProfileSectionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.removeProfileSection = object.removeProfileSection ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
