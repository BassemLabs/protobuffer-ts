// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/tuition_invoice_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";

export const protobufPackage = "organization_service";

/** TODO: Remove this once we move into payment service and call user service */
export interface StudentObj {
  id: ObjectId | undefined;
  name: string;
  grade: string;
}

export interface GenerateTuitionInvoiceRequest {
  context: RequestContext | undefined;
  family: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  tuitionPlan: ObjectId | undefined;
  students: StudentObj[];
}

function createBaseStudentObj(): StudentObj {
  return { id: undefined, name: "", grade: "" };
}

export const StudentObj: MessageFns<StudentObj> = {
  encode(message: StudentObj, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.grade !== "") {
      writer.uint32(26).string(message.grade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StudentObj {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudentObj();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.grade = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudentObj {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
    };
  },

  toJSON(message: StudentObj): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudentObj>, I>>(base?: I): StudentObj {
    return StudentObj.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudentObj>, I>>(object: I): StudentObj {
    const message = createBaseStudentObj();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    message.grade = object.grade ?? "";
    return message;
  },
};

function createBaseGenerateTuitionInvoiceRequest(): GenerateTuitionInvoiceRequest {
  return { context: undefined, family: undefined, schoolYear: undefined, tuitionPlan: undefined, students: [] };
}

export const GenerateTuitionInvoiceRequest: MessageFns<GenerateTuitionInvoiceRequest> = {
  encode(message: GenerateTuitionInvoiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.tuitionPlan !== undefined) {
      ObjectId.encode(message.tuitionPlan, writer.uint32(34).fork()).join();
    }
    for (const v of message.students) {
      StudentObj.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTuitionInvoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTuitionInvoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tuitionPlan = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.students.push(StudentObj.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTuitionInvoiceRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      tuitionPlan: isSet(object.tuitionPlan) ? ObjectId.fromJSON(object.tuitionPlan) : undefined,
      students: globalThis.Array.isArray(object?.students)
        ? object.students.map((e: any) => StudentObj.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenerateTuitionInvoiceRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.tuitionPlan !== undefined) {
      obj.tuitionPlan = ObjectId.toJSON(message.tuitionPlan);
    }
    if (message.students?.length) {
      obj.students = message.students.map((e) => StudentObj.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateTuitionInvoiceRequest>, I>>(base?: I): GenerateTuitionInvoiceRequest {
    return GenerateTuitionInvoiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateTuitionInvoiceRequest>, I>>(
    object: I,
  ): GenerateTuitionInvoiceRequest {
    const message = createBaseGenerateTuitionInvoiceRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.tuitionPlan = (object.tuitionPlan !== undefined && object.tuitionPlan !== null)
      ? ObjectId.fromPartial(object.tuitionPlan)
      : undefined;
    message.students = object.students?.map((e) => StudentObj.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
