// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/campus_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { Address, Campus } from "./campus";

export const protobufPackage = "organization_service";

export interface CreateCampusRequest {
  context: RequestContext | undefined;
  name: string;
  address: Address | undefined;
  email: string;
  phone: string;
  principalId: ObjectId | undefined;
  supervisorId: ObjectId | undefined;
}

export interface UpdateCampusRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
  name: string;
  address: Address | undefined;
  email: string;
  phone: string;
  principalId: ObjectId | undefined;
  supervisorId: ObjectId | undefined;
}

export interface UpdateLogoRequest {
  context: RequestContext | undefined;
  campusId: ObjectId | undefined;
  fileName: string;
  awsS3FileLocation: string;
}

export interface GetCampusRequest {
  context: RequestContext | undefined;
  campusId: ObjectId | undefined;
}

export interface GetOrganizationCampusesRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

export interface GetOrganizationCampusesResponse {
  campuses: Campus[];
}

function createBaseCreateCampusRequest(): CreateCampusRequest {
  return {
    context: undefined,
    name: "",
    address: undefined,
    email: "",
    phone: "",
    principalId: undefined,
    supervisorId: undefined,
  };
}

export const CreateCampusRequest: MessageFns<CreateCampusRequest> = {
  encode(message: CreateCampusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(26).fork()).join();
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.phone !== "") {
      writer.uint32(42).string(message.phone);
    }
    if (message.principalId !== undefined) {
      ObjectId.encode(message.principalId, writer.uint32(50).fork()).join();
    }
    if (message.supervisorId !== undefined) {
      ObjectId.encode(message.supervisorId, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCampusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCampusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.principalId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.supervisorId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCampusRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      principalId: isSet(object.principalId) ? ObjectId.fromJSON(object.principalId) : undefined,
      supervisorId: isSet(object.supervisorId) ? ObjectId.fromJSON(object.supervisorId) : undefined,
    };
  },

  toJSON(message: CreateCampusRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.principalId !== undefined) {
      obj.principalId = ObjectId.toJSON(message.principalId);
    }
    if (message.supervisorId !== undefined) {
      obj.supervisorId = ObjectId.toJSON(message.supervisorId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCampusRequest>, I>>(base?: I): CreateCampusRequest {
    return CreateCampusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCampusRequest>, I>>(object: I): CreateCampusRequest {
    const message = createBaseCreateCampusRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.name = object.name ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.email = object.email ?? "";
    message.phone = object.phone ?? "";
    message.principalId = (object.principalId !== undefined && object.principalId !== null)
      ? ObjectId.fromPartial(object.principalId)
      : undefined;
    message.supervisorId = (object.supervisorId !== undefined && object.supervisorId !== null)
      ? ObjectId.fromPartial(object.supervisorId)
      : undefined;
    return message;
  },
};

function createBaseUpdateCampusRequest(): UpdateCampusRequest {
  return {
    context: undefined,
    id: undefined,
    name: "",
    address: undefined,
    email: "",
    phone: "",
    principalId: undefined,
    supervisorId: undefined,
  };
}

export const UpdateCampusRequest: MessageFns<UpdateCampusRequest> = {
  encode(message: UpdateCampusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(34).fork()).join();
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.phone !== "") {
      writer.uint32(50).string(message.phone);
    }
    if (message.principalId !== undefined) {
      ObjectId.encode(message.principalId, writer.uint32(58).fork()).join();
    }
    if (message.supervisorId !== undefined) {
      ObjectId.encode(message.supervisorId, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCampusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCampusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.principalId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.supervisorId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCampusRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      principalId: isSet(object.principalId) ? ObjectId.fromJSON(object.principalId) : undefined,
      supervisorId: isSet(object.supervisorId) ? ObjectId.fromJSON(object.supervisorId) : undefined,
    };
  },

  toJSON(message: UpdateCampusRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.principalId !== undefined) {
      obj.principalId = ObjectId.toJSON(message.principalId);
    }
    if (message.supervisorId !== undefined) {
      obj.supervisorId = ObjectId.toJSON(message.supervisorId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCampusRequest>, I>>(base?: I): UpdateCampusRequest {
    return UpdateCampusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCampusRequest>, I>>(object: I): UpdateCampusRequest {
    const message = createBaseUpdateCampusRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.email = object.email ?? "";
    message.phone = object.phone ?? "";
    message.principalId = (object.principalId !== undefined && object.principalId !== null)
      ? ObjectId.fromPartial(object.principalId)
      : undefined;
    message.supervisorId = (object.supervisorId !== undefined && object.supervisorId !== null)
      ? ObjectId.fromPartial(object.supervisorId)
      : undefined;
    return message;
  },
};

function createBaseUpdateLogoRequest(): UpdateLogoRequest {
  return { context: undefined, campusId: undefined, fileName: "", awsS3FileLocation: "" };
}

export const UpdateLogoRequest: MessageFns<UpdateLogoRequest> = {
  encode(message: UpdateLogoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.campusId !== undefined) {
      ObjectId.encode(message.campusId, writer.uint32(18).fork()).join();
    }
    if (message.fileName !== "") {
      writer.uint32(26).string(message.fileName);
    }
    if (message.awsS3FileLocation !== "") {
      writer.uint32(34).string(message.awsS3FileLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLogoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLogoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campusId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fileName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.awsS3FileLocation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLogoRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      campusId: isSet(object.campusId) ? ObjectId.fromJSON(object.campusId) : undefined,
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      awsS3FileLocation: isSet(object.awsS3FileLocation) ? globalThis.String(object.awsS3FileLocation) : "",
    };
  },

  toJSON(message: UpdateLogoRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.campusId !== undefined) {
      obj.campusId = ObjectId.toJSON(message.campusId);
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.awsS3FileLocation !== "") {
      obj.awsS3FileLocation = message.awsS3FileLocation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLogoRequest>, I>>(base?: I): UpdateLogoRequest {
    return UpdateLogoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLogoRequest>, I>>(object: I): UpdateLogoRequest {
    const message = createBaseUpdateLogoRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.campusId = (object.campusId !== undefined && object.campusId !== null)
      ? ObjectId.fromPartial(object.campusId)
      : undefined;
    message.fileName = object.fileName ?? "";
    message.awsS3FileLocation = object.awsS3FileLocation ?? "";
    return message;
  },
};

function createBaseGetCampusRequest(): GetCampusRequest {
  return { context: undefined, campusId: undefined };
}

export const GetCampusRequest: MessageFns<GetCampusRequest> = {
  encode(message: GetCampusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.campusId !== undefined) {
      ObjectId.encode(message.campusId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCampusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campusId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCampusRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      campusId: isSet(object.campusId) ? ObjectId.fromJSON(object.campusId) : undefined,
    };
  },

  toJSON(message: GetCampusRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.campusId !== undefined) {
      obj.campusId = ObjectId.toJSON(message.campusId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCampusRequest>, I>>(base?: I): GetCampusRequest {
    return GetCampusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCampusRequest>, I>>(object: I): GetCampusRequest {
    const message = createBaseGetCampusRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.campusId = (object.campusId !== undefined && object.campusId !== null)
      ? ObjectId.fromPartial(object.campusId)
      : undefined;
    return message;
  },
};

function createBaseGetOrganizationCampusesRequest(): GetOrganizationCampusesRequest {
  return { context: undefined, organizationId: undefined };
}

export const GetOrganizationCampusesRequest: MessageFns<GetOrganizationCampusesRequest> = {
  encode(message: GetOrganizationCampusesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationCampusesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationCampusesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationCampusesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: GetOrganizationCampusesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationCampusesRequest>, I>>(base?: I): GetOrganizationCampusesRequest {
    return GetOrganizationCampusesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationCampusesRequest>, I>>(
    object: I,
  ): GetOrganizationCampusesRequest {
    const message = createBaseGetOrganizationCampusesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseGetOrganizationCampusesResponse(): GetOrganizationCampusesResponse {
  return { campuses: [] };
}

export const GetOrganizationCampusesResponse: MessageFns<GetOrganizationCampusesResponse> = {
  encode(message: GetOrganizationCampusesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.campuses) {
      Campus.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationCampusesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationCampusesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.campuses.push(Campus.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationCampusesResponse {
    return {
      campuses: globalThis.Array.isArray(object?.campuses) ? object.campuses.map((e: any) => Campus.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetOrganizationCampusesResponse): unknown {
    const obj: any = {};
    if (message.campuses?.length) {
      obj.campuses = message.campuses.map((e) => Campus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationCampusesResponse>, I>>(base?: I): GetOrganizationCampusesResponse {
    return GetOrganizationCampusesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationCampusesResponse>, I>>(
    object: I,
  ): GetOrganizationCampusesResponse {
    const message = createBaseGetOrganizationCampusesResponse();
    message.campuses = object.campuses?.map((e) => Campus.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
