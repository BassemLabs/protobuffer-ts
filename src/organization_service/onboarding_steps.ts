// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/onboarding_steps.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "organization_service";

export enum OnboardingStepStatus {
  ONGOING = "ONGOING",
  COMPLETED = "COMPLETED",
  LOCKED = "LOCKED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function onboardingStepStatusFromJSON(object: any): OnboardingStepStatus {
  switch (object) {
    case 0:
    case "ONGOING":
      return OnboardingStepStatus.ONGOING;
    case 1:
    case "COMPLETED":
      return OnboardingStepStatus.COMPLETED;
    case 2:
    case "LOCKED":
      return OnboardingStepStatus.LOCKED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnboardingStepStatus.UNRECOGNIZED;
  }
}

export function onboardingStepStatusToJSON(object: OnboardingStepStatus): string {
  switch (object) {
    case OnboardingStepStatus.ONGOING:
      return "ONGOING";
    case OnboardingStepStatus.COMPLETED:
      return "COMPLETED";
    case OnboardingStepStatus.LOCKED:
      return "LOCKED";
    case OnboardingStepStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function onboardingStepStatusToNumber(object: OnboardingStepStatus): number {
  switch (object) {
    case OnboardingStepStatus.ONGOING:
      return 0;
    case OnboardingStepStatus.COMPLETED:
      return 1;
    case OnboardingStepStatus.LOCKED:
      return 2;
    case OnboardingStepStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum OnboardingStepName {
  ORG_OWNER_PROFILE = "ORG_OWNER_PROFILE",
  ORGANIZATION_SETTINGS = "ORGANIZATION_SETTINGS",
  ORGANIZATION_KEYS = "ORGANIZATION_KEYS",
  PAYMENTS = "PAYMENTS",
  STAFF_MANAGEMENT = "STAFF_MANAGEMENT",
  CAMPUS_MANAGEMENT = "CAMPUS_MANAGEMENT",
  RESOURCE_ACCESS_SETTINGS = "RESOURCE_ACCESS_SETTINGS",
  STUDENT_FIELDS = "STUDENT_FIELDS",
  PARENT_FIELDS = "PARENT_FIELDS",
  TEACHER_FIELDS = "TEACHER_FIELDS",
  STUDENT_UPLOAD = "STUDENT_UPLOAD",
  ONBOARDING_SETTINGS = "ONBOARDING_SETTINGS",
  EMAIL_TEMPLATES = "EMAIL_TEMPLATES",
  PROCESSING_FEES = "PROCESSING_FEES",
  CALENDAR = "CALENDAR",
  SEMESTERS = "SEMESTERS",
  PAYMENT_PLAN = "PAYMENT_PLAN",
  CUSTOM_FIELDS_TEMPLATES = "CUSTOM_FIELDS_TEMPLATES",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function onboardingStepNameFromJSON(object: any): OnboardingStepName {
  switch (object) {
    case 0:
    case "ORG_OWNER_PROFILE":
      return OnboardingStepName.ORG_OWNER_PROFILE;
    case 1:
    case "ORGANIZATION_SETTINGS":
      return OnboardingStepName.ORGANIZATION_SETTINGS;
    case 2:
    case "ORGANIZATION_KEYS":
      return OnboardingStepName.ORGANIZATION_KEYS;
    case 3:
    case "PAYMENTS":
      return OnboardingStepName.PAYMENTS;
    case 4:
    case "STAFF_MANAGEMENT":
      return OnboardingStepName.STAFF_MANAGEMENT;
    case 5:
    case "CAMPUS_MANAGEMENT":
      return OnboardingStepName.CAMPUS_MANAGEMENT;
    case 6:
    case "RESOURCE_ACCESS_SETTINGS":
      return OnboardingStepName.RESOURCE_ACCESS_SETTINGS;
    case 7:
    case "STUDENT_FIELDS":
      return OnboardingStepName.STUDENT_FIELDS;
    case 8:
    case "PARENT_FIELDS":
      return OnboardingStepName.PARENT_FIELDS;
    case 9:
    case "TEACHER_FIELDS":
      return OnboardingStepName.TEACHER_FIELDS;
    case 10:
    case "STUDENT_UPLOAD":
      return OnboardingStepName.STUDENT_UPLOAD;
    case 11:
    case "ONBOARDING_SETTINGS":
      return OnboardingStepName.ONBOARDING_SETTINGS;
    case 12:
    case "EMAIL_TEMPLATES":
      return OnboardingStepName.EMAIL_TEMPLATES;
    case 13:
    case "PROCESSING_FEES":
      return OnboardingStepName.PROCESSING_FEES;
    case 14:
    case "CALENDAR":
      return OnboardingStepName.CALENDAR;
    case 15:
    case "SEMESTERS":
      return OnboardingStepName.SEMESTERS;
    case 16:
    case "PAYMENT_PLAN":
      return OnboardingStepName.PAYMENT_PLAN;
    case 17:
    case "CUSTOM_FIELDS_TEMPLATES":
      return OnboardingStepName.CUSTOM_FIELDS_TEMPLATES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnboardingStepName.UNRECOGNIZED;
  }
}

export function onboardingStepNameToJSON(object: OnboardingStepName): string {
  switch (object) {
    case OnboardingStepName.ORG_OWNER_PROFILE:
      return "ORG_OWNER_PROFILE";
    case OnboardingStepName.ORGANIZATION_SETTINGS:
      return "ORGANIZATION_SETTINGS";
    case OnboardingStepName.ORGANIZATION_KEYS:
      return "ORGANIZATION_KEYS";
    case OnboardingStepName.PAYMENTS:
      return "PAYMENTS";
    case OnboardingStepName.STAFF_MANAGEMENT:
      return "STAFF_MANAGEMENT";
    case OnboardingStepName.CAMPUS_MANAGEMENT:
      return "CAMPUS_MANAGEMENT";
    case OnboardingStepName.RESOURCE_ACCESS_SETTINGS:
      return "RESOURCE_ACCESS_SETTINGS";
    case OnboardingStepName.STUDENT_FIELDS:
      return "STUDENT_FIELDS";
    case OnboardingStepName.PARENT_FIELDS:
      return "PARENT_FIELDS";
    case OnboardingStepName.TEACHER_FIELDS:
      return "TEACHER_FIELDS";
    case OnboardingStepName.STUDENT_UPLOAD:
      return "STUDENT_UPLOAD";
    case OnboardingStepName.ONBOARDING_SETTINGS:
      return "ONBOARDING_SETTINGS";
    case OnboardingStepName.EMAIL_TEMPLATES:
      return "EMAIL_TEMPLATES";
    case OnboardingStepName.PROCESSING_FEES:
      return "PROCESSING_FEES";
    case OnboardingStepName.CALENDAR:
      return "CALENDAR";
    case OnboardingStepName.SEMESTERS:
      return "SEMESTERS";
    case OnboardingStepName.PAYMENT_PLAN:
      return "PAYMENT_PLAN";
    case OnboardingStepName.CUSTOM_FIELDS_TEMPLATES:
      return "CUSTOM_FIELDS_TEMPLATES";
    case OnboardingStepName.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function onboardingStepNameToNumber(object: OnboardingStepName): number {
  switch (object) {
    case OnboardingStepName.ORG_OWNER_PROFILE:
      return 0;
    case OnboardingStepName.ORGANIZATION_SETTINGS:
      return 1;
    case OnboardingStepName.ORGANIZATION_KEYS:
      return 2;
    case OnboardingStepName.PAYMENTS:
      return 3;
    case OnboardingStepName.STAFF_MANAGEMENT:
      return 4;
    case OnboardingStepName.CAMPUS_MANAGEMENT:
      return 5;
    case OnboardingStepName.RESOURCE_ACCESS_SETTINGS:
      return 6;
    case OnboardingStepName.STUDENT_FIELDS:
      return 7;
    case OnboardingStepName.PARENT_FIELDS:
      return 8;
    case OnboardingStepName.TEACHER_FIELDS:
      return 9;
    case OnboardingStepName.STUDENT_UPLOAD:
      return 10;
    case OnboardingStepName.ONBOARDING_SETTINGS:
      return 11;
    case OnboardingStepName.EMAIL_TEMPLATES:
      return 12;
    case OnboardingStepName.PROCESSING_FEES:
      return 13;
    case OnboardingStepName.CALENDAR:
      return 14;
    case OnboardingStepName.SEMESTERS:
      return 15;
    case OnboardingStepName.PAYMENT_PLAN:
      return 16;
    case OnboardingStepName.CUSTOM_FIELDS_TEMPLATES:
      return 17;
    case OnboardingStepName.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface OnboardingStepData {
  stepName: OnboardingStepName;
  status: OnboardingStepStatus;
}

export interface OnboardingStepsStatus {
  id: ObjectId | undefined;
  organizationId: ObjectId | undefined;
  steps: OnboardingStepData[];
  allStepsDone: boolean;
}

function createBaseOnboardingStepData(): OnboardingStepData {
  return { stepName: OnboardingStepName.ORG_OWNER_PROFILE, status: OnboardingStepStatus.ONGOING };
}

export const OnboardingStepData: MessageFns<OnboardingStepData> = {
  encode(message: OnboardingStepData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stepName !== OnboardingStepName.ORG_OWNER_PROFILE) {
      writer.uint32(8).int32(onboardingStepNameToNumber(message.stepName));
    }
    if (message.status !== OnboardingStepStatus.ONGOING) {
      writer.uint32(16).int32(onboardingStepStatusToNumber(message.status));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnboardingStepData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnboardingStepData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.stepName = onboardingStepNameFromJSON(reader.int32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = onboardingStepStatusFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnboardingStepData {
    return {
      stepName: isSet(object.stepName)
        ? onboardingStepNameFromJSON(object.stepName)
        : OnboardingStepName.ORG_OWNER_PROFILE,
      status: isSet(object.status) ? onboardingStepStatusFromJSON(object.status) : OnboardingStepStatus.ONGOING,
    };
  },

  toJSON(message: OnboardingStepData): unknown {
    const obj: any = {};
    if (message.stepName !== OnboardingStepName.ORG_OWNER_PROFILE) {
      obj.stepName = onboardingStepNameToJSON(message.stepName);
    }
    if (message.status !== OnboardingStepStatus.ONGOING) {
      obj.status = onboardingStepStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnboardingStepData>, I>>(base?: I): OnboardingStepData {
    return OnboardingStepData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnboardingStepData>, I>>(object: I): OnboardingStepData {
    const message = createBaseOnboardingStepData();
    message.stepName = object.stepName ?? OnboardingStepName.ORG_OWNER_PROFILE;
    message.status = object.status ?? OnboardingStepStatus.ONGOING;
    return message;
  },
};

function createBaseOnboardingStepsStatus(): OnboardingStepsStatus {
  return { id: undefined, organizationId: undefined, steps: [], allStepsDone: false };
}

export const OnboardingStepsStatus: MessageFns<OnboardingStepsStatus> = {
  encode(message: OnboardingStepsStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    for (const v of message.steps) {
      OnboardingStepData.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.allStepsDone !== false) {
      writer.uint32(32).bool(message.allStepsDone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnboardingStepsStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnboardingStepsStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.steps.push(OnboardingStepData.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allStepsDone = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnboardingStepsStatus {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      steps: globalThis.Array.isArray(object?.steps)
        ? object.steps.map((e: any) => OnboardingStepData.fromJSON(e))
        : [],
      allStepsDone: isSet(object.allStepsDone) ? globalThis.Boolean(object.allStepsDone) : false,
    };
  },

  toJSON(message: OnboardingStepsStatus): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => OnboardingStepData.toJSON(e));
    }
    if (message.allStepsDone !== false) {
      obj.allStepsDone = message.allStepsDone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnboardingStepsStatus>, I>>(base?: I): OnboardingStepsStatus {
    return OnboardingStepsStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnboardingStepsStatus>, I>>(object: I): OnboardingStepsStatus {
    const message = createBaseOnboardingStepsStatus();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.steps = object.steps?.map((e) => OnboardingStepData.fromPartial(e)) || [];
    message.allStepsDone = object.allStepsDone ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
