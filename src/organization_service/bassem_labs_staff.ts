// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/bassem_labs_staff.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "organization_service";

export enum StaffStatus {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function staffStatusFromJSON(object: any): StaffStatus {
  switch (object) {
    case 0:
    case "ACTIVE":
      return StaffStatus.ACTIVE;
    case 1:
    case "INACTIVE":
      return StaffStatus.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StaffStatus.UNRECOGNIZED;
  }
}

export function staffStatusToJSON(object: StaffStatus): string {
  switch (object) {
    case StaffStatus.ACTIVE:
      return "ACTIVE";
    case StaffStatus.INACTIVE:
      return "INACTIVE";
    case StaffStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function staffStatusToNumber(object: StaffStatus): number {
  switch (object) {
    case StaffStatus.ACTIVE:
      return 0;
    case StaffStatus.INACTIVE:
      return 1;
    case StaffStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface BassemLabsStaff {
  id: ObjectId | undefined;
  status: StaffStatus;
  username: string;
  firstName: string;
  lastName: string;
  gender: string;
  email: string;
  personalEmail: string;
  dateOfBirth: Date | undefined;
  phoneNumber: string;
}

function createBaseBassemLabsStaff(): BassemLabsStaff {
  return {
    id: undefined,
    status: StaffStatus.ACTIVE,
    username: "",
    firstName: "",
    lastName: "",
    gender: "",
    email: "",
    personalEmail: "",
    dateOfBirth: undefined,
    phoneNumber: "",
  };
}

export const BassemLabsStaff: MessageFns<BassemLabsStaff> = {
  encode(message: BassemLabsStaff, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.status !== StaffStatus.ACTIVE) {
      writer.uint32(16).int32(staffStatusToNumber(message.status));
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.firstName !== "") {
      writer.uint32(34).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(42).string(message.lastName);
    }
    if (message.gender !== "") {
      writer.uint32(50).string(message.gender);
    }
    if (message.email !== "") {
      writer.uint32(58).string(message.email);
    }
    if (message.personalEmail !== "") {
      writer.uint32(66).string(message.personalEmail);
    }
    if (message.dateOfBirth !== undefined) {
      Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(74).fork()).join();
    }
    if (message.phoneNumber !== "") {
      writer.uint32(82).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BassemLabsStaff {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBassemLabsStaff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = staffStatusFromJSON(reader.int32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.gender = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.email = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.personalEmail = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.dateOfBirth = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BassemLabsStaff {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      status: isSet(object.status) ? staffStatusFromJSON(object.status) : StaffStatus.ACTIVE,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      personalEmail: isSet(object.personalEmail) ? globalThis.String(object.personalEmail) : "",
      dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
    };
  },

  toJSON(message: BassemLabsStaff): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.status !== StaffStatus.ACTIVE) {
      obj.status = staffStatusToJSON(message.status);
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.gender !== "") {
      obj.gender = message.gender;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.personalEmail !== "") {
      obj.personalEmail = message.personalEmail;
    }
    if (message.dateOfBirth !== undefined) {
      obj.dateOfBirth = message.dateOfBirth.toISOString();
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BassemLabsStaff>, I>>(base?: I): BassemLabsStaff {
    return BassemLabsStaff.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BassemLabsStaff>, I>>(object: I): BassemLabsStaff {
    const message = createBaseBassemLabsStaff();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.status = object.status ?? StaffStatus.ACTIVE;
    message.username = object.username ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.gender = object.gender ?? "";
    message.email = object.email ?? "";
    message.personalEmail = object.personalEmail ?? "";
    message.dateOfBirth = object.dateOfBirth ?? undefined;
    message.phoneNumber = object.phoneNumber ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
