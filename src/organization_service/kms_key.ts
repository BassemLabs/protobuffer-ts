// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/kms_key.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "organization_service";

export enum KMSKeyStatus {
  Active = "Active",
  Deactivated = "Deactivated",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function kMSKeyStatusFromJSON(object: any): KMSKeyStatus {
  switch (object) {
    case 1:
    case "Active":
      return KMSKeyStatus.Active;
    case 2:
    case "Deactivated":
      return KMSKeyStatus.Deactivated;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KMSKeyStatus.UNRECOGNIZED;
  }
}

export function kMSKeyStatusToJSON(object: KMSKeyStatus): string {
  switch (object) {
    case KMSKeyStatus.Active:
      return "Active";
    case KMSKeyStatus.Deactivated:
      return "Deactivated";
    case KMSKeyStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function kMSKeyStatusToNumber(object: KMSKeyStatus): number {
  switch (object) {
    case KMSKeyStatus.Active:
      return 1;
    case KMSKeyStatus.Deactivated:
      return 2;
    case KMSKeyStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum KMSKeyType {
  GoogelAdminEmail = "GoogelAdminEmail",
  GoogleAdminServiceAccountKey = "GoogleAdminServiceAccountKey",
  GoogleAdminServiceAccountId = "GoogleAdminServiceAccountId",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function kMSKeyTypeFromJSON(object: any): KMSKeyType {
  switch (object) {
    case 1:
    case "GoogelAdminEmail":
      return KMSKeyType.GoogelAdminEmail;
    case 2:
    case "GoogleAdminServiceAccountKey":
      return KMSKeyType.GoogleAdminServiceAccountKey;
    case 3:
    case "GoogleAdminServiceAccountId":
      return KMSKeyType.GoogleAdminServiceAccountId;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KMSKeyType.UNRECOGNIZED;
  }
}

export function kMSKeyTypeToJSON(object: KMSKeyType): string {
  switch (object) {
    case KMSKeyType.GoogelAdminEmail:
      return "GoogelAdminEmail";
    case KMSKeyType.GoogleAdminServiceAccountKey:
      return "GoogleAdminServiceAccountKey";
    case KMSKeyType.GoogleAdminServiceAccountId:
      return "GoogleAdminServiceAccountId";
    case KMSKeyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function kMSKeyTypeToNumber(object: KMSKeyType): number {
  switch (object) {
    case KMSKeyType.GoogelAdminEmail:
      return 1;
    case KMSKeyType.GoogleAdminServiceAccountKey:
      return 2;
    case KMSKeyType.GoogleAdminServiceAccountId:
      return 3;
    case KMSKeyType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface KMSKey {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  status: KMSKeyStatus;
  keyType: KMSKeyType;
  decryptedKeyMaterial: string;
}

function createBaseKMSKey(): KMSKey {
  return {
    id: undefined,
    organization: undefined,
    status: KMSKeyStatus.Active,
    keyType: KMSKeyType.GoogelAdminEmail,
    decryptedKeyMaterial: "",
  };
}

export const KMSKey: MessageFns<KMSKey> = {
  encode(message: KMSKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.status !== KMSKeyStatus.Active) {
      writer.uint32(24).int32(kMSKeyStatusToNumber(message.status));
    }
    if (message.keyType !== KMSKeyType.GoogelAdminEmail) {
      writer.uint32(32).int32(kMSKeyTypeToNumber(message.keyType));
    }
    if (message.decryptedKeyMaterial !== "") {
      writer.uint32(42).string(message.decryptedKeyMaterial);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KMSKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKMSKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = kMSKeyStatusFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.keyType = kMSKeyTypeFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.decryptedKeyMaterial = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KMSKey {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      status: isSet(object.status) ? kMSKeyStatusFromJSON(object.status) : KMSKeyStatus.Active,
      keyType: isSet(object.keyType) ? kMSKeyTypeFromJSON(object.keyType) : KMSKeyType.GoogelAdminEmail,
      decryptedKeyMaterial: isSet(object.decryptedKeyMaterial) ? globalThis.String(object.decryptedKeyMaterial) : "",
    };
  },

  toJSON(message: KMSKey): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.status !== KMSKeyStatus.Active) {
      obj.status = kMSKeyStatusToJSON(message.status);
    }
    if (message.keyType !== KMSKeyType.GoogelAdminEmail) {
      obj.keyType = kMSKeyTypeToJSON(message.keyType);
    }
    if (message.decryptedKeyMaterial !== "") {
      obj.decryptedKeyMaterial = message.decryptedKeyMaterial;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KMSKey>, I>>(base?: I): KMSKey {
    return KMSKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KMSKey>, I>>(object: I): KMSKey {
    const message = createBaseKMSKey();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.status = object.status ?? KMSKeyStatus.Active;
    message.keyType = object.keyType ?? KMSKeyType.GoogelAdminEmail;
    message.decryptedKeyMaterial = object.decryptedKeyMaterial ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
