// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/campus.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AWSFile } from "../utils/aws_file";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "organization_service";

export interface Address {
  street: string;
  streetNumber: string;
  city: string;
  region: string;
  addressCode: string;
  country: string;
}

export interface Campus {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  name: string;
  address: Address | undefined;
  email: string;
  phone: string;
  logo?: AWSFile | undefined;
  principalId: ObjectId | undefined;
  supervisorId: ObjectId | undefined;
  archived: boolean;
}

function createBaseAddress(): Address {
  return { street: "", streetNumber: "", city: "", region: "", addressCode: "", country: "" };
}

export const Address: MessageFns<Address> = {
  encode(message: Address, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.street !== "") {
      writer.uint32(10).string(message.street);
    }
    if (message.streetNumber !== "") {
      writer.uint32(18).string(message.streetNumber);
    }
    if (message.city !== "") {
      writer.uint32(26).string(message.city);
    }
    if (message.region !== "") {
      writer.uint32(34).string(message.region);
    }
    if (message.addressCode !== "") {
      writer.uint32(42).string(message.addressCode);
    }
    if (message.country !== "") {
      writer.uint32(50).string(message.country);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Address {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.street = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.streetNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.region = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.addressCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.country = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Address {
    return {
      street: isSet(object.street) ? globalThis.String(object.street) : "",
      streetNumber: isSet(object.streetNumber) ? globalThis.String(object.streetNumber) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      addressCode: isSet(object.addressCode) ? globalThis.String(object.addressCode) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
    };
  },

  toJSON(message: Address): unknown {
    const obj: any = {};
    if (message.street !== "") {
      obj.street = message.street;
    }
    if (message.streetNumber !== "") {
      obj.streetNumber = message.streetNumber;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.addressCode !== "") {
      obj.addressCode = message.addressCode;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Address>, I>>(base?: I): Address {
    return Address.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Address>, I>>(object: I): Address {
    const message = createBaseAddress();
    message.street = object.street ?? "";
    message.streetNumber = object.streetNumber ?? "";
    message.city = object.city ?? "";
    message.region = object.region ?? "";
    message.addressCode = object.addressCode ?? "";
    message.country = object.country ?? "";
    return message;
  },
};

function createBaseCampus(): Campus {
  return {
    id: undefined,
    organization: undefined,
    name: "",
    address: undefined,
    email: "",
    phone: "",
    logo: undefined,
    principalId: undefined,
    supervisorId: undefined,
    archived: false,
  };
}

export const Campus: MessageFns<Campus> = {
  encode(message: Campus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(34).fork()).join();
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.phone !== "") {
      writer.uint32(50).string(message.phone);
    }
    if (message.logo !== undefined) {
      AWSFile.encode(message.logo, writer.uint32(58).fork()).join();
    }
    if (message.principalId !== undefined) {
      ObjectId.encode(message.principalId, writer.uint32(66).fork()).join();
    }
    if (message.supervisorId !== undefined) {
      ObjectId.encode(message.supervisorId, writer.uint32(74).fork()).join();
    }
    if (message.archived !== false) {
      writer.uint32(80).bool(message.archived);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.logo = AWSFile.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.principalId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.supervisorId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.archived = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campus {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      logo: isSet(object.logo) ? AWSFile.fromJSON(object.logo) : undefined,
      principalId: isSet(object.principalId) ? ObjectId.fromJSON(object.principalId) : undefined,
      supervisorId: isSet(object.supervisorId) ? ObjectId.fromJSON(object.supervisorId) : undefined,
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
    };
  },

  toJSON(message: Campus): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.logo !== undefined) {
      obj.logo = AWSFile.toJSON(message.logo);
    }
    if (message.principalId !== undefined) {
      obj.principalId = ObjectId.toJSON(message.principalId);
    }
    if (message.supervisorId !== undefined) {
      obj.supervisorId = ObjectId.toJSON(message.supervisorId);
    }
    if (message.archived !== false) {
      obj.archived = message.archived;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Campus>, I>>(base?: I): Campus {
    return Campus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Campus>, I>>(object: I): Campus {
    const message = createBaseCampus();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.name = object.name ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.email = object.email ?? "";
    message.phone = object.phone ?? "";
    message.logo = (object.logo !== undefined && object.logo !== null) ? AWSFile.fromPartial(object.logo) : undefined;
    message.principalId = (object.principalId !== undefined && object.principalId !== null)
      ? ObjectId.fromPartial(object.principalId)
      : undefined;
    message.supervisorId = (object.supervisorId !== undefined && object.supervisorId !== null)
      ? ObjectId.fromPartial(object.supervisorId)
      : undefined;
    message.archived = object.archived ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
