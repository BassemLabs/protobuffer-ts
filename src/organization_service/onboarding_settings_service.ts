// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/onboarding_settings_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { ItemizedFee } from "./onboarding_settings";

export const protobufPackage = "organization_service";

export interface GetOnboardingSettingsRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

export interface UpdateEnrollmentConfigurationRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  hasInterviewForNewcomers: boolean;
  enableGroupApprovalSystem: boolean;
}

export interface AddSchoolHandbookFileRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  fileName: string;
  awsS3FileLocation: string;
}

export interface RemoveSchoolHandbookFileRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  fileIndex: number;
}

export interface UpdateWaitlistFeeRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  waitlistFee: number;
}

export interface UpdateEmailTemplatesRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  interviewEmailTemplate?: string | undefined;
  postInterviewEmailTemplate?: string | undefined;
  rejectionEmailTemplate: string;
  approvalEmailTemplate: string;
}

export interface UpdateRegistrationFeeRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  registrationFees: { [key: string]: ItemizedFee };
}

export interface UpdateRegistrationFeeRequest_RegistrationFeesEntry {
  key: string;
  value: ItemizedFee | undefined;
}

export interface UpdateReregistrationFeeRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  reregistrationFees: { [key: string]: ItemizedFee };
}

export interface UpdateReregistrationFeeRequest_ReregistrationFeesEntry {
  key: string;
  value: ItemizedFee | undefined;
}

function createBaseGetOnboardingSettingsRequest(): GetOnboardingSettingsRequest {
  return { context: undefined, organizationId: undefined };
}

export const GetOnboardingSettingsRequest: MessageFns<GetOnboardingSettingsRequest> = {
  encode(message: GetOnboardingSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOnboardingSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOnboardingSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOnboardingSettingsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: GetOnboardingSettingsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOnboardingSettingsRequest>, I>>(base?: I): GetOnboardingSettingsRequest {
    return GetOnboardingSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOnboardingSettingsRequest>, I>>(object: I): GetOnboardingSettingsRequest {
    const message = createBaseGetOnboardingSettingsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseUpdateEnrollmentConfigurationRequest(): UpdateEnrollmentConfigurationRequest {
  return {
    context: undefined,
    organizationId: undefined,
    hasInterviewForNewcomers: false,
    enableGroupApprovalSystem: false,
  };
}

export const UpdateEnrollmentConfigurationRequest: MessageFns<UpdateEnrollmentConfigurationRequest> = {
  encode(message: UpdateEnrollmentConfigurationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.hasInterviewForNewcomers !== false) {
      writer.uint32(24).bool(message.hasInterviewForNewcomers);
    }
    if (message.enableGroupApprovalSystem !== false) {
      writer.uint32(32).bool(message.enableGroupApprovalSystem);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEnrollmentConfigurationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEnrollmentConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasInterviewForNewcomers = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enableGroupApprovalSystem = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEnrollmentConfigurationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      hasInterviewForNewcomers: isSet(object.hasInterviewForNewcomers)
        ? globalThis.Boolean(object.hasInterviewForNewcomers)
        : false,
      enableGroupApprovalSystem: isSet(object.enableGroupApprovalSystem)
        ? globalThis.Boolean(object.enableGroupApprovalSystem)
        : false,
    };
  },

  toJSON(message: UpdateEnrollmentConfigurationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.hasInterviewForNewcomers !== false) {
      obj.hasInterviewForNewcomers = message.hasInterviewForNewcomers;
    }
    if (message.enableGroupApprovalSystem !== false) {
      obj.enableGroupApprovalSystem = message.enableGroupApprovalSystem;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateEnrollmentConfigurationRequest>, I>>(
    base?: I,
  ): UpdateEnrollmentConfigurationRequest {
    return UpdateEnrollmentConfigurationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateEnrollmentConfigurationRequest>, I>>(
    object: I,
  ): UpdateEnrollmentConfigurationRequest {
    const message = createBaseUpdateEnrollmentConfigurationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.hasInterviewForNewcomers = object.hasInterviewForNewcomers ?? false;
    message.enableGroupApprovalSystem = object.enableGroupApprovalSystem ?? false;
    return message;
  },
};

function createBaseAddSchoolHandbookFileRequest(): AddSchoolHandbookFileRequest {
  return { context: undefined, organizationId: undefined, fileName: "", awsS3FileLocation: "" };
}

export const AddSchoolHandbookFileRequest: MessageFns<AddSchoolHandbookFileRequest> = {
  encode(message: AddSchoolHandbookFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.fileName !== "") {
      writer.uint32(26).string(message.fileName);
    }
    if (message.awsS3FileLocation !== "") {
      writer.uint32(34).string(message.awsS3FileLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSchoolHandbookFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSchoolHandbookFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fileName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.awsS3FileLocation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSchoolHandbookFileRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      awsS3FileLocation: isSet(object.awsS3FileLocation) ? globalThis.String(object.awsS3FileLocation) : "",
    };
  },

  toJSON(message: AddSchoolHandbookFileRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.awsS3FileLocation !== "") {
      obj.awsS3FileLocation = message.awsS3FileLocation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSchoolHandbookFileRequest>, I>>(base?: I): AddSchoolHandbookFileRequest {
    return AddSchoolHandbookFileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSchoolHandbookFileRequest>, I>>(object: I): AddSchoolHandbookFileRequest {
    const message = createBaseAddSchoolHandbookFileRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.fileName = object.fileName ?? "";
    message.awsS3FileLocation = object.awsS3FileLocation ?? "";
    return message;
  },
};

function createBaseRemoveSchoolHandbookFileRequest(): RemoveSchoolHandbookFileRequest {
  return { context: undefined, organizationId: undefined, fileIndex: 0 };
}

export const RemoveSchoolHandbookFileRequest: MessageFns<RemoveSchoolHandbookFileRequest> = {
  encode(message: RemoveSchoolHandbookFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.fileIndex !== 0) {
      writer.uint32(24).uint32(message.fileIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSchoolHandbookFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSchoolHandbookFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fileIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSchoolHandbookFileRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      fileIndex: isSet(object.fileIndex) ? globalThis.Number(object.fileIndex) : 0,
    };
  },

  toJSON(message: RemoveSchoolHandbookFileRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.fileIndex !== 0) {
      obj.fileIndex = Math.round(message.fileIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSchoolHandbookFileRequest>, I>>(base?: I): RemoveSchoolHandbookFileRequest {
    return RemoveSchoolHandbookFileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSchoolHandbookFileRequest>, I>>(
    object: I,
  ): RemoveSchoolHandbookFileRequest {
    const message = createBaseRemoveSchoolHandbookFileRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.fileIndex = object.fileIndex ?? 0;
    return message;
  },
};

function createBaseUpdateWaitlistFeeRequest(): UpdateWaitlistFeeRequest {
  return { context: undefined, organizationId: undefined, waitlistFee: 0 };
}

export const UpdateWaitlistFeeRequest: MessageFns<UpdateWaitlistFeeRequest> = {
  encode(message: UpdateWaitlistFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.waitlistFee !== 0) {
      writer.uint32(29).float(message.waitlistFee);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWaitlistFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWaitlistFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.waitlistFee = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWaitlistFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      waitlistFee: isSet(object.waitlistFee) ? globalThis.Number(object.waitlistFee) : 0,
    };
  },

  toJSON(message: UpdateWaitlistFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.waitlistFee !== 0) {
      obj.waitlistFee = message.waitlistFee;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateWaitlistFeeRequest>, I>>(base?: I): UpdateWaitlistFeeRequest {
    return UpdateWaitlistFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateWaitlistFeeRequest>, I>>(object: I): UpdateWaitlistFeeRequest {
    const message = createBaseUpdateWaitlistFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.waitlistFee = object.waitlistFee ?? 0;
    return message;
  },
};

function createBaseUpdateEmailTemplatesRequest(): UpdateEmailTemplatesRequest {
  return {
    context: undefined,
    organizationId: undefined,
    interviewEmailTemplate: "",
    postInterviewEmailTemplate: "",
    rejectionEmailTemplate: "",
    approvalEmailTemplate: "",
  };
}

export const UpdateEmailTemplatesRequest: MessageFns<UpdateEmailTemplatesRequest> = {
  encode(message: UpdateEmailTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.interviewEmailTemplate !== undefined && message.interviewEmailTemplate !== "") {
      writer.uint32(26).string(message.interviewEmailTemplate);
    }
    if (message.postInterviewEmailTemplate !== undefined && message.postInterviewEmailTemplate !== "") {
      writer.uint32(34).string(message.postInterviewEmailTemplate);
    }
    if (message.rejectionEmailTemplate !== "") {
      writer.uint32(42).string(message.rejectionEmailTemplate);
    }
    if (message.approvalEmailTemplate !== "") {
      writer.uint32(50).string(message.approvalEmailTemplate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.interviewEmailTemplate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.postInterviewEmailTemplate = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rejectionEmailTemplate = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.approvalEmailTemplate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailTemplatesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      interviewEmailTemplate: isSet(object.interviewEmailTemplate)
        ? globalThis.String(object.interviewEmailTemplate)
        : "",
      postInterviewEmailTemplate: isSet(object.postInterviewEmailTemplate)
        ? globalThis.String(object.postInterviewEmailTemplate)
        : "",
      rejectionEmailTemplate: isSet(object.rejectionEmailTemplate)
        ? globalThis.String(object.rejectionEmailTemplate)
        : "",
      approvalEmailTemplate: isSet(object.approvalEmailTemplate) ? globalThis.String(object.approvalEmailTemplate) : "",
    };
  },

  toJSON(message: UpdateEmailTemplatesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.interviewEmailTemplate !== undefined && message.interviewEmailTemplate !== "") {
      obj.interviewEmailTemplate = message.interviewEmailTemplate;
    }
    if (message.postInterviewEmailTemplate !== undefined && message.postInterviewEmailTemplate !== "") {
      obj.postInterviewEmailTemplate = message.postInterviewEmailTemplate;
    }
    if (message.rejectionEmailTemplate !== "") {
      obj.rejectionEmailTemplate = message.rejectionEmailTemplate;
    }
    if (message.approvalEmailTemplate !== "") {
      obj.approvalEmailTemplate = message.approvalEmailTemplate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateEmailTemplatesRequest>, I>>(base?: I): UpdateEmailTemplatesRequest {
    return UpdateEmailTemplatesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateEmailTemplatesRequest>, I>>(object: I): UpdateEmailTemplatesRequest {
    const message = createBaseUpdateEmailTemplatesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.interviewEmailTemplate = object.interviewEmailTemplate ?? "";
    message.postInterviewEmailTemplate = object.postInterviewEmailTemplate ?? "";
    message.rejectionEmailTemplate = object.rejectionEmailTemplate ?? "";
    message.approvalEmailTemplate = object.approvalEmailTemplate ?? "";
    return message;
  },
};

function createBaseUpdateRegistrationFeeRequest(): UpdateRegistrationFeeRequest {
  return { context: undefined, organizationId: undefined, registrationFees: {} };
}

export const UpdateRegistrationFeeRequest: MessageFns<UpdateRegistrationFeeRequest> = {
  encode(message: UpdateRegistrationFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    Object.entries(message.registrationFees).forEach(([key, value]) => {
      UpdateRegistrationFeeRequest_RegistrationFeesEntry.encode({ key: key as any, value }, writer.uint32(26).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRegistrationFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRegistrationFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = UpdateRegistrationFeeRequest_RegistrationFeesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.registrationFees[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRegistrationFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      registrationFees: isObject(object.registrationFees)
        ? Object.entries(object.registrationFees).reduce<{ [key: string]: ItemizedFee }>((acc, [key, value]) => {
          acc[key] = ItemizedFee.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UpdateRegistrationFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.registrationFees) {
      const entries = Object.entries(message.registrationFees);
      if (entries.length > 0) {
        obj.registrationFees = {};
        entries.forEach(([k, v]) => {
          obj.registrationFees[k] = ItemizedFee.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRegistrationFeeRequest>, I>>(base?: I): UpdateRegistrationFeeRequest {
    return UpdateRegistrationFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRegistrationFeeRequest>, I>>(object: I): UpdateRegistrationFeeRequest {
    const message = createBaseUpdateRegistrationFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.registrationFees = Object.entries(object.registrationFees ?? {}).reduce<{ [key: string]: ItemizedFee }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ItemizedFee.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseUpdateRegistrationFeeRequest_RegistrationFeesEntry(): UpdateRegistrationFeeRequest_RegistrationFeesEntry {
  return { key: "", value: undefined };
}

export const UpdateRegistrationFeeRequest_RegistrationFeesEntry: MessageFns<
  UpdateRegistrationFeeRequest_RegistrationFeesEntry
> = {
  encode(
    message: UpdateRegistrationFeeRequest_RegistrationFeesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ItemizedFee.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRegistrationFeeRequest_RegistrationFeesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRegistrationFeeRequest_RegistrationFeesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ItemizedFee.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRegistrationFeeRequest_RegistrationFeesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ItemizedFee.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UpdateRegistrationFeeRequest_RegistrationFeesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ItemizedFee.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRegistrationFeeRequest_RegistrationFeesEntry>, I>>(
    base?: I,
  ): UpdateRegistrationFeeRequest_RegistrationFeesEntry {
    return UpdateRegistrationFeeRequest_RegistrationFeesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRegistrationFeeRequest_RegistrationFeesEntry>, I>>(
    object: I,
  ): UpdateRegistrationFeeRequest_RegistrationFeesEntry {
    const message = createBaseUpdateRegistrationFeeRequest_RegistrationFeesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ItemizedFee.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUpdateReregistrationFeeRequest(): UpdateReregistrationFeeRequest {
  return { context: undefined, organizationId: undefined, reregistrationFees: {} };
}

export const UpdateReregistrationFeeRequest: MessageFns<UpdateReregistrationFeeRequest> = {
  encode(message: UpdateReregistrationFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    Object.entries(message.reregistrationFees).forEach(([key, value]) => {
      UpdateReregistrationFeeRequest_ReregistrationFeesEntry.encode(
        { key: key as any, value },
        writer.uint32(26).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReregistrationFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReregistrationFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = UpdateReregistrationFeeRequest_ReregistrationFeesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.reregistrationFees[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReregistrationFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      reregistrationFees: isObject(object.reregistrationFees)
        ? Object.entries(object.reregistrationFees).reduce<{ [key: string]: ItemizedFee }>((acc, [key, value]) => {
          acc[key] = ItemizedFee.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UpdateReregistrationFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.reregistrationFees) {
      const entries = Object.entries(message.reregistrationFees);
      if (entries.length > 0) {
        obj.reregistrationFees = {};
        entries.forEach(([k, v]) => {
          obj.reregistrationFees[k] = ItemizedFee.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReregistrationFeeRequest>, I>>(base?: I): UpdateReregistrationFeeRequest {
    return UpdateReregistrationFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReregistrationFeeRequest>, I>>(
    object: I,
  ): UpdateReregistrationFeeRequest {
    const message = createBaseUpdateReregistrationFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.reregistrationFees = Object.entries(object.reregistrationFees ?? {}).reduce<{ [key: string]: ItemizedFee }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ItemizedFee.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseUpdateReregistrationFeeRequest_ReregistrationFeesEntry(): UpdateReregistrationFeeRequest_ReregistrationFeesEntry {
  return { key: "", value: undefined };
}

export const UpdateReregistrationFeeRequest_ReregistrationFeesEntry: MessageFns<
  UpdateReregistrationFeeRequest_ReregistrationFeesEntry
> = {
  encode(
    message: UpdateReregistrationFeeRequest_ReregistrationFeesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ItemizedFee.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReregistrationFeeRequest_ReregistrationFeesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReregistrationFeeRequest_ReregistrationFeesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ItemizedFee.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReregistrationFeeRequest_ReregistrationFeesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ItemizedFee.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UpdateReregistrationFeeRequest_ReregistrationFeesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ItemizedFee.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReregistrationFeeRequest_ReregistrationFeesEntry>, I>>(
    base?: I,
  ): UpdateReregistrationFeeRequest_ReregistrationFeesEntry {
    return UpdateReregistrationFeeRequest_ReregistrationFeesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReregistrationFeeRequest_ReregistrationFeesEntry>, I>>(
    object: I,
  ): UpdateReregistrationFeeRequest_ReregistrationFeesEntry {
    const message = createBaseUpdateReregistrationFeeRequest_ReregistrationFeesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ItemizedFee.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
