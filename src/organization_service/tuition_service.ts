// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/tuition_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import {
  AdditionalFee,
  DiscountScope,
  discountScopeFromJSON,
  discountScopeToJSON,
  discountScopeToNumber,
  DiscountType,
  discountTypeFromJSON,
  discountTypeToJSON,
  discountTypeToNumber,
  DiscountValueType,
  discountValueTypeFromJSON,
  discountValueTypeToJSON,
  discountValueTypeToNumber,
  TuitionDiscount,
  TuitionRate,
} from "./tuition";

export const protobufPackage = "organization_service";

/** TuitionRate messages */
export interface GetTuitionRateRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface ListTuitionRatesRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListTuitionRatesResponse {
  rates: TuitionRate[];
}

export interface CreateTuitionRateRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  grade: string;
  amount: number;
}

export interface UpdateTuitionRateRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
  grade: string;
  amount: number;
}

export interface DeleteTuitionRateRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface DeleteTuitionRateResponse {
  success: boolean;
}

/** AdditionalFee messages */
export interface GetAdditionalFeeRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface ListAdditionalFeesRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListAdditionalFeesResponse {
  fees: AdditionalFee[];
}

export interface CreateAdditionalFeeRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  name: string;
  description: string;
  amount: number;
  isOptional: boolean;
}

export interface UpdateAdditionalFeeRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
  name: string;
  description: string;
  amount: number;
  isOptional: boolean;
}

export interface DeleteAdditionalFeeRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface DeleteAdditionalFeeResponse {
  success: boolean;
}

/** TuitionDiscount messages */
export interface GetTuitionDiscountRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface ListTuitionDiscountsRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface ListTuitionDiscountsResponse {
  discounts: TuitionDiscount[];
}

export interface CreateTuitionDiscountRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  discountType: DiscountType;
  scope: DiscountScope;
  valueType: DiscountValueType;
  value: number;
  student?: ObjectId | undefined;
  family?: ObjectId | undefined;
  description: string;
}

export interface UpdateTuitionDiscountRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
  discountType: DiscountType;
  scope: DiscountScope;
  valueType: DiscountValueType;
  value: number;
  student?: ObjectId | undefined;
  family?: ObjectId | undefined;
  description: string;
}

export interface DeleteTuitionDiscountRequest {
  context: RequestContext | undefined;
  id: ObjectId | undefined;
}

export interface DeleteTuitionDiscountResponse {
  success: boolean;
}

function createBaseGetTuitionRateRequest(): GetTuitionRateRequest {
  return { context: undefined, id: undefined };
}

export const GetTuitionRateRequest: MessageFns<GetTuitionRateRequest> = {
  encode(message: GetTuitionRateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTuitionRateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTuitionRateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTuitionRateRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: GetTuitionRateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTuitionRateRequest>, I>>(base?: I): GetTuitionRateRequest {
    return GetTuitionRateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTuitionRateRequest>, I>>(object: I): GetTuitionRateRequest {
    const message = createBaseGetTuitionRateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseListTuitionRatesRequest(): ListTuitionRatesRequest {
  return { context: undefined, organizationId: undefined, schoolYear: undefined };
}

export const ListTuitionRatesRequest: MessageFns<ListTuitionRatesRequest> = {
  encode(message: ListTuitionRatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTuitionRatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTuitionRatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTuitionRatesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListTuitionRatesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTuitionRatesRequest>, I>>(base?: I): ListTuitionRatesRequest {
    return ListTuitionRatesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTuitionRatesRequest>, I>>(object: I): ListTuitionRatesRequest {
    const message = createBaseListTuitionRatesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListTuitionRatesResponse(): ListTuitionRatesResponse {
  return { rates: [] };
}

export const ListTuitionRatesResponse: MessageFns<ListTuitionRatesResponse> = {
  encode(message: ListTuitionRatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rates) {
      TuitionRate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTuitionRatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTuitionRatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rates.push(TuitionRate.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTuitionRatesResponse {
    return {
      rates: globalThis.Array.isArray(object?.rates) ? object.rates.map((e: any) => TuitionRate.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListTuitionRatesResponse): unknown {
    const obj: any = {};
    if (message.rates?.length) {
      obj.rates = message.rates.map((e) => TuitionRate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTuitionRatesResponse>, I>>(base?: I): ListTuitionRatesResponse {
    return ListTuitionRatesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTuitionRatesResponse>, I>>(object: I): ListTuitionRatesResponse {
    const message = createBaseListTuitionRatesResponse();
    message.rates = object.rates?.map((e) => TuitionRate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateTuitionRateRequest(): CreateTuitionRateRequest {
  return { context: undefined, organizationId: undefined, schoolYear: undefined, grade: "", amount: 0 };
}

export const CreateTuitionRateRequest: MessageFns<CreateTuitionRateRequest> = {
  encode(message: CreateTuitionRateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.grade !== "") {
      writer.uint32(34).string(message.grade);
    }
    if (message.amount !== 0) {
      writer.uint32(41).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTuitionRateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTuitionRateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.grade = reader.string();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.amount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTuitionRateRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CreateTuitionRateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTuitionRateRequest>, I>>(base?: I): CreateTuitionRateRequest {
    return CreateTuitionRateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTuitionRateRequest>, I>>(object: I): CreateTuitionRateRequest {
    const message = createBaseCreateTuitionRateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.grade = object.grade ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseUpdateTuitionRateRequest(): UpdateTuitionRateRequest {
  return { context: undefined, id: undefined, grade: "", amount: 0 };
}

export const UpdateTuitionRateRequest: MessageFns<UpdateTuitionRateRequest> = {
  encode(message: UpdateTuitionRateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.grade !== "") {
      writer.uint32(26).string(message.grade);
    }
    if (message.amount !== 0) {
      writer.uint32(33).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTuitionRateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTuitionRateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.grade = reader.string();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.amount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTuitionRateRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: UpdateTuitionRateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTuitionRateRequest>, I>>(base?: I): UpdateTuitionRateRequest {
    return UpdateTuitionRateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTuitionRateRequest>, I>>(object: I): UpdateTuitionRateRequest {
    const message = createBaseUpdateTuitionRateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.grade = object.grade ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseDeleteTuitionRateRequest(): DeleteTuitionRateRequest {
  return { context: undefined, id: undefined };
}

export const DeleteTuitionRateRequest: MessageFns<DeleteTuitionRateRequest> = {
  encode(message: DeleteTuitionRateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTuitionRateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTuitionRateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTuitionRateRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: DeleteTuitionRateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTuitionRateRequest>, I>>(base?: I): DeleteTuitionRateRequest {
    return DeleteTuitionRateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTuitionRateRequest>, I>>(object: I): DeleteTuitionRateRequest {
    const message = createBaseDeleteTuitionRateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseDeleteTuitionRateResponse(): DeleteTuitionRateResponse {
  return { success: false };
}

export const DeleteTuitionRateResponse: MessageFns<DeleteTuitionRateResponse> = {
  encode(message: DeleteTuitionRateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTuitionRateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTuitionRateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTuitionRateResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteTuitionRateResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTuitionRateResponse>, I>>(base?: I): DeleteTuitionRateResponse {
    return DeleteTuitionRateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTuitionRateResponse>, I>>(object: I): DeleteTuitionRateResponse {
    const message = createBaseDeleteTuitionRateResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetAdditionalFeeRequest(): GetAdditionalFeeRequest {
  return { context: undefined, id: undefined };
}

export const GetAdditionalFeeRequest: MessageFns<GetAdditionalFeeRequest> = {
  encode(message: GetAdditionalFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAdditionalFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAdditionalFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAdditionalFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: GetAdditionalFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAdditionalFeeRequest>, I>>(base?: I): GetAdditionalFeeRequest {
    return GetAdditionalFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAdditionalFeeRequest>, I>>(object: I): GetAdditionalFeeRequest {
    const message = createBaseGetAdditionalFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseListAdditionalFeesRequest(): ListAdditionalFeesRequest {
  return { context: undefined, organizationId: undefined, schoolYear: undefined };
}

export const ListAdditionalFeesRequest: MessageFns<ListAdditionalFeesRequest> = {
  encode(message: ListAdditionalFeesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdditionalFeesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdditionalFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdditionalFeesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListAdditionalFeesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAdditionalFeesRequest>, I>>(base?: I): ListAdditionalFeesRequest {
    return ListAdditionalFeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAdditionalFeesRequest>, I>>(object: I): ListAdditionalFeesRequest {
    const message = createBaseListAdditionalFeesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListAdditionalFeesResponse(): ListAdditionalFeesResponse {
  return { fees: [] };
}

export const ListAdditionalFeesResponse: MessageFns<ListAdditionalFeesResponse> = {
  encode(message: ListAdditionalFeesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fees) {
      AdditionalFee.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdditionalFeesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdditionalFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fees.push(AdditionalFee.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdditionalFeesResponse {
    return {
      fees: globalThis.Array.isArray(object?.fees) ? object.fees.map((e: any) => AdditionalFee.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAdditionalFeesResponse): unknown {
    const obj: any = {};
    if (message.fees?.length) {
      obj.fees = message.fees.map((e) => AdditionalFee.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAdditionalFeesResponse>, I>>(base?: I): ListAdditionalFeesResponse {
    return ListAdditionalFeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAdditionalFeesResponse>, I>>(object: I): ListAdditionalFeesResponse {
    const message = createBaseListAdditionalFeesResponse();
    message.fees = object.fees?.map((e) => AdditionalFee.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateAdditionalFeeRequest(): CreateAdditionalFeeRequest {
  return {
    context: undefined,
    organizationId: undefined,
    schoolYear: undefined,
    name: "",
    description: "",
    amount: 0,
    isOptional: false,
  };
}

export const CreateAdditionalFeeRequest: MessageFns<CreateAdditionalFeeRequest> = {
  encode(message: CreateAdditionalFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.amount !== 0) {
      writer.uint32(49).double(message.amount);
    }
    if (message.isOptional !== false) {
      writer.uint32(56).bool(message.isOptional);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAdditionalFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAdditionalFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.amount = reader.double();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isOptional = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAdditionalFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
    };
  },

  toJSON(message: CreateAdditionalFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.isOptional !== false) {
      obj.isOptional = message.isOptional;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAdditionalFeeRequest>, I>>(base?: I): CreateAdditionalFeeRequest {
    return CreateAdditionalFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAdditionalFeeRequest>, I>>(object: I): CreateAdditionalFeeRequest {
    const message = createBaseCreateAdditionalFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? 0;
    message.isOptional = object.isOptional ?? false;
    return message;
  },
};

function createBaseUpdateAdditionalFeeRequest(): UpdateAdditionalFeeRequest {
  return { context: undefined, id: undefined, name: "", description: "", amount: 0, isOptional: false };
}

export const UpdateAdditionalFeeRequest: MessageFns<UpdateAdditionalFeeRequest> = {
  encode(message: UpdateAdditionalFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.amount !== 0) {
      writer.uint32(41).double(message.amount);
    }
    if (message.isOptional !== false) {
      writer.uint32(48).bool(message.isOptional);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAdditionalFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAdditionalFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.amount = reader.double();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isOptional = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAdditionalFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
    };
  },

  toJSON(message: UpdateAdditionalFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.isOptional !== false) {
      obj.isOptional = message.isOptional;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAdditionalFeeRequest>, I>>(base?: I): UpdateAdditionalFeeRequest {
    return UpdateAdditionalFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAdditionalFeeRequest>, I>>(object: I): UpdateAdditionalFeeRequest {
    const message = createBaseUpdateAdditionalFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? 0;
    message.isOptional = object.isOptional ?? false;
    return message;
  },
};

function createBaseDeleteAdditionalFeeRequest(): DeleteAdditionalFeeRequest {
  return { context: undefined, id: undefined };
}

export const DeleteAdditionalFeeRequest: MessageFns<DeleteAdditionalFeeRequest> = {
  encode(message: DeleteAdditionalFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAdditionalFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAdditionalFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAdditionalFeeRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: DeleteAdditionalFeeRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAdditionalFeeRequest>, I>>(base?: I): DeleteAdditionalFeeRequest {
    return DeleteAdditionalFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAdditionalFeeRequest>, I>>(object: I): DeleteAdditionalFeeRequest {
    const message = createBaseDeleteAdditionalFeeRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseDeleteAdditionalFeeResponse(): DeleteAdditionalFeeResponse {
  return { success: false };
}

export const DeleteAdditionalFeeResponse: MessageFns<DeleteAdditionalFeeResponse> = {
  encode(message: DeleteAdditionalFeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAdditionalFeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAdditionalFeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAdditionalFeeResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteAdditionalFeeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAdditionalFeeResponse>, I>>(base?: I): DeleteAdditionalFeeResponse {
    return DeleteAdditionalFeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAdditionalFeeResponse>, I>>(object: I): DeleteAdditionalFeeResponse {
    const message = createBaseDeleteAdditionalFeeResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetTuitionDiscountRequest(): GetTuitionDiscountRequest {
  return { context: undefined, id: undefined };
}

export const GetTuitionDiscountRequest: MessageFns<GetTuitionDiscountRequest> = {
  encode(message: GetTuitionDiscountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTuitionDiscountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTuitionDiscountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTuitionDiscountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: GetTuitionDiscountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTuitionDiscountRequest>, I>>(base?: I): GetTuitionDiscountRequest {
    return GetTuitionDiscountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTuitionDiscountRequest>, I>>(object: I): GetTuitionDiscountRequest {
    const message = createBaseGetTuitionDiscountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseListTuitionDiscountsRequest(): ListTuitionDiscountsRequest {
  return { context: undefined, organizationId: undefined, schoolYear: undefined };
}

export const ListTuitionDiscountsRequest: MessageFns<ListTuitionDiscountsRequest> = {
  encode(message: ListTuitionDiscountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTuitionDiscountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTuitionDiscountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTuitionDiscountsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: ListTuitionDiscountsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTuitionDiscountsRequest>, I>>(base?: I): ListTuitionDiscountsRequest {
    return ListTuitionDiscountsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTuitionDiscountsRequest>, I>>(object: I): ListTuitionDiscountsRequest {
    const message = createBaseListTuitionDiscountsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseListTuitionDiscountsResponse(): ListTuitionDiscountsResponse {
  return { discounts: [] };
}

export const ListTuitionDiscountsResponse: MessageFns<ListTuitionDiscountsResponse> = {
  encode(message: ListTuitionDiscountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.discounts) {
      TuitionDiscount.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTuitionDiscountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTuitionDiscountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discounts.push(TuitionDiscount.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTuitionDiscountsResponse {
    return {
      discounts: globalThis.Array.isArray(object?.discounts)
        ? object.discounts.map((e: any) => TuitionDiscount.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListTuitionDiscountsResponse): unknown {
    const obj: any = {};
    if (message.discounts?.length) {
      obj.discounts = message.discounts.map((e) => TuitionDiscount.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTuitionDiscountsResponse>, I>>(base?: I): ListTuitionDiscountsResponse {
    return ListTuitionDiscountsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTuitionDiscountsResponse>, I>>(object: I): ListTuitionDiscountsResponse {
    const message = createBaseListTuitionDiscountsResponse();
    message.discounts = object.discounts?.map((e) => TuitionDiscount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateTuitionDiscountRequest(): CreateTuitionDiscountRequest {
  return {
    context: undefined,
    organizationId: undefined,
    schoolYear: undefined,
    discountType: DiscountType.STANDARD,
    scope: DiscountScope.STUDENT_DISCOUNT,
    valueType: DiscountValueType.AMOUNT,
    value: 0,
    student: undefined,
    family: undefined,
    description: "",
  };
}

export const CreateTuitionDiscountRequest: MessageFns<CreateTuitionDiscountRequest> = {
  encode(message: CreateTuitionDiscountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.discountType !== DiscountType.STANDARD) {
      writer.uint32(32).int32(discountTypeToNumber(message.discountType));
    }
    if (message.scope !== DiscountScope.STUDENT_DISCOUNT) {
      writer.uint32(40).int32(discountScopeToNumber(message.scope));
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      writer.uint32(48).int32(discountValueTypeToNumber(message.valueType));
    }
    if (message.value !== 0) {
      writer.uint32(57).double(message.value);
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(66).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(74).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(82).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTuitionDiscountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTuitionDiscountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.discountType = discountTypeFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.scope = discountScopeFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.valueType = discountValueTypeFromJSON(reader.int32());
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.value = reader.double();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTuitionDiscountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      discountType: isSet(object.discountType) ? discountTypeFromJSON(object.discountType) : DiscountType.STANDARD,
      scope: isSet(object.scope) ? discountScopeFromJSON(object.scope) : DiscountScope.STUDENT_DISCOUNT,
      valueType: isSet(object.valueType) ? discountValueTypeFromJSON(object.valueType) : DiscountValueType.AMOUNT,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateTuitionDiscountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.discountType !== DiscountType.STANDARD) {
      obj.discountType = discountTypeToJSON(message.discountType);
    }
    if (message.scope !== DiscountScope.STUDENT_DISCOUNT) {
      obj.scope = discountScopeToJSON(message.scope);
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      obj.valueType = discountValueTypeToJSON(message.valueType);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTuitionDiscountRequest>, I>>(base?: I): CreateTuitionDiscountRequest {
    return CreateTuitionDiscountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTuitionDiscountRequest>, I>>(object: I): CreateTuitionDiscountRequest {
    const message = createBaseCreateTuitionDiscountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.discountType = object.discountType ?? DiscountType.STANDARD;
    message.scope = object.scope ?? DiscountScope.STUDENT_DISCOUNT;
    message.valueType = object.valueType ?? DiscountValueType.AMOUNT;
    message.value = object.value ?? 0;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateTuitionDiscountRequest(): UpdateTuitionDiscountRequest {
  return {
    context: undefined,
    id: undefined,
    discountType: DiscountType.STANDARD,
    scope: DiscountScope.STUDENT_DISCOUNT,
    valueType: DiscountValueType.AMOUNT,
    value: 0,
    student: undefined,
    family: undefined,
    description: "",
  };
}

export const UpdateTuitionDiscountRequest: MessageFns<UpdateTuitionDiscountRequest> = {
  encode(message: UpdateTuitionDiscountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.discountType !== DiscountType.STANDARD) {
      writer.uint32(24).int32(discountTypeToNumber(message.discountType));
    }
    if (message.scope !== DiscountScope.STUDENT_DISCOUNT) {
      writer.uint32(32).int32(discountScopeToNumber(message.scope));
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      writer.uint32(40).int32(discountValueTypeToNumber(message.valueType));
    }
    if (message.value !== 0) {
      writer.uint32(49).double(message.value);
    }
    if (message.student !== undefined) {
      ObjectId.encode(message.student, writer.uint32(58).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(66).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTuitionDiscountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTuitionDiscountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.discountType = discountTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.scope = discountScopeFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.valueType = discountValueTypeFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.value = reader.double();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.student = ObjectId.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTuitionDiscountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      discountType: isSet(object.discountType) ? discountTypeFromJSON(object.discountType) : DiscountType.STANDARD,
      scope: isSet(object.scope) ? discountScopeFromJSON(object.scope) : DiscountScope.STUDENT_DISCOUNT,
      valueType: isSet(object.valueType) ? discountValueTypeFromJSON(object.valueType) : DiscountValueType.AMOUNT,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      student: isSet(object.student) ? ObjectId.fromJSON(object.student) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UpdateTuitionDiscountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.discountType !== DiscountType.STANDARD) {
      obj.discountType = discountTypeToJSON(message.discountType);
    }
    if (message.scope !== DiscountScope.STUDENT_DISCOUNT) {
      obj.scope = discountScopeToJSON(message.scope);
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      obj.valueType = discountValueTypeToJSON(message.valueType);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.student !== undefined) {
      obj.student = ObjectId.toJSON(message.student);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTuitionDiscountRequest>, I>>(base?: I): UpdateTuitionDiscountRequest {
    return UpdateTuitionDiscountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTuitionDiscountRequest>, I>>(object: I): UpdateTuitionDiscountRequest {
    const message = createBaseUpdateTuitionDiscountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.discountType = object.discountType ?? DiscountType.STANDARD;
    message.scope = object.scope ?? DiscountScope.STUDENT_DISCOUNT;
    message.valueType = object.valueType ?? DiscountValueType.AMOUNT;
    message.value = object.value ?? 0;
    message.student = (object.student !== undefined && object.student !== null)
      ? ObjectId.fromPartial(object.student)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseDeleteTuitionDiscountRequest(): DeleteTuitionDiscountRequest {
  return { context: undefined, id: undefined };
}

export const DeleteTuitionDiscountRequest: MessageFns<DeleteTuitionDiscountRequest> = {
  encode(message: DeleteTuitionDiscountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTuitionDiscountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTuitionDiscountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTuitionDiscountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: DeleteTuitionDiscountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTuitionDiscountRequest>, I>>(base?: I): DeleteTuitionDiscountRequest {
    return DeleteTuitionDiscountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTuitionDiscountRequest>, I>>(object: I): DeleteTuitionDiscountRequest {
    const message = createBaseDeleteTuitionDiscountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseDeleteTuitionDiscountResponse(): DeleteTuitionDiscountResponse {
  return { success: false };
}

export const DeleteTuitionDiscountResponse: MessageFns<DeleteTuitionDiscountResponse> = {
  encode(message: DeleteTuitionDiscountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTuitionDiscountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTuitionDiscountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTuitionDiscountResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteTuitionDiscountResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTuitionDiscountResponse>, I>>(base?: I): DeleteTuitionDiscountResponse {
    return DeleteTuitionDiscountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTuitionDiscountResponse>, I>>(
    object: I,
  ): DeleteTuitionDiscountResponse {
    const message = createBaseDeleteTuitionDiscountResponse();
    message.success = object.success ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
