// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/tuition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "organization_service";

export enum DiscountType {
  /** STANDARD - subsidized, teacher, sibling, scholarship */
  STANDARD = "STANDARD",
  /** CUSTOM - financial aid */
  CUSTOM = "CUSTOM",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function discountTypeFromJSON(object: any): DiscountType {
  switch (object) {
    case 1:
    case "STANDARD":
      return DiscountType.STANDARD;
    case 2:
    case "CUSTOM":
      return DiscountType.CUSTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscountType.UNRECOGNIZED;
  }
}

export function discountTypeToJSON(object: DiscountType): string {
  switch (object) {
    case DiscountType.STANDARD:
      return "STANDARD";
    case DiscountType.CUSTOM:
      return "CUSTOM";
    case DiscountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function discountTypeToNumber(object: DiscountType): number {
  switch (object) {
    case DiscountType.STANDARD:
      return 1;
    case DiscountType.CUSTOM:
      return 2;
    case DiscountType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum Scope {
  STUDENT_SCOPE = "STUDENT_SCOPE",
  FAMILY_SCOPE = "FAMILY_SCOPE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function scopeFromJSON(object: any): Scope {
  switch (object) {
    case 1:
    case "STUDENT_SCOPE":
      return Scope.STUDENT_SCOPE;
    case 2:
    case "FAMILY_SCOPE":
      return Scope.FAMILY_SCOPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Scope.UNRECOGNIZED;
  }
}

export function scopeToJSON(object: Scope): string {
  switch (object) {
    case Scope.STUDENT_SCOPE:
      return "STUDENT_SCOPE";
    case Scope.FAMILY_SCOPE:
      return "FAMILY_SCOPE";
    case Scope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function scopeToNumber(object: Scope): number {
  switch (object) {
    case Scope.STUDENT_SCOPE:
      return 1;
    case Scope.FAMILY_SCOPE:
      return 2;
    case Scope.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum DiscountValueType {
  AMOUNT = "AMOUNT",
  PERCENTAGE = "PERCENTAGE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function discountValueTypeFromJSON(object: any): DiscountValueType {
  switch (object) {
    case 1:
    case "AMOUNT":
      return DiscountValueType.AMOUNT;
    case 2:
    case "PERCENTAGE":
      return DiscountValueType.PERCENTAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscountValueType.UNRECOGNIZED;
  }
}

export function discountValueTypeToJSON(object: DiscountValueType): string {
  switch (object) {
    case DiscountValueType.AMOUNT:
      return "AMOUNT";
    case DiscountValueType.PERCENTAGE:
      return "PERCENTAGE";
    case DiscountValueType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function discountValueTypeToNumber(object: DiscountValueType): number {
  switch (object) {
    case DiscountValueType.AMOUNT:
      return 1;
    case DiscountValueType.PERCENTAGE:
      return 2;
    case DiscountValueType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum PaymentScheduleType {
  ONE_TIME = "ONE_TIME",
  MONTHLY = "MONTHLY",
  CUSTOM_PAYMENT_SCHEDULE = "CUSTOM_PAYMENT_SCHEDULE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function paymentScheduleTypeFromJSON(object: any): PaymentScheduleType {
  switch (object) {
    case 1:
    case "ONE_TIME":
      return PaymentScheduleType.ONE_TIME;
    case 2:
    case "MONTHLY":
      return PaymentScheduleType.MONTHLY;
    case 3:
    case "CUSTOM_PAYMENT_SCHEDULE":
      return PaymentScheduleType.CUSTOM_PAYMENT_SCHEDULE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentScheduleType.UNRECOGNIZED;
  }
}

export function paymentScheduleTypeToJSON(object: PaymentScheduleType): string {
  switch (object) {
    case PaymentScheduleType.ONE_TIME:
      return "ONE_TIME";
    case PaymentScheduleType.MONTHLY:
      return "MONTHLY";
    case PaymentScheduleType.CUSTOM_PAYMENT_SCHEDULE:
      return "CUSTOM_PAYMENT_SCHEDULE";
    case PaymentScheduleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function paymentScheduleTypeToNumber(object: PaymentScheduleType): number {
  switch (object) {
    case PaymentScheduleType.ONE_TIME:
      return 1;
    case PaymentScheduleType.MONTHLY:
      return 2;
    case PaymentScheduleType.CUSTOM_PAYMENT_SCHEDULE:
      return 3;
    case PaymentScheduleType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum DiscountStackMode {
  /** ADDITIVE - All discounts stack */
  ADDITIVE = "ADDITIVE",
  /** EXCLUSIVE - Only the best in the bucket */
  EXCLUSIVE = "EXCLUSIVE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function discountStackModeFromJSON(object: any): DiscountStackMode {
  switch (object) {
    case 1:
    case "ADDITIVE":
      return DiscountStackMode.ADDITIVE;
    case 2:
    case "EXCLUSIVE":
      return DiscountStackMode.EXCLUSIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiscountStackMode.UNRECOGNIZED;
  }
}

export function discountStackModeToJSON(object: DiscountStackMode): string {
  switch (object) {
    case DiscountStackMode.ADDITIVE:
      return "ADDITIVE";
    case DiscountStackMode.EXCLUSIVE:
      return "EXCLUSIVE";
    case DiscountStackMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function discountStackModeToNumber(object: DiscountStackMode): number {
  switch (object) {
    case DiscountStackMode.ADDITIVE:
      return 1;
    case DiscountStackMode.EXCLUSIVE:
      return 2;
    case DiscountStackMode.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface TuitionRate {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  grade: string;
  amount: number;
}

export interface AdditionalFee {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  name: string;
  description: string;
  amount: number;
  isOptional: boolean;
  scope: Scope;
}

export interface TuitionDiscount {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  name: string;
  discountType: DiscountType;
  scope: Scope;
  valueType: DiscountValueType;
  value: number;
  description: string;
  stackMode: DiscountStackMode;
}

export interface TuitionPlan {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  name: string;
  description: string;
  scheduleType: PaymentScheduleType;
  /** For monthly plans */
  numberOfMonths?:
    | number
    | undefined;
  /** For custom plans */
  installments: PaymentInstallment[];
  archived: boolean;
}

export interface PaymentInstallment {
  dueDay: number;
  dueMonth: number;
}

function createBaseTuitionRate(): TuitionRate {
  return { id: undefined, organization: undefined, schoolYear: undefined, grade: "", amount: 0 };
}

export const TuitionRate: MessageFns<TuitionRate> = {
  encode(message: TuitionRate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.grade !== "") {
      writer.uint32(34).string(message.grade);
    }
    if (message.amount !== 0) {
      writer.uint32(41).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuitionRate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuitionRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.grade = reader.string();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.amount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuitionRate {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: TuitionRate): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TuitionRate>, I>>(base?: I): TuitionRate {
    return TuitionRate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TuitionRate>, I>>(object: I): TuitionRate {
    const message = createBaseTuitionRate();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.grade = object.grade ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseAdditionalFee(): AdditionalFee {
  return {
    id: undefined,
    organization: undefined,
    schoolYear: undefined,
    name: "",
    description: "",
    amount: 0,
    isOptional: false,
    scope: Scope.STUDENT_SCOPE,
  };
}

export const AdditionalFee: MessageFns<AdditionalFee> = {
  encode(message: AdditionalFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.amount !== 0) {
      writer.uint32(49).double(message.amount);
    }
    if (message.isOptional !== false) {
      writer.uint32(56).bool(message.isOptional);
    }
    if (message.scope !== Scope.STUDENT_SCOPE) {
      writer.uint32(64).int32(scopeToNumber(message.scope));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdditionalFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdditionalFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.amount = reader.double();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isOptional = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.scope = scopeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdditionalFee {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
      scope: isSet(object.scope) ? scopeFromJSON(object.scope) : Scope.STUDENT_SCOPE,
    };
  },

  toJSON(message: AdditionalFee): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.isOptional !== false) {
      obj.isOptional = message.isOptional;
    }
    if (message.scope !== Scope.STUDENT_SCOPE) {
      obj.scope = scopeToJSON(message.scope);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdditionalFee>, I>>(base?: I): AdditionalFee {
    return AdditionalFee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdditionalFee>, I>>(object: I): AdditionalFee {
    const message = createBaseAdditionalFee();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? 0;
    message.isOptional = object.isOptional ?? false;
    message.scope = object.scope ?? Scope.STUDENT_SCOPE;
    return message;
  },
};

function createBaseTuitionDiscount(): TuitionDiscount {
  return {
    id: undefined,
    organization: undefined,
    schoolYear: undefined,
    name: "",
    discountType: DiscountType.STANDARD,
    scope: Scope.STUDENT_SCOPE,
    valueType: DiscountValueType.AMOUNT,
    value: 0,
    description: "",
    stackMode: DiscountStackMode.ADDITIVE,
  };
}

export const TuitionDiscount: MessageFns<TuitionDiscount> = {
  encode(message: TuitionDiscount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.discountType !== DiscountType.STANDARD) {
      writer.uint32(40).int32(discountTypeToNumber(message.discountType));
    }
    if (message.scope !== Scope.STUDENT_SCOPE) {
      writer.uint32(48).int32(scopeToNumber(message.scope));
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      writer.uint32(56).int32(discountValueTypeToNumber(message.valueType));
    }
    if (message.value !== 0) {
      writer.uint32(65).double(message.value);
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    if (message.stackMode !== DiscountStackMode.ADDITIVE) {
      writer.uint32(80).int32(discountStackModeToNumber(message.stackMode));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuitionDiscount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuitionDiscount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.discountType = discountTypeFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.scope = scopeFromJSON(reader.int32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.valueType = discountValueTypeFromJSON(reader.int32());
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.value = reader.double();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.stackMode = discountStackModeFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuitionDiscount {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      discountType: isSet(object.discountType) ? discountTypeFromJSON(object.discountType) : DiscountType.STANDARD,
      scope: isSet(object.scope) ? scopeFromJSON(object.scope) : Scope.STUDENT_SCOPE,
      valueType: isSet(object.valueType) ? discountValueTypeFromJSON(object.valueType) : DiscountValueType.AMOUNT,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      stackMode: isSet(object.stackMode) ? discountStackModeFromJSON(object.stackMode) : DiscountStackMode.ADDITIVE,
    };
  },

  toJSON(message: TuitionDiscount): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.discountType !== DiscountType.STANDARD) {
      obj.discountType = discountTypeToJSON(message.discountType);
    }
    if (message.scope !== Scope.STUDENT_SCOPE) {
      obj.scope = scopeToJSON(message.scope);
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      obj.valueType = discountValueTypeToJSON(message.valueType);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.stackMode !== DiscountStackMode.ADDITIVE) {
      obj.stackMode = discountStackModeToJSON(message.stackMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TuitionDiscount>, I>>(base?: I): TuitionDiscount {
    return TuitionDiscount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TuitionDiscount>, I>>(object: I): TuitionDiscount {
    const message = createBaseTuitionDiscount();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.name = object.name ?? "";
    message.discountType = object.discountType ?? DiscountType.STANDARD;
    message.scope = object.scope ?? Scope.STUDENT_SCOPE;
    message.valueType = object.valueType ?? DiscountValueType.AMOUNT;
    message.value = object.value ?? 0;
    message.description = object.description ?? "";
    message.stackMode = object.stackMode ?? DiscountStackMode.ADDITIVE;
    return message;
  },
};

function createBaseTuitionPlan(): TuitionPlan {
  return {
    id: undefined,
    organization: undefined,
    schoolYear: undefined,
    name: "",
    description: "",
    scheduleType: PaymentScheduleType.ONE_TIME,
    numberOfMonths: 0,
    installments: [],
    archived: false,
  };
}

export const TuitionPlan: MessageFns<TuitionPlan> = {
  encode(message: TuitionPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.scheduleType !== PaymentScheduleType.ONE_TIME) {
      writer.uint32(48).int32(paymentScheduleTypeToNumber(message.scheduleType));
    }
    if (message.numberOfMonths !== undefined && message.numberOfMonths !== 0) {
      writer.uint32(56).int32(message.numberOfMonths);
    }
    for (const v of message.installments) {
      PaymentInstallment.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.archived !== false) {
      writer.uint32(72).bool(message.archived);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuitionPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuitionPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.scheduleType = paymentScheduleTypeFromJSON(reader.int32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.numberOfMonths = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.installments.push(PaymentInstallment.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.archived = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuitionPlan {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      scheduleType: isSet(object.scheduleType)
        ? paymentScheduleTypeFromJSON(object.scheduleType)
        : PaymentScheduleType.ONE_TIME,
      numberOfMonths: isSet(object.numberOfMonths) ? globalThis.Number(object.numberOfMonths) : 0,
      installments: globalThis.Array.isArray(object?.installments)
        ? object.installments.map((e: any) => PaymentInstallment.fromJSON(e))
        : [],
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
    };
  },

  toJSON(message: TuitionPlan): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.scheduleType !== PaymentScheduleType.ONE_TIME) {
      obj.scheduleType = paymentScheduleTypeToJSON(message.scheduleType);
    }
    if (message.numberOfMonths !== undefined && message.numberOfMonths !== 0) {
      obj.numberOfMonths = Math.round(message.numberOfMonths);
    }
    if (message.installments?.length) {
      obj.installments = message.installments.map((e) => PaymentInstallment.toJSON(e));
    }
    if (message.archived !== false) {
      obj.archived = message.archived;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TuitionPlan>, I>>(base?: I): TuitionPlan {
    return TuitionPlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TuitionPlan>, I>>(object: I): TuitionPlan {
    const message = createBaseTuitionPlan();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.scheduleType = object.scheduleType ?? PaymentScheduleType.ONE_TIME;
    message.numberOfMonths = object.numberOfMonths ?? 0;
    message.installments = object.installments?.map((e) => PaymentInstallment.fromPartial(e)) || [];
    message.archived = object.archived ?? false;
    return message;
  },
};

function createBasePaymentInstallment(): PaymentInstallment {
  return { dueDay: 0, dueMonth: 0 };
}

export const PaymentInstallment: MessageFns<PaymentInstallment> = {
  encode(message: PaymentInstallment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dueDay !== 0) {
      writer.uint32(8).int32(message.dueDay);
    }
    if (message.dueMonth !== 0) {
      writer.uint32(16).int32(message.dueMonth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentInstallment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentInstallment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dueDay = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dueMonth = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentInstallment {
    return {
      dueDay: isSet(object.dueDay) ? globalThis.Number(object.dueDay) : 0,
      dueMonth: isSet(object.dueMonth) ? globalThis.Number(object.dueMonth) : 0,
    };
  },

  toJSON(message: PaymentInstallment): unknown {
    const obj: any = {};
    if (message.dueDay !== 0) {
      obj.dueDay = Math.round(message.dueDay);
    }
    if (message.dueMonth !== 0) {
      obj.dueMonth = Math.round(message.dueMonth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentInstallment>, I>>(base?: I): PaymentInstallment {
    return PaymentInstallment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentInstallment>, I>>(object: I): PaymentInstallment {
    const message = createBasePaymentInstallment();
    message.dueDay = object.dueDay ?? 0;
    message.dueMonth = object.dueMonth ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
