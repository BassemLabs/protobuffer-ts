// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/organization_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { Currency, currencyFromJSON, currencyToJSON, currencyToNumber, Organization, SchoolYear } from "./organization";

export const protobufPackage = "organization_service";

/** Request to fetch an organization by its ID */
export interface GetOrganizationRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

/** Request to fetch an organization by domain */
export interface GetOrganizationByDomainRequest {
  context: RequestContext | undefined;
  domain: string;
}

/** Request to unsafely fetch an organization by ID */
export interface UnsafeGetOrganizationByOrganizationIdRequest {
  organizationId: ObjectId | undefined;
}

/** Request to unsafely fetch an organization by domain */
export interface UnsafeGetOrganizationByDomainRequest {
  domain: string;
}

/** Request to rename an organization */
export interface RenameOrganizationRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  newName: string;
}

/** Request to update the default domain of an organization */
export interface UpdateDefaultDomainRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  newDefaultDomain: string;
}

/** Request to add a domain to an organization */
export interface AddDomainRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  newDomain: string;
}

/** Request to remove a domain from an organization */
export interface RemoveDomainRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  removeDomain: string;
}

/** Request to update organization main settings */
export interface UpdateOrganizationSettingsRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  name: string;
  domains: string[];
  defaultDomain: string;
  countryCode: string;
  currency: Currency;
}

/** Request to fetch all organizations */
export interface GetOrganizationsRequest {
  context: RequestContext | undefined;
}

/** Response containing a list of organizations */
export interface GetOrganizationsResponse {
  organizations: Organization[];
}

export interface GetSchoolYearsRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

export interface GetSchoolYearRequest {
  context: RequestContext | undefined;
  schoolYearId: ObjectId | undefined;
}

export interface GetSchoolYearsResponse {
  schoolYears: SchoolYear[];
}

export interface CreateSchoolYearRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  name: string;
  startDate: Date | undefined;
  endDate: Date | undefined;
}

export interface UpdateSchoolYearRegistrationStatusRequest {
  context: RequestContext | undefined;
  schoolYearId: ObjectId | undefined;
  newRegistrationStatus: boolean;
}

export interface CreateSchoolYearResponse {
  schoolYears: SchoolYear[];
}

export interface StartSchoolYearRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

export interface StartReregistrationRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
}

export interface GetOrganizationByStripeRequest {
  stripeAccountId: string;
}

export interface UpdateStripeIdRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  stripeAcountId: string;
}

export interface UpdateOrganizationStripePaymentInfoRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  stripePayoutsEnabled: boolean;
  stripeDetailsSubmitted: boolean;
  stripeChargesEnabled: boolean;
}

function createBaseGetOrganizationRequest(): GetOrganizationRequest {
  return { context: undefined, organizationId: undefined };
}

export const GetOrganizationRequest: MessageFns<GetOrganizationRequest> = {
  encode(message: GetOrganizationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: GetOrganizationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationRequest>, I>>(base?: I): GetOrganizationRequest {
    return GetOrganizationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationRequest>, I>>(object: I): GetOrganizationRequest {
    const message = createBaseGetOrganizationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseGetOrganizationByDomainRequest(): GetOrganizationByDomainRequest {
  return { context: undefined, domain: "" };
}

export const GetOrganizationByDomainRequest: MessageFns<GetOrganizationByDomainRequest> = {
  encode(message: GetOrganizationByDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationByDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationByDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationByDomainRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
    };
  },

  toJSON(message: GetOrganizationByDomainRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationByDomainRequest>, I>>(base?: I): GetOrganizationByDomainRequest {
    return GetOrganizationByDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationByDomainRequest>, I>>(
    object: I,
  ): GetOrganizationByDomainRequest {
    const message = createBaseGetOrganizationByDomainRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseUnsafeGetOrganizationByOrganizationIdRequest(): UnsafeGetOrganizationByOrganizationIdRequest {
  return { organizationId: undefined };
}

export const UnsafeGetOrganizationByOrganizationIdRequest: MessageFns<UnsafeGetOrganizationByOrganizationIdRequest> = {
  encode(
    message: UnsafeGetOrganizationByOrganizationIdRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnsafeGetOrganizationByOrganizationIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnsafeGetOrganizationByOrganizationIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnsafeGetOrganizationByOrganizationIdRequest {
    return { organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined };
  },

  toJSON(message: UnsafeGetOrganizationByOrganizationIdRequest): unknown {
    const obj: any = {};
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnsafeGetOrganizationByOrganizationIdRequest>, I>>(
    base?: I,
  ): UnsafeGetOrganizationByOrganizationIdRequest {
    return UnsafeGetOrganizationByOrganizationIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnsafeGetOrganizationByOrganizationIdRequest>, I>>(
    object: I,
  ): UnsafeGetOrganizationByOrganizationIdRequest {
    const message = createBaseUnsafeGetOrganizationByOrganizationIdRequest();
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseUnsafeGetOrganizationByDomainRequest(): UnsafeGetOrganizationByDomainRequest {
  return { domain: "" };
}

export const UnsafeGetOrganizationByDomainRequest: MessageFns<UnsafeGetOrganizationByDomainRequest> = {
  encode(message: UnsafeGetOrganizationByDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnsafeGetOrganizationByDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnsafeGetOrganizationByDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnsafeGetOrganizationByDomainRequest {
    return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
  },

  toJSON(message: UnsafeGetOrganizationByDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnsafeGetOrganizationByDomainRequest>, I>>(
    base?: I,
  ): UnsafeGetOrganizationByDomainRequest {
    return UnsafeGetOrganizationByDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnsafeGetOrganizationByDomainRequest>, I>>(
    object: I,
  ): UnsafeGetOrganizationByDomainRequest {
    const message = createBaseUnsafeGetOrganizationByDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseRenameOrganizationRequest(): RenameOrganizationRequest {
  return { context: undefined, organizationId: undefined, newName: "" };
}

export const RenameOrganizationRequest: MessageFns<RenameOrganizationRequest> = {
  encode(message: RenameOrganizationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.newName !== "") {
      writer.uint32(26).string(message.newName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameOrganizationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameOrganizationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenameOrganizationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      newName: isSet(object.newName) ? globalThis.String(object.newName) : "",
    };
  },

  toJSON(message: RenameOrganizationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.newName !== "") {
      obj.newName = message.newName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenameOrganizationRequest>, I>>(base?: I): RenameOrganizationRequest {
    return RenameOrganizationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenameOrganizationRequest>, I>>(object: I): RenameOrganizationRequest {
    const message = createBaseRenameOrganizationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.newName = object.newName ?? "";
    return message;
  },
};

function createBaseUpdateDefaultDomainRequest(): UpdateDefaultDomainRequest {
  return { context: undefined, organizationId: undefined, newDefaultDomain: "" };
}

export const UpdateDefaultDomainRequest: MessageFns<UpdateDefaultDomainRequest> = {
  encode(message: UpdateDefaultDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.newDefaultDomain !== "") {
      writer.uint32(26).string(message.newDefaultDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDefaultDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDefaultDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newDefaultDomain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDefaultDomainRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      newDefaultDomain: isSet(object.newDefaultDomain) ? globalThis.String(object.newDefaultDomain) : "",
    };
  },

  toJSON(message: UpdateDefaultDomainRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.newDefaultDomain !== "") {
      obj.newDefaultDomain = message.newDefaultDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDefaultDomainRequest>, I>>(base?: I): UpdateDefaultDomainRequest {
    return UpdateDefaultDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDefaultDomainRequest>, I>>(object: I): UpdateDefaultDomainRequest {
    const message = createBaseUpdateDefaultDomainRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.newDefaultDomain = object.newDefaultDomain ?? "";
    return message;
  },
};

function createBaseAddDomainRequest(): AddDomainRequest {
  return { context: undefined, organizationId: undefined, newDomain: "" };
}

export const AddDomainRequest: MessageFns<AddDomainRequest> = {
  encode(message: AddDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.newDomain !== "") {
      writer.uint32(26).string(message.newDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newDomain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddDomainRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      newDomain: isSet(object.newDomain) ? globalThis.String(object.newDomain) : "",
    };
  },

  toJSON(message: AddDomainRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.newDomain !== "") {
      obj.newDomain = message.newDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddDomainRequest>, I>>(base?: I): AddDomainRequest {
    return AddDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddDomainRequest>, I>>(object: I): AddDomainRequest {
    const message = createBaseAddDomainRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.newDomain = object.newDomain ?? "";
    return message;
  },
};

function createBaseRemoveDomainRequest(): RemoveDomainRequest {
  return { context: undefined, organizationId: undefined, removeDomain: "" };
}

export const RemoveDomainRequest: MessageFns<RemoveDomainRequest> = {
  encode(message: RemoveDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.removeDomain !== "") {
      writer.uint32(26).string(message.removeDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.removeDomain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveDomainRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      removeDomain: isSet(object.removeDomain) ? globalThis.String(object.removeDomain) : "",
    };
  },

  toJSON(message: RemoveDomainRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.removeDomain !== "") {
      obj.removeDomain = message.removeDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveDomainRequest>, I>>(base?: I): RemoveDomainRequest {
    return RemoveDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveDomainRequest>, I>>(object: I): RemoveDomainRequest {
    const message = createBaseRemoveDomainRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.removeDomain = object.removeDomain ?? "";
    return message;
  },
};

function createBaseUpdateOrganizationSettingsRequest(): UpdateOrganizationSettingsRequest {
  return {
    context: undefined,
    organizationId: undefined,
    name: "",
    domains: [],
    defaultDomain: "",
    countryCode: "",
    currency: Currency.USD,
  };
}

export const UpdateOrganizationSettingsRequest: MessageFns<UpdateOrganizationSettingsRequest> = {
  encode(message: UpdateOrganizationSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.domains) {
      writer.uint32(34).string(v!);
    }
    if (message.defaultDomain !== "") {
      writer.uint32(42).string(message.defaultDomain);
    }
    if (message.countryCode !== "") {
      writer.uint32(50).string(message.countryCode);
    }
    if (message.currency !== Currency.USD) {
      writer.uint32(56).int32(currencyToNumber(message.currency));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrganizationSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrganizationSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.domains.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.defaultDomain = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.currency = currencyFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrganizationSettingsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      domains: globalThis.Array.isArray(object?.domains) ? object.domains.map((e: any) => globalThis.String(e)) : [],
      defaultDomain: isSet(object.defaultDomain) ? globalThis.String(object.defaultDomain) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      currency: isSet(object.currency) ? currencyFromJSON(object.currency) : Currency.USD,
    };
  },

  toJSON(message: UpdateOrganizationSettingsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.domains?.length) {
      obj.domains = message.domains;
    }
    if (message.defaultDomain !== "") {
      obj.defaultDomain = message.defaultDomain;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.currency !== Currency.USD) {
      obj.currency = currencyToJSON(message.currency);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrganizationSettingsRequest>, I>>(
    base?: I,
  ): UpdateOrganizationSettingsRequest {
    return UpdateOrganizationSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrganizationSettingsRequest>, I>>(
    object: I,
  ): UpdateOrganizationSettingsRequest {
    const message = createBaseUpdateOrganizationSettingsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.name = object.name ?? "";
    message.domains = object.domains?.map((e) => e) || [];
    message.defaultDomain = object.defaultDomain ?? "";
    message.countryCode = object.countryCode ?? "";
    message.currency = object.currency ?? Currency.USD;
    return message;
  },
};

function createBaseGetOrganizationsRequest(): GetOrganizationsRequest {
  return { context: undefined };
}

export const GetOrganizationsRequest: MessageFns<GetOrganizationsRequest> = {
  encode(message: GetOrganizationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationsRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetOrganizationsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationsRequest>, I>>(base?: I): GetOrganizationsRequest {
    return GetOrganizationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationsRequest>, I>>(object: I): GetOrganizationsRequest {
    const message = createBaseGetOrganizationsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetOrganizationsResponse(): GetOrganizationsResponse {
  return { organizations: [] };
}

export const GetOrganizationsResponse: MessageFns<GetOrganizationsResponse> = {
  encode(message: GetOrganizationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.organizations) {
      Organization.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizations.push(Organization.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationsResponse {
    return {
      organizations: globalThis.Array.isArray(object?.organizations)
        ? object.organizations.map((e: any) => Organization.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetOrganizationsResponse): unknown {
    const obj: any = {};
    if (message.organizations?.length) {
      obj.organizations = message.organizations.map((e) => Organization.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationsResponse>, I>>(base?: I): GetOrganizationsResponse {
    return GetOrganizationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationsResponse>, I>>(object: I): GetOrganizationsResponse {
    const message = createBaseGetOrganizationsResponse();
    message.organizations = object.organizations?.map((e) => Organization.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSchoolYearsRequest(): GetSchoolYearsRequest {
  return { context: undefined, organizationId: undefined };
}

export const GetSchoolYearsRequest: MessageFns<GetSchoolYearsRequest> = {
  encode(message: GetSchoolYearsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSchoolYearsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSchoolYearsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSchoolYearsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: GetSchoolYearsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSchoolYearsRequest>, I>>(base?: I): GetSchoolYearsRequest {
    return GetSchoolYearsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSchoolYearsRequest>, I>>(object: I): GetSchoolYearsRequest {
    const message = createBaseGetSchoolYearsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseGetSchoolYearRequest(): GetSchoolYearRequest {
  return { context: undefined, schoolYearId: undefined };
}

export const GetSchoolYearRequest: MessageFns<GetSchoolYearRequest> = {
  encode(message: GetSchoolYearRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.schoolYearId !== undefined) {
      ObjectId.encode(message.schoolYearId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSchoolYearRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSchoolYearRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schoolYearId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSchoolYearRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      schoolYearId: isSet(object.schoolYearId) ? ObjectId.fromJSON(object.schoolYearId) : undefined,
    };
  },

  toJSON(message: GetSchoolYearRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.schoolYearId !== undefined) {
      obj.schoolYearId = ObjectId.toJSON(message.schoolYearId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSchoolYearRequest>, I>>(base?: I): GetSchoolYearRequest {
    return GetSchoolYearRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSchoolYearRequest>, I>>(object: I): GetSchoolYearRequest {
    const message = createBaseGetSchoolYearRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
      ? ObjectId.fromPartial(object.schoolYearId)
      : undefined;
    return message;
  },
};

function createBaseGetSchoolYearsResponse(): GetSchoolYearsResponse {
  return { schoolYears: [] };
}

export const GetSchoolYearsResponse: MessageFns<GetSchoolYearsResponse> = {
  encode(message: GetSchoolYearsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.schoolYears) {
      SchoolYear.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSchoolYearsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSchoolYearsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schoolYears.push(SchoolYear.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSchoolYearsResponse {
    return {
      schoolYears: globalThis.Array.isArray(object?.schoolYears)
        ? object.schoolYears.map((e: any) => SchoolYear.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetSchoolYearsResponse): unknown {
    const obj: any = {};
    if (message.schoolYears?.length) {
      obj.schoolYears = message.schoolYears.map((e) => SchoolYear.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSchoolYearsResponse>, I>>(base?: I): GetSchoolYearsResponse {
    return GetSchoolYearsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSchoolYearsResponse>, I>>(object: I): GetSchoolYearsResponse {
    const message = createBaseGetSchoolYearsResponse();
    message.schoolYears = object.schoolYears?.map((e) => SchoolYear.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateSchoolYearRequest(): CreateSchoolYearRequest {
  return { context: undefined, organizationId: undefined, name: "", startDate: undefined, endDate: undefined };
}

export const CreateSchoolYearRequest: MessageFns<CreateSchoolYearRequest> = {
  encode(message: CreateSchoolYearRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSchoolYearRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSchoolYearRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSchoolYearRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
    };
  },

  toJSON(message: CreateSchoolYearRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSchoolYearRequest>, I>>(base?: I): CreateSchoolYearRequest {
    return CreateSchoolYearRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSchoolYearRequest>, I>>(object: I): CreateSchoolYearRequest {
    const message = createBaseCreateSchoolYearRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.name = object.name ?? "";
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    return message;
  },
};

function createBaseUpdateSchoolYearRegistrationStatusRequest(): UpdateSchoolYearRegistrationStatusRequest {
  return { context: undefined, schoolYearId: undefined, newRegistrationStatus: false };
}

export const UpdateSchoolYearRegistrationStatusRequest: MessageFns<UpdateSchoolYearRegistrationStatusRequest> = {
  encode(message: UpdateSchoolYearRegistrationStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.schoolYearId !== undefined) {
      ObjectId.encode(message.schoolYearId, writer.uint32(18).fork()).join();
    }
    if (message.newRegistrationStatus !== false) {
      writer.uint32(24).bool(message.newRegistrationStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSchoolYearRegistrationStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSchoolYearRegistrationStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schoolYearId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.newRegistrationStatus = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSchoolYearRegistrationStatusRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      schoolYearId: isSet(object.schoolYearId) ? ObjectId.fromJSON(object.schoolYearId) : undefined,
      newRegistrationStatus: isSet(object.newRegistrationStatus)
        ? globalThis.Boolean(object.newRegistrationStatus)
        : false,
    };
  },

  toJSON(message: UpdateSchoolYearRegistrationStatusRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.schoolYearId !== undefined) {
      obj.schoolYearId = ObjectId.toJSON(message.schoolYearId);
    }
    if (message.newRegistrationStatus !== false) {
      obj.newRegistrationStatus = message.newRegistrationStatus;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSchoolYearRegistrationStatusRequest>, I>>(
    base?: I,
  ): UpdateSchoolYearRegistrationStatusRequest {
    return UpdateSchoolYearRegistrationStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSchoolYearRegistrationStatusRequest>, I>>(
    object: I,
  ): UpdateSchoolYearRegistrationStatusRequest {
    const message = createBaseUpdateSchoolYearRegistrationStatusRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
      ? ObjectId.fromPartial(object.schoolYearId)
      : undefined;
    message.newRegistrationStatus = object.newRegistrationStatus ?? false;
    return message;
  },
};

function createBaseCreateSchoolYearResponse(): CreateSchoolYearResponse {
  return { schoolYears: [] };
}

export const CreateSchoolYearResponse: MessageFns<CreateSchoolYearResponse> = {
  encode(message: CreateSchoolYearResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.schoolYears) {
      SchoolYear.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSchoolYearResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSchoolYearResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schoolYears.push(SchoolYear.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSchoolYearResponse {
    return {
      schoolYears: globalThis.Array.isArray(object?.schoolYears)
        ? object.schoolYears.map((e: any) => SchoolYear.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateSchoolYearResponse): unknown {
    const obj: any = {};
    if (message.schoolYears?.length) {
      obj.schoolYears = message.schoolYears.map((e) => SchoolYear.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSchoolYearResponse>, I>>(base?: I): CreateSchoolYearResponse {
    return CreateSchoolYearResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSchoolYearResponse>, I>>(object: I): CreateSchoolYearResponse {
    const message = createBaseCreateSchoolYearResponse();
    message.schoolYears = object.schoolYears?.map((e) => SchoolYear.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStartSchoolYearRequest(): StartSchoolYearRequest {
  return { context: undefined, organizationId: undefined };
}

export const StartSchoolYearRequest: MessageFns<StartSchoolYearRequest> = {
  encode(message: StartSchoolYearRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSchoolYearRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSchoolYearRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSchoolYearRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: StartSchoolYearRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSchoolYearRequest>, I>>(base?: I): StartSchoolYearRequest {
    return StartSchoolYearRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSchoolYearRequest>, I>>(object: I): StartSchoolYearRequest {
    const message = createBaseStartSchoolYearRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseStartReregistrationRequest(): StartReregistrationRequest {
  return { context: undefined, organizationId: undefined };
}

export const StartReregistrationRequest: MessageFns<StartReregistrationRequest> = {
  encode(message: StartReregistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartReregistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartReregistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartReregistrationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
    };
  },

  toJSON(message: StartReregistrationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartReregistrationRequest>, I>>(base?: I): StartReregistrationRequest {
    return StartReregistrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartReregistrationRequest>, I>>(object: I): StartReregistrationRequest {
    const message = createBaseStartReregistrationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    return message;
  },
};

function createBaseGetOrganizationByStripeRequest(): GetOrganizationByStripeRequest {
  return { stripeAccountId: "" };
}

export const GetOrganizationByStripeRequest: MessageFns<GetOrganizationByStripeRequest> = {
  encode(message: GetOrganizationByStripeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stripeAccountId !== "") {
      writer.uint32(10).string(message.stripeAccountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationByStripeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationByStripeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stripeAccountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationByStripeRequest {
    return { stripeAccountId: isSet(object.stripeAccountId) ? globalThis.String(object.stripeAccountId) : "" };
  },

  toJSON(message: GetOrganizationByStripeRequest): unknown {
    const obj: any = {};
    if (message.stripeAccountId !== "") {
      obj.stripeAccountId = message.stripeAccountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationByStripeRequest>, I>>(base?: I): GetOrganizationByStripeRequest {
    return GetOrganizationByStripeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationByStripeRequest>, I>>(
    object: I,
  ): GetOrganizationByStripeRequest {
    const message = createBaseGetOrganizationByStripeRequest();
    message.stripeAccountId = object.stripeAccountId ?? "";
    return message;
  },
};

function createBaseUpdateStripeIdRequest(): UpdateStripeIdRequest {
  return { context: undefined, organizationId: undefined, stripeAcountId: "" };
}

export const UpdateStripeIdRequest: MessageFns<UpdateStripeIdRequest> = {
  encode(message: UpdateStripeIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.stripeAcountId !== "") {
      writer.uint32(26).string(message.stripeAcountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStripeIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStripeIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stripeAcountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStripeIdRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      stripeAcountId: isSet(object.stripeAcountId) ? globalThis.String(object.stripeAcountId) : "",
    };
  },

  toJSON(message: UpdateStripeIdRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.stripeAcountId !== "") {
      obj.stripeAcountId = message.stripeAcountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStripeIdRequest>, I>>(base?: I): UpdateStripeIdRequest {
    return UpdateStripeIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStripeIdRequest>, I>>(object: I): UpdateStripeIdRequest {
    const message = createBaseUpdateStripeIdRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.stripeAcountId = object.stripeAcountId ?? "";
    return message;
  },
};

function createBaseUpdateOrganizationStripePaymentInfoRequest(): UpdateOrganizationStripePaymentInfoRequest {
  return {
    context: undefined,
    organizationId: undefined,
    stripePayoutsEnabled: false,
    stripeDetailsSubmitted: false,
    stripeChargesEnabled: false,
  };
}

export const UpdateOrganizationStripePaymentInfoRequest: MessageFns<UpdateOrganizationStripePaymentInfoRequest> = {
  encode(message: UpdateOrganizationStripePaymentInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.stripePayoutsEnabled !== false) {
      writer.uint32(24).bool(message.stripePayoutsEnabled);
    }
    if (message.stripeDetailsSubmitted !== false) {
      writer.uint32(32).bool(message.stripeDetailsSubmitted);
    }
    if (message.stripeChargesEnabled !== false) {
      writer.uint32(40).bool(message.stripeChargesEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrganizationStripePaymentInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrganizationStripePaymentInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stripePayoutsEnabled = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.stripeDetailsSubmitted = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.stripeChargesEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrganizationStripePaymentInfoRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      stripePayoutsEnabled: isSet(object.stripePayoutsEnabled)
        ? globalThis.Boolean(object.stripePayoutsEnabled)
        : false,
      stripeDetailsSubmitted: isSet(object.stripeDetailsSubmitted)
        ? globalThis.Boolean(object.stripeDetailsSubmitted)
        : false,
      stripeChargesEnabled: isSet(object.stripeChargesEnabled)
        ? globalThis.Boolean(object.stripeChargesEnabled)
        : false,
    };
  },

  toJSON(message: UpdateOrganizationStripePaymentInfoRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.stripePayoutsEnabled !== false) {
      obj.stripePayoutsEnabled = message.stripePayoutsEnabled;
    }
    if (message.stripeDetailsSubmitted !== false) {
      obj.stripeDetailsSubmitted = message.stripeDetailsSubmitted;
    }
    if (message.stripeChargesEnabled !== false) {
      obj.stripeChargesEnabled = message.stripeChargesEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrganizationStripePaymentInfoRequest>, I>>(
    base?: I,
  ): UpdateOrganizationStripePaymentInfoRequest {
    return UpdateOrganizationStripePaymentInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrganizationStripePaymentInfoRequest>, I>>(
    object: I,
  ): UpdateOrganizationStripePaymentInfoRequest {
    const message = createBaseUpdateOrganizationStripePaymentInfoRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.stripePayoutsEnabled = object.stripePayoutsEnabled ?? false;
    message.stripeDetailsSubmitted = object.stripeDetailsSubmitted ?? false;
    message.stripeChargesEnabled = object.stripeChargesEnabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
