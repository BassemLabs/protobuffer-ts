// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/transaction_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { PaymentType, paymentTypeFromJSON, paymentTypeToJSON, paymentTypeToNumber, Transaction } from "./transaction";

export const protobufPackage = "payment_service_transaction";

export interface GetPaidTransactionRequest {
  context: RequestContext | undefined;
  user: ObjectId | undefined;
  description: string;
}

export interface GetTransactionsRequest {
  context: RequestContext | undefined;
  user: ObjectId | undefined;
}

export interface GetTransactionsResponse {
  transactions: Transaction[];
}

export interface CreateManualTransactionRequest {
  context: RequestContext | undefined;
  paymentType: PaymentType;
  invoiceId: ObjectId | undefined;
  amount: number;
}

export interface IssueRefundRequest {
  context: RequestContext | undefined;
  transactionId: ObjectId | undefined;
  paymentType: PaymentType;
  amount: number;
  reason?: string | undefined;
}

function createBaseGetPaidTransactionRequest(): GetPaidTransactionRequest {
  return { context: undefined, user: undefined, description: "" };
}

export const GetPaidTransactionRequest: MessageFns<GetPaidTransactionRequest> = {
  encode(message: GetPaidTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      ObjectId.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPaidTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPaidTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPaidTransactionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      user: isSet(object.user) ? ObjectId.fromJSON(object.user) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: GetPaidTransactionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.user !== undefined) {
      obj.user = ObjectId.toJSON(message.user);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPaidTransactionRequest>, I>>(base?: I): GetPaidTransactionRequest {
    return GetPaidTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPaidTransactionRequest>, I>>(object: I): GetPaidTransactionRequest {
    const message = createBaseGetPaidTransactionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? ObjectId.fromPartial(object.user) : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseGetTransactionsRequest(): GetTransactionsRequest {
  return { context: undefined, user: undefined };
}

export const GetTransactionsRequest: MessageFns<GetTransactionsRequest> = {
  encode(message: GetTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      ObjectId.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransactionsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      user: isSet(object.user) ? ObjectId.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: GetTransactionsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.user !== undefined) {
      obj.user = ObjectId.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTransactionsRequest>, I>>(base?: I): GetTransactionsRequest {
    return GetTransactionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTransactionsRequest>, I>>(object: I): GetTransactionsRequest {
    const message = createBaseGetTransactionsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? ObjectId.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseGetTransactionsResponse(): GetTransactionsResponse {
  return { transactions: [] };
}

export const GetTransactionsResponse: MessageFns<GetTransactionsResponse> = {
  encode(message: GetTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transactions) {
      Transaction.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transactions.push(Transaction.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransactionsResponse {
    return {
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => Transaction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetTransactionsResponse): unknown {
    const obj: any = {};
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => Transaction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTransactionsResponse>, I>>(base?: I): GetTransactionsResponse {
    return GetTransactionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTransactionsResponse>, I>>(object: I): GetTransactionsResponse {
    const message = createBaseGetTransactionsResponse();
    message.transactions = object.transactions?.map((e) => Transaction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateManualTransactionRequest(): CreateManualTransactionRequest {
  return { context: undefined, paymentType: PaymentType.Stripe, invoiceId: undefined, amount: 0 };
}

export const CreateManualTransactionRequest: MessageFns<CreateManualTransactionRequest> = {
  encode(message: CreateManualTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.paymentType !== PaymentType.Stripe) {
      writer.uint32(16).int32(paymentTypeToNumber(message.paymentType));
    }
    if (message.invoiceId !== undefined) {
      ObjectId.encode(message.invoiceId, writer.uint32(26).fork()).join();
    }
    if (message.amount !== 0) {
      writer.uint32(33).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManualTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManualTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.paymentType = paymentTypeFromJSON(reader.int32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.invoiceId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.amount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManualTransactionRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      paymentType: isSet(object.paymentType) ? paymentTypeFromJSON(object.paymentType) : PaymentType.Stripe,
      invoiceId: isSet(object.invoiceId) ? ObjectId.fromJSON(object.invoiceId) : undefined,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CreateManualTransactionRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.paymentType !== PaymentType.Stripe) {
      obj.paymentType = paymentTypeToJSON(message.paymentType);
    }
    if (message.invoiceId !== undefined) {
      obj.invoiceId = ObjectId.toJSON(message.invoiceId);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateManualTransactionRequest>, I>>(base?: I): CreateManualTransactionRequest {
    return CreateManualTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateManualTransactionRequest>, I>>(
    object: I,
  ): CreateManualTransactionRequest {
    const message = createBaseCreateManualTransactionRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.paymentType = object.paymentType ?? PaymentType.Stripe;
    message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
      ? ObjectId.fromPartial(object.invoiceId)
      : undefined;
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseIssueRefundRequest(): IssueRefundRequest {
  return { context: undefined, transactionId: undefined, paymentType: PaymentType.Stripe, amount: 0, reason: "" };
}

export const IssueRefundRequest: MessageFns<IssueRefundRequest> = {
  encode(message: IssueRefundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.transactionId !== undefined) {
      ObjectId.encode(message.transactionId, writer.uint32(18).fork()).join();
    }
    if (message.paymentType !== PaymentType.Stripe) {
      writer.uint32(24).int32(paymentTypeToNumber(message.paymentType));
    }
    if (message.amount !== 0) {
      writer.uint32(33).double(message.amount);
    }
    if (message.reason !== undefined && message.reason !== "") {
      writer.uint32(42).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssueRefundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueRefundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transactionId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.paymentType = paymentTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.amount = reader.double();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueRefundRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      transactionId: isSet(object.transactionId) ? ObjectId.fromJSON(object.transactionId) : undefined,
      paymentType: isSet(object.paymentType) ? paymentTypeFromJSON(object.paymentType) : PaymentType.Stripe,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: IssueRefundRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.transactionId !== undefined) {
      obj.transactionId = ObjectId.toJSON(message.transactionId);
    }
    if (message.paymentType !== PaymentType.Stripe) {
      obj.paymentType = paymentTypeToJSON(message.paymentType);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.reason !== undefined && message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueRefundRequest>, I>>(base?: I): IssueRefundRequest {
    return IssueRefundRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IssueRefundRequest>, I>>(object: I): IssueRefundRequest {
    const message = createBaseIssueRefundRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)
      ? ObjectId.fromPartial(object.transactionId)
      : undefined;
    message.paymentType = object.paymentType ?? PaymentType.Stripe;
    message.amount = object.amount ?? 0;
    message.reason = object.reason ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
