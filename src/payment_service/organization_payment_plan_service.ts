// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/organization_payment_plan_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Currency, currencyFromJSON, currencyToJSON, currencyToNumber } from "../organization_service/organization";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import {
  OrganizationPaymentPlan,
  OrganizationPaymentPlanInformation,
  OrganizationPlanAccess,
  PaymentInterval,
  paymentIntervalFromJSON,
  paymentIntervalToJSON,
  paymentIntervalToNumber,
} from "./organization_payment_plan";

export const protobufPackage = "payment_service";

export interface GetAllPaymentPlansRequest {
  context: RequestContext | undefined;
}

export interface GetPaymentPlansResponse {
  paymentPlans: OrganizationPaymentPlan[];
}

export interface CreatePaymentPlanRequest {
  context: RequestContext | undefined;
  name: string;
  description: string;
  currency: Currency;
  isPublic: boolean;
  upfrontCost: number;
  upfrontCostPaymentInterval: PaymentInterval;
  perStudentCost: number;
  paymentProcessingPercentage: number;
}

export interface GetOrganizationVisiblePlansRequest {
  context: RequestContext | undefined;
}

export interface GetAllPaymentPlanAccessRequest {
  context: RequestContext | undefined;
}

export interface GetAllPaymentPlanAccessResponse {
  organizationPlanAccess: OrganizationPlanAccess[];
}

export interface MakePaymentPlanAccessibleForOrganizationRequest {
  context: RequestContext | undefined;
  organizationId: ObjectId | undefined;
  paymentPlanId: ObjectId | undefined;
}

export interface AssignPaymentPlanToOrganizationRequest {
  context: RequestContext | undefined;
  paymentPlanId: ObjectId | undefined;
  deferPerStudentCostToParent: boolean;
}

export interface GetOrganizationActiveOrgPaymentPlanInfoRequest {
  context: RequestContext | undefined;
}

export interface GetOrgsPaymentPlanInfoRequest {
  context: RequestContext | undefined;
}

export interface GetOrgsPaymentPlanInfoResponse {
  orgPaymentPlanInfo: OrganizationPaymentPlanInformation[];
}

function createBaseGetAllPaymentPlansRequest(): GetAllPaymentPlansRequest {
  return { context: undefined };
}

export const GetAllPaymentPlansRequest: MessageFns<GetAllPaymentPlansRequest> = {
  encode(message: GetAllPaymentPlansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPaymentPlansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPaymentPlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPaymentPlansRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetAllPaymentPlansRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPaymentPlansRequest>, I>>(base?: I): GetAllPaymentPlansRequest {
    return GetAllPaymentPlansRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPaymentPlansRequest>, I>>(object: I): GetAllPaymentPlansRequest {
    const message = createBaseGetAllPaymentPlansRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetPaymentPlansResponse(): GetPaymentPlansResponse {
  return { paymentPlans: [] };
}

export const GetPaymentPlansResponse: MessageFns<GetPaymentPlansResponse> = {
  encode(message: GetPaymentPlansResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.paymentPlans) {
      OrganizationPaymentPlan.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPaymentPlansResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPaymentPlansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.paymentPlans.push(OrganizationPaymentPlan.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPaymentPlansResponse {
    return {
      paymentPlans: globalThis.Array.isArray(object?.paymentPlans)
        ? object.paymentPlans.map((e: any) => OrganizationPaymentPlan.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPaymentPlansResponse): unknown {
    const obj: any = {};
    if (message.paymentPlans?.length) {
      obj.paymentPlans = message.paymentPlans.map((e) => OrganizationPaymentPlan.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPaymentPlansResponse>, I>>(base?: I): GetPaymentPlansResponse {
    return GetPaymentPlansResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPaymentPlansResponse>, I>>(object: I): GetPaymentPlansResponse {
    const message = createBaseGetPaymentPlansResponse();
    message.paymentPlans = object.paymentPlans?.map((e) => OrganizationPaymentPlan.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePaymentPlanRequest(): CreatePaymentPlanRequest {
  return {
    context: undefined,
    name: "",
    description: "",
    currency: Currency.USD,
    isPublic: false,
    upfrontCost: 0,
    upfrontCostPaymentInterval: PaymentInterval.Monthly,
    perStudentCost: 0,
    paymentProcessingPercentage: 0,
  };
}

export const CreatePaymentPlanRequest: MessageFns<CreatePaymentPlanRequest> = {
  encode(message: CreatePaymentPlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.currency !== Currency.USD) {
      writer.uint32(32).int32(currencyToNumber(message.currency));
    }
    if (message.isPublic !== false) {
      writer.uint32(40).bool(message.isPublic);
    }
    if (message.upfrontCost !== 0) {
      writer.uint32(49).double(message.upfrontCost);
    }
    if (message.upfrontCostPaymentInterval !== PaymentInterval.Monthly) {
      writer.uint32(56).int32(paymentIntervalToNumber(message.upfrontCostPaymentInterval));
    }
    if (message.perStudentCost !== 0) {
      writer.uint32(65).double(message.perStudentCost);
    }
    if (message.paymentProcessingPercentage !== 0) {
      writer.uint32(73).double(message.paymentProcessingPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentPlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.currency = currencyFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.upfrontCost = reader.double();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.upfrontCostPaymentInterval = paymentIntervalFromJSON(reader.int32());
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.perStudentCost = reader.double();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.paymentProcessingPercentage = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentPlanRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      currency: isSet(object.currency) ? currencyFromJSON(object.currency) : Currency.USD,
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      upfrontCost: isSet(object.upfrontCost) ? globalThis.Number(object.upfrontCost) : 0,
      upfrontCostPaymentInterval: isSet(object.upfrontCostPaymentInterval)
        ? paymentIntervalFromJSON(object.upfrontCostPaymentInterval)
        : PaymentInterval.Monthly,
      perStudentCost: isSet(object.perStudentCost) ? globalThis.Number(object.perStudentCost) : 0,
      paymentProcessingPercentage: isSet(object.paymentProcessingPercentage)
        ? globalThis.Number(object.paymentProcessingPercentage)
        : 0,
    };
  },

  toJSON(message: CreatePaymentPlanRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.currency !== Currency.USD) {
      obj.currency = currencyToJSON(message.currency);
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.upfrontCost !== 0) {
      obj.upfrontCost = message.upfrontCost;
    }
    if (message.upfrontCostPaymentInterval !== PaymentInterval.Monthly) {
      obj.upfrontCostPaymentInterval = paymentIntervalToJSON(message.upfrontCostPaymentInterval);
    }
    if (message.perStudentCost !== 0) {
      obj.perStudentCost = message.perStudentCost;
    }
    if (message.paymentProcessingPercentage !== 0) {
      obj.paymentProcessingPercentage = message.paymentProcessingPercentage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePaymentPlanRequest>, I>>(base?: I): CreatePaymentPlanRequest {
    return CreatePaymentPlanRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePaymentPlanRequest>, I>>(object: I): CreatePaymentPlanRequest {
    const message = createBaseCreatePaymentPlanRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.currency = object.currency ?? Currency.USD;
    message.isPublic = object.isPublic ?? false;
    message.upfrontCost = object.upfrontCost ?? 0;
    message.upfrontCostPaymentInterval = object.upfrontCostPaymentInterval ?? PaymentInterval.Monthly;
    message.perStudentCost = object.perStudentCost ?? 0;
    message.paymentProcessingPercentage = object.paymentProcessingPercentage ?? 0;
    return message;
  },
};

function createBaseGetOrganizationVisiblePlansRequest(): GetOrganizationVisiblePlansRequest {
  return { context: undefined };
}

export const GetOrganizationVisiblePlansRequest: MessageFns<GetOrganizationVisiblePlansRequest> = {
  encode(message: GetOrganizationVisiblePlansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationVisiblePlansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationVisiblePlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationVisiblePlansRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetOrganizationVisiblePlansRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationVisiblePlansRequest>, I>>(
    base?: I,
  ): GetOrganizationVisiblePlansRequest {
    return GetOrganizationVisiblePlansRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationVisiblePlansRequest>, I>>(
    object: I,
  ): GetOrganizationVisiblePlansRequest {
    const message = createBaseGetOrganizationVisiblePlansRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetAllPaymentPlanAccessRequest(): GetAllPaymentPlanAccessRequest {
  return { context: undefined };
}

export const GetAllPaymentPlanAccessRequest: MessageFns<GetAllPaymentPlanAccessRequest> = {
  encode(message: GetAllPaymentPlanAccessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPaymentPlanAccessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPaymentPlanAccessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPaymentPlanAccessRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetAllPaymentPlanAccessRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPaymentPlanAccessRequest>, I>>(base?: I): GetAllPaymentPlanAccessRequest {
    return GetAllPaymentPlanAccessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPaymentPlanAccessRequest>, I>>(
    object: I,
  ): GetAllPaymentPlanAccessRequest {
    const message = createBaseGetAllPaymentPlanAccessRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetAllPaymentPlanAccessResponse(): GetAllPaymentPlanAccessResponse {
  return { organizationPlanAccess: [] };
}

export const GetAllPaymentPlanAccessResponse: MessageFns<GetAllPaymentPlanAccessResponse> = {
  encode(message: GetAllPaymentPlanAccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.organizationPlanAccess) {
      OrganizationPlanAccess.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPaymentPlanAccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPaymentPlanAccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizationPlanAccess.push(OrganizationPlanAccess.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPaymentPlanAccessResponse {
    return {
      organizationPlanAccess: globalThis.Array.isArray(object?.organizationPlanAccess)
        ? object.organizationPlanAccess.map((e: any) => OrganizationPlanAccess.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllPaymentPlanAccessResponse): unknown {
    const obj: any = {};
    if (message.organizationPlanAccess?.length) {
      obj.organizationPlanAccess = message.organizationPlanAccess.map((e) => OrganizationPlanAccess.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPaymentPlanAccessResponse>, I>>(base?: I): GetAllPaymentPlanAccessResponse {
    return GetAllPaymentPlanAccessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPaymentPlanAccessResponse>, I>>(
    object: I,
  ): GetAllPaymentPlanAccessResponse {
    const message = createBaseGetAllPaymentPlanAccessResponse();
    message.organizationPlanAccess = object.organizationPlanAccess?.map((e) => OrganizationPlanAccess.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseMakePaymentPlanAccessibleForOrganizationRequest(): MakePaymentPlanAccessibleForOrganizationRequest {
  return { context: undefined, organizationId: undefined, paymentPlanId: undefined };
}

export const MakePaymentPlanAccessibleForOrganizationRequest: MessageFns<
  MakePaymentPlanAccessibleForOrganizationRequest
> = {
  encode(
    message: MakePaymentPlanAccessibleForOrganizationRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.paymentPlanId !== undefined) {
      ObjectId.encode(message.paymentPlanId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MakePaymentPlanAccessibleForOrganizationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMakePaymentPlanAccessibleForOrganizationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.paymentPlanId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MakePaymentPlanAccessibleForOrganizationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      paymentPlanId: isSet(object.paymentPlanId) ? ObjectId.fromJSON(object.paymentPlanId) : undefined,
    };
  },

  toJSON(message: MakePaymentPlanAccessibleForOrganizationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.paymentPlanId !== undefined) {
      obj.paymentPlanId = ObjectId.toJSON(message.paymentPlanId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MakePaymentPlanAccessibleForOrganizationRequest>, I>>(
    base?: I,
  ): MakePaymentPlanAccessibleForOrganizationRequest {
    return MakePaymentPlanAccessibleForOrganizationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MakePaymentPlanAccessibleForOrganizationRequest>, I>>(
    object: I,
  ): MakePaymentPlanAccessibleForOrganizationRequest {
    const message = createBaseMakePaymentPlanAccessibleForOrganizationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.paymentPlanId = (object.paymentPlanId !== undefined && object.paymentPlanId !== null)
      ? ObjectId.fromPartial(object.paymentPlanId)
      : undefined;
    return message;
  },
};

function createBaseAssignPaymentPlanToOrganizationRequest(): AssignPaymentPlanToOrganizationRequest {
  return { context: undefined, paymentPlanId: undefined, deferPerStudentCostToParent: false };
}

export const AssignPaymentPlanToOrganizationRequest: MessageFns<AssignPaymentPlanToOrganizationRequest> = {
  encode(message: AssignPaymentPlanToOrganizationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.paymentPlanId !== undefined) {
      ObjectId.encode(message.paymentPlanId, writer.uint32(18).fork()).join();
    }
    if (message.deferPerStudentCostToParent !== false) {
      writer.uint32(24).bool(message.deferPerStudentCostToParent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignPaymentPlanToOrganizationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignPaymentPlanToOrganizationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.paymentPlanId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.deferPerStudentCostToParent = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignPaymentPlanToOrganizationRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      paymentPlanId: isSet(object.paymentPlanId) ? ObjectId.fromJSON(object.paymentPlanId) : undefined,
      deferPerStudentCostToParent: isSet(object.deferPerStudentCostToParent)
        ? globalThis.Boolean(object.deferPerStudentCostToParent)
        : false,
    };
  },

  toJSON(message: AssignPaymentPlanToOrganizationRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.paymentPlanId !== undefined) {
      obj.paymentPlanId = ObjectId.toJSON(message.paymentPlanId);
    }
    if (message.deferPerStudentCostToParent !== false) {
      obj.deferPerStudentCostToParent = message.deferPerStudentCostToParent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssignPaymentPlanToOrganizationRequest>, I>>(
    base?: I,
  ): AssignPaymentPlanToOrganizationRequest {
    return AssignPaymentPlanToOrganizationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssignPaymentPlanToOrganizationRequest>, I>>(
    object: I,
  ): AssignPaymentPlanToOrganizationRequest {
    const message = createBaseAssignPaymentPlanToOrganizationRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.paymentPlanId = (object.paymentPlanId !== undefined && object.paymentPlanId !== null)
      ? ObjectId.fromPartial(object.paymentPlanId)
      : undefined;
    message.deferPerStudentCostToParent = object.deferPerStudentCostToParent ?? false;
    return message;
  },
};

function createBaseGetOrganizationActiveOrgPaymentPlanInfoRequest(): GetOrganizationActiveOrgPaymentPlanInfoRequest {
  return { context: undefined };
}

export const GetOrganizationActiveOrgPaymentPlanInfoRequest: MessageFns<
  GetOrganizationActiveOrgPaymentPlanInfoRequest
> = {
  encode(
    message: GetOrganizationActiveOrgPaymentPlanInfoRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrganizationActiveOrgPaymentPlanInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrganizationActiveOrgPaymentPlanInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrganizationActiveOrgPaymentPlanInfoRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetOrganizationActiveOrgPaymentPlanInfoRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrganizationActiveOrgPaymentPlanInfoRequest>, I>>(
    base?: I,
  ): GetOrganizationActiveOrgPaymentPlanInfoRequest {
    return GetOrganizationActiveOrgPaymentPlanInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrganizationActiveOrgPaymentPlanInfoRequest>, I>>(
    object: I,
  ): GetOrganizationActiveOrgPaymentPlanInfoRequest {
    const message = createBaseGetOrganizationActiveOrgPaymentPlanInfoRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetOrgsPaymentPlanInfoRequest(): GetOrgsPaymentPlanInfoRequest {
  return { context: undefined };
}

export const GetOrgsPaymentPlanInfoRequest: MessageFns<GetOrgsPaymentPlanInfoRequest> = {
  encode(message: GetOrgsPaymentPlanInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrgsPaymentPlanInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgsPaymentPlanInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgsPaymentPlanInfoRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetOrgsPaymentPlanInfoRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgsPaymentPlanInfoRequest>, I>>(base?: I): GetOrgsPaymentPlanInfoRequest {
    return GetOrgsPaymentPlanInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgsPaymentPlanInfoRequest>, I>>(
    object: I,
  ): GetOrgsPaymentPlanInfoRequest {
    const message = createBaseGetOrgsPaymentPlanInfoRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetOrgsPaymentPlanInfoResponse(): GetOrgsPaymentPlanInfoResponse {
  return { orgPaymentPlanInfo: [] };
}

export const GetOrgsPaymentPlanInfoResponse: MessageFns<GetOrgsPaymentPlanInfoResponse> = {
  encode(message: GetOrgsPaymentPlanInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orgPaymentPlanInfo) {
      OrganizationPaymentPlanInformation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrgsPaymentPlanInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgsPaymentPlanInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgPaymentPlanInfo.push(OrganizationPaymentPlanInformation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgsPaymentPlanInfoResponse {
    return {
      orgPaymentPlanInfo: globalThis.Array.isArray(object?.orgPaymentPlanInfo)
        ? object.orgPaymentPlanInfo.map((e: any) => OrganizationPaymentPlanInformation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetOrgsPaymentPlanInfoResponse): unknown {
    const obj: any = {};
    if (message.orgPaymentPlanInfo?.length) {
      obj.orgPaymentPlanInfo = message.orgPaymentPlanInfo.map((e) => OrganizationPaymentPlanInformation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgsPaymentPlanInfoResponse>, I>>(base?: I): GetOrgsPaymentPlanInfoResponse {
    return GetOrgsPaymentPlanInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgsPaymentPlanInfoResponse>, I>>(
    object: I,
  ): GetOrgsPaymentPlanInfoResponse {
    const message = createBaseGetOrgsPaymentPlanInfoResponse();
    message.orgPaymentPlanInfo =
      object.orgPaymentPlanInfo?.map((e) => OrganizationPaymentPlanInformation.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
