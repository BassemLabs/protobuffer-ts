// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/payment_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { PaymentType, paymentTypeFromJSON, paymentTypeToJSON, paymentTypeToNumber } from "./transaction";

export const protobufPackage = "payment_service";

export interface HandleWebhookRequest {
  payload: string;
  stripeSignature: string;
}

export interface HandleWebhookResponse {
  success: boolean;
}

export interface GetSetupAutoIntentRequest {
  context: RequestContext | undefined;
}

export interface GetSetupAutoIntentResponse {
  setupAutoIntentSecret: string;
}

export interface VerifyMicroDepositsRequest {
  context: RequestContext | undefined;
  first: number;
  second: number;
}

export interface VerifyMicroDepositsResponse {
  success: boolean;
}

export interface CreatePaymentIntentRequest {
  context: RequestContext | undefined;
  paymentType: PaymentType;
  invoiceId: ObjectId | undefined;
  amount: number;
}

export interface CreatePaymentIntentResponse {
  clientSecret: string;
}

export interface OnboardOrganizationStripeAccountRequest {
  context: RequestContext | undefined;
  frontendUrl: string;
}

export interface OnboardOrganizationStripeAccountResponse {
  accountLinkUrl: string;
}

function createBaseHandleWebhookRequest(): HandleWebhookRequest {
  return { payload: "", stripeSignature: "" };
}

export const HandleWebhookRequest: MessageFns<HandleWebhookRequest> = {
  encode(message: HandleWebhookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== "") {
      writer.uint32(10).string(message.payload);
    }
    if (message.stripeSignature !== "") {
      writer.uint32(18).string(message.stripeSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandleWebhookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandleWebhookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stripeSignature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandleWebhookRequest {
    return {
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      stripeSignature: isSet(object.stripeSignature) ? globalThis.String(object.stripeSignature) : "",
    };
  },

  toJSON(message: HandleWebhookRequest): unknown {
    const obj: any = {};
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.stripeSignature !== "") {
      obj.stripeSignature = message.stripeSignature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandleWebhookRequest>, I>>(base?: I): HandleWebhookRequest {
    return HandleWebhookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandleWebhookRequest>, I>>(object: I): HandleWebhookRequest {
    const message = createBaseHandleWebhookRequest();
    message.payload = object.payload ?? "";
    message.stripeSignature = object.stripeSignature ?? "";
    return message;
  },
};

function createBaseHandleWebhookResponse(): HandleWebhookResponse {
  return { success: false };
}

export const HandleWebhookResponse: MessageFns<HandleWebhookResponse> = {
  encode(message: HandleWebhookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandleWebhookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandleWebhookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandleWebhookResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: HandleWebhookResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandleWebhookResponse>, I>>(base?: I): HandleWebhookResponse {
    return HandleWebhookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandleWebhookResponse>, I>>(object: I): HandleWebhookResponse {
    const message = createBaseHandleWebhookResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetSetupAutoIntentRequest(): GetSetupAutoIntentRequest {
  return { context: undefined };
}

export const GetSetupAutoIntentRequest: MessageFns<GetSetupAutoIntentRequest> = {
  encode(message: GetSetupAutoIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSetupAutoIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSetupAutoIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSetupAutoIntentRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetSetupAutoIntentRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSetupAutoIntentRequest>, I>>(base?: I): GetSetupAutoIntentRequest {
    return GetSetupAutoIntentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSetupAutoIntentRequest>, I>>(object: I): GetSetupAutoIntentRequest {
    const message = createBaseGetSetupAutoIntentRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetSetupAutoIntentResponse(): GetSetupAutoIntentResponse {
  return { setupAutoIntentSecret: "" };
}

export const GetSetupAutoIntentResponse: MessageFns<GetSetupAutoIntentResponse> = {
  encode(message: GetSetupAutoIntentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setupAutoIntentSecret !== "") {
      writer.uint32(10).string(message.setupAutoIntentSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSetupAutoIntentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSetupAutoIntentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setupAutoIntentSecret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSetupAutoIntentResponse {
    return {
      setupAutoIntentSecret: isSet(object.setupAutoIntentSecret) ? globalThis.String(object.setupAutoIntentSecret) : "",
    };
  },

  toJSON(message: GetSetupAutoIntentResponse): unknown {
    const obj: any = {};
    if (message.setupAutoIntentSecret !== "") {
      obj.setupAutoIntentSecret = message.setupAutoIntentSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSetupAutoIntentResponse>, I>>(base?: I): GetSetupAutoIntentResponse {
    return GetSetupAutoIntentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSetupAutoIntentResponse>, I>>(object: I): GetSetupAutoIntentResponse {
    const message = createBaseGetSetupAutoIntentResponse();
    message.setupAutoIntentSecret = object.setupAutoIntentSecret ?? "";
    return message;
  },
};

function createBaseVerifyMicroDepositsRequest(): VerifyMicroDepositsRequest {
  return { context: undefined, first: 0, second: 0 };
}

export const VerifyMicroDepositsRequest: MessageFns<VerifyMicroDepositsRequest> = {
  encode(message: VerifyMicroDepositsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.first !== 0) {
      writer.uint32(16).uint32(message.first);
    }
    if (message.second !== 0) {
      writer.uint32(24).uint32(message.second);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMicroDepositsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMicroDepositsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.first = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.second = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMicroDepositsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      first: isSet(object.first) ? globalThis.Number(object.first) : 0,
      second: isSet(object.second) ? globalThis.Number(object.second) : 0,
    };
  },

  toJSON(message: VerifyMicroDepositsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.first !== 0) {
      obj.first = Math.round(message.first);
    }
    if (message.second !== 0) {
      obj.second = Math.round(message.second);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyMicroDepositsRequest>, I>>(base?: I): VerifyMicroDepositsRequest {
    return VerifyMicroDepositsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyMicroDepositsRequest>, I>>(object: I): VerifyMicroDepositsRequest {
    const message = createBaseVerifyMicroDepositsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.first = object.first ?? 0;
    message.second = object.second ?? 0;
    return message;
  },
};

function createBaseVerifyMicroDepositsResponse(): VerifyMicroDepositsResponse {
  return { success: false };
}

export const VerifyMicroDepositsResponse: MessageFns<VerifyMicroDepositsResponse> = {
  encode(message: VerifyMicroDepositsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMicroDepositsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMicroDepositsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMicroDepositsResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: VerifyMicroDepositsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyMicroDepositsResponse>, I>>(base?: I): VerifyMicroDepositsResponse {
    return VerifyMicroDepositsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyMicroDepositsResponse>, I>>(object: I): VerifyMicroDepositsResponse {
    const message = createBaseVerifyMicroDepositsResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCreatePaymentIntentRequest(): CreatePaymentIntentRequest {
  return { context: undefined, paymentType: PaymentType.Stripe, invoiceId: undefined, amount: 0 };
}

export const CreatePaymentIntentRequest: MessageFns<CreatePaymentIntentRequest> = {
  encode(message: CreatePaymentIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.paymentType !== PaymentType.Stripe) {
      writer.uint32(16).int32(paymentTypeToNumber(message.paymentType));
    }
    if (message.invoiceId !== undefined) {
      ObjectId.encode(message.invoiceId, writer.uint32(26).fork()).join();
    }
    if (message.amount !== 0) {
      writer.uint32(33).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.paymentType = paymentTypeFromJSON(reader.int32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.invoiceId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.amount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentIntentRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      paymentType: isSet(object.paymentType) ? paymentTypeFromJSON(object.paymentType) : PaymentType.Stripe,
      invoiceId: isSet(object.invoiceId) ? ObjectId.fromJSON(object.invoiceId) : undefined,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CreatePaymentIntentRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.paymentType !== PaymentType.Stripe) {
      obj.paymentType = paymentTypeToJSON(message.paymentType);
    }
    if (message.invoiceId !== undefined) {
      obj.invoiceId = ObjectId.toJSON(message.invoiceId);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePaymentIntentRequest>, I>>(base?: I): CreatePaymentIntentRequest {
    return CreatePaymentIntentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePaymentIntentRequest>, I>>(object: I): CreatePaymentIntentRequest {
    const message = createBaseCreatePaymentIntentRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.paymentType = object.paymentType ?? PaymentType.Stripe;
    message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
      ? ObjectId.fromPartial(object.invoiceId)
      : undefined;
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseCreatePaymentIntentResponse(): CreatePaymentIntentResponse {
  return { clientSecret: "" };
}

export const CreatePaymentIntentResponse: MessageFns<CreatePaymentIntentResponse> = {
  encode(message: CreatePaymentIntentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientSecret !== "") {
      writer.uint32(10).string(message.clientSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentIntentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentIntentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentIntentResponse {
    return { clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "" };
  },

  toJSON(message: CreatePaymentIntentResponse): unknown {
    const obj: any = {};
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePaymentIntentResponse>, I>>(base?: I): CreatePaymentIntentResponse {
    return CreatePaymentIntentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePaymentIntentResponse>, I>>(object: I): CreatePaymentIntentResponse {
    const message = createBaseCreatePaymentIntentResponse();
    message.clientSecret = object.clientSecret ?? "";
    return message;
  },
};

function createBaseOnboardOrganizationStripeAccountRequest(): OnboardOrganizationStripeAccountRequest {
  return { context: undefined, frontendUrl: "" };
}

export const OnboardOrganizationStripeAccountRequest: MessageFns<OnboardOrganizationStripeAccountRequest> = {
  encode(message: OnboardOrganizationStripeAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.frontendUrl !== "") {
      writer.uint32(18).string(message.frontendUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnboardOrganizationStripeAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnboardOrganizationStripeAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.frontendUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnboardOrganizationStripeAccountRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      frontendUrl: isSet(object.frontendUrl) ? globalThis.String(object.frontendUrl) : "",
    };
  },

  toJSON(message: OnboardOrganizationStripeAccountRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.frontendUrl !== "") {
      obj.frontendUrl = message.frontendUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnboardOrganizationStripeAccountRequest>, I>>(
    base?: I,
  ): OnboardOrganizationStripeAccountRequest {
    return OnboardOrganizationStripeAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnboardOrganizationStripeAccountRequest>, I>>(
    object: I,
  ): OnboardOrganizationStripeAccountRequest {
    const message = createBaseOnboardOrganizationStripeAccountRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.frontendUrl = object.frontendUrl ?? "";
    return message;
  },
};

function createBaseOnboardOrganizationStripeAccountResponse(): OnboardOrganizationStripeAccountResponse {
  return { accountLinkUrl: "" };
}

export const OnboardOrganizationStripeAccountResponse: MessageFns<OnboardOrganizationStripeAccountResponse> = {
  encode(message: OnboardOrganizationStripeAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountLinkUrl !== "") {
      writer.uint32(10).string(message.accountLinkUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnboardOrganizationStripeAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnboardOrganizationStripeAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountLinkUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnboardOrganizationStripeAccountResponse {
    return { accountLinkUrl: isSet(object.accountLinkUrl) ? globalThis.String(object.accountLinkUrl) : "" };
  },

  toJSON(message: OnboardOrganizationStripeAccountResponse): unknown {
    const obj: any = {};
    if (message.accountLinkUrl !== "") {
      obj.accountLinkUrl = message.accountLinkUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnboardOrganizationStripeAccountResponse>, I>>(
    base?: I,
  ): OnboardOrganizationStripeAccountResponse {
    return OnboardOrganizationStripeAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnboardOrganizationStripeAccountResponse>, I>>(
    object: I,
  ): OnboardOrganizationStripeAccountResponse {
    const message = createBaseOnboardOrganizationStripeAccountResponse();
    message.accountLinkUrl = object.accountLinkUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
