// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/organization_payment_plan.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { Currency, currencyFromJSON, currencyToJSON, currencyToNumber } from "../organization_service/organization";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "payment_service";

export enum PaymentInterval {
  Monthly = "Monthly",
  Quarterly = "Quarterly",
  SemiAnnually = "SemiAnnually",
  Annually = "Annually",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function paymentIntervalFromJSON(object: any): PaymentInterval {
  switch (object) {
    case 1:
    case "Monthly":
      return PaymentInterval.Monthly;
    case 2:
    case "Quarterly":
      return PaymentInterval.Quarterly;
    case 3:
    case "SemiAnnually":
      return PaymentInterval.SemiAnnually;
    case 4:
    case "Annually":
      return PaymentInterval.Annually;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentInterval.UNRECOGNIZED;
  }
}

export function paymentIntervalToJSON(object: PaymentInterval): string {
  switch (object) {
    case PaymentInterval.Monthly:
      return "Monthly";
    case PaymentInterval.Quarterly:
      return "Quarterly";
    case PaymentInterval.SemiAnnually:
      return "SemiAnnually";
    case PaymentInterval.Annually:
      return "Annually";
    case PaymentInterval.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function paymentIntervalToNumber(object: PaymentInterval): number {
  switch (object) {
    case PaymentInterval.Monthly:
      return 1;
    case PaymentInterval.Quarterly:
      return 2;
    case PaymentInterval.SemiAnnually:
      return 3;
    case PaymentInterval.Annually:
      return 4;
    case PaymentInterval.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface OrganizationPaymentPlan {
  id: ObjectId | undefined;
  name: string;
  description: string;
  currency: Currency;
  isPublic: boolean;
  isActive: boolean;
  upfrontCost: number;
  upfrontCostPaymentInterval: PaymentInterval;
  perStudentCost: number;
  paymentProcessingPercentage: number;
}

export interface OrganizationPlanAccess {
  organizationId: ObjectId | undefined;
  paymentPlanId: ObjectId | undefined;
}

export interface OrganizationPaymentPlanInformation {
  id: ObjectId | undefined;
  organizationId: ObjectId | undefined;
  paymentPlan: ObjectId | undefined;
  deferPerStudentCostToParent: boolean;
  startDate: Date | undefined;
  endDate: Date | undefined;
}

function createBaseOrganizationPaymentPlan(): OrganizationPaymentPlan {
  return {
    id: undefined,
    name: "",
    description: "",
    currency: Currency.USD,
    isPublic: false,
    isActive: false,
    upfrontCost: 0,
    upfrontCostPaymentInterval: PaymentInterval.Monthly,
    perStudentCost: 0,
    paymentProcessingPercentage: 0,
  };
}

export const OrganizationPaymentPlan: MessageFns<OrganizationPaymentPlan> = {
  encode(message: OrganizationPaymentPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.currency !== Currency.USD) {
      writer.uint32(32).int32(currencyToNumber(message.currency));
    }
    if (message.isPublic !== false) {
      writer.uint32(40).bool(message.isPublic);
    }
    if (message.isActive !== false) {
      writer.uint32(48).bool(message.isActive);
    }
    if (message.upfrontCost !== 0) {
      writer.uint32(57).double(message.upfrontCost);
    }
    if (message.upfrontCostPaymentInterval !== PaymentInterval.Monthly) {
      writer.uint32(64).int32(paymentIntervalToNumber(message.upfrontCostPaymentInterval));
    }
    if (message.perStudentCost !== 0) {
      writer.uint32(73).double(message.perStudentCost);
    }
    if (message.paymentProcessingPercentage !== 0) {
      writer.uint32(81).double(message.paymentProcessingPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationPaymentPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationPaymentPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.currency = currencyFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.upfrontCost = reader.double();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.upfrontCostPaymentInterval = paymentIntervalFromJSON(reader.int32());
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.perStudentCost = reader.double();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.paymentProcessingPercentage = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationPaymentPlan {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      currency: isSet(object.currency) ? currencyFromJSON(object.currency) : Currency.USD,
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      upfrontCost: isSet(object.upfrontCost) ? globalThis.Number(object.upfrontCost) : 0,
      upfrontCostPaymentInterval: isSet(object.upfrontCostPaymentInterval)
        ? paymentIntervalFromJSON(object.upfrontCostPaymentInterval)
        : PaymentInterval.Monthly,
      perStudentCost: isSet(object.perStudentCost) ? globalThis.Number(object.perStudentCost) : 0,
      paymentProcessingPercentage: isSet(object.paymentProcessingPercentage)
        ? globalThis.Number(object.paymentProcessingPercentage)
        : 0,
    };
  },

  toJSON(message: OrganizationPaymentPlan): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.currency !== Currency.USD) {
      obj.currency = currencyToJSON(message.currency);
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.upfrontCost !== 0) {
      obj.upfrontCost = message.upfrontCost;
    }
    if (message.upfrontCostPaymentInterval !== PaymentInterval.Monthly) {
      obj.upfrontCostPaymentInterval = paymentIntervalToJSON(message.upfrontCostPaymentInterval);
    }
    if (message.perStudentCost !== 0) {
      obj.perStudentCost = message.perStudentCost;
    }
    if (message.paymentProcessingPercentage !== 0) {
      obj.paymentProcessingPercentage = message.paymentProcessingPercentage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrganizationPaymentPlan>, I>>(base?: I): OrganizationPaymentPlan {
    return OrganizationPaymentPlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrganizationPaymentPlan>, I>>(object: I): OrganizationPaymentPlan {
    const message = createBaseOrganizationPaymentPlan();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.currency = object.currency ?? Currency.USD;
    message.isPublic = object.isPublic ?? false;
    message.isActive = object.isActive ?? false;
    message.upfrontCost = object.upfrontCost ?? 0;
    message.upfrontCostPaymentInterval = object.upfrontCostPaymentInterval ?? PaymentInterval.Monthly;
    message.perStudentCost = object.perStudentCost ?? 0;
    message.paymentProcessingPercentage = object.paymentProcessingPercentage ?? 0;
    return message;
  },
};

function createBaseOrganizationPlanAccess(): OrganizationPlanAccess {
  return { organizationId: undefined, paymentPlanId: undefined };
}

export const OrganizationPlanAccess: MessageFns<OrganizationPlanAccess> = {
  encode(message: OrganizationPlanAccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(10).fork()).join();
    }
    if (message.paymentPlanId !== undefined) {
      ObjectId.encode(message.paymentPlanId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationPlanAccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationPlanAccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.paymentPlanId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationPlanAccess {
    return {
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      paymentPlanId: isSet(object.paymentPlanId) ? ObjectId.fromJSON(object.paymentPlanId) : undefined,
    };
  },

  toJSON(message: OrganizationPlanAccess): unknown {
    const obj: any = {};
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.paymentPlanId !== undefined) {
      obj.paymentPlanId = ObjectId.toJSON(message.paymentPlanId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrganizationPlanAccess>, I>>(base?: I): OrganizationPlanAccess {
    return OrganizationPlanAccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrganizationPlanAccess>, I>>(object: I): OrganizationPlanAccess {
    const message = createBaseOrganizationPlanAccess();
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.paymentPlanId = (object.paymentPlanId !== undefined && object.paymentPlanId !== null)
      ? ObjectId.fromPartial(object.paymentPlanId)
      : undefined;
    return message;
  },
};

function createBaseOrganizationPaymentPlanInformation(): OrganizationPaymentPlanInformation {
  return {
    id: undefined,
    organizationId: undefined,
    paymentPlan: undefined,
    deferPerStudentCostToParent: false,
    startDate: undefined,
    endDate: undefined,
  };
}

export const OrganizationPaymentPlanInformation: MessageFns<OrganizationPaymentPlanInformation> = {
  encode(message: OrganizationPaymentPlanInformation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.paymentPlan !== undefined) {
      ObjectId.encode(message.paymentPlan, writer.uint32(26).fork()).join();
    }
    if (message.deferPerStudentCostToParent !== false) {
      writer.uint32(32).bool(message.deferPerStudentCostToParent);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(42).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationPaymentPlanInformation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationPaymentPlanInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.paymentPlan = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.deferPerStudentCostToParent = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationPaymentPlanInformation {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      paymentPlan: isSet(object.paymentPlan) ? ObjectId.fromJSON(object.paymentPlan) : undefined,
      deferPerStudentCostToParent: isSet(object.deferPerStudentCostToParent)
        ? globalThis.Boolean(object.deferPerStudentCostToParent)
        : false,
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
    };
  },

  toJSON(message: OrganizationPaymentPlanInformation): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.paymentPlan !== undefined) {
      obj.paymentPlan = ObjectId.toJSON(message.paymentPlan);
    }
    if (message.deferPerStudentCostToParent !== false) {
      obj.deferPerStudentCostToParent = message.deferPerStudentCostToParent;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrganizationPaymentPlanInformation>, I>>(
    base?: I,
  ): OrganizationPaymentPlanInformation {
    return OrganizationPaymentPlanInformation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrganizationPaymentPlanInformation>, I>>(
    object: I,
  ): OrganizationPaymentPlanInformation {
    const message = createBaseOrganizationPaymentPlanInformation();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.paymentPlan = (object.paymentPlan !== undefined && object.paymentPlan !== null)
      ? ObjectId.fromPartial(object.paymentPlan)
      : undefined;
    message.deferPerStudentCostToParent = object.deferPerStudentCostToParent ?? false;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
