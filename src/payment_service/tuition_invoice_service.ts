// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/tuition_invoice_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { Family } from "../user_service/family";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import {
  TuitionInvoice,
  TuitionInvoiceStatus,
  tuitionInvoiceStatusFromJSON,
  tuitionInvoiceStatusToJSON,
  tuitionInvoiceStatusToNumber,
} from "./tuition_invoice";

export const protobufPackage = "payment_service";

/** TODO: Remove this once we move into payment service and call user service */
export interface StudentObj {
  id: ObjectId | undefined;
  name: string;
  grade: string;
}

export interface GetFamilyTuitionInvoiceRequest {
  context: RequestContext | undefined;
  family: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
}

export interface GenerateTuitionInvoiceRequest {
  context: RequestContext | undefined;
  family: ObjectId | undefined;
  schoolYear: ObjectId | undefined;
  tuitionPlan: ObjectId | undefined;
  students: StudentObj[];
}

export interface ListFamiliesWithTuitionInvoicesRequest {
  context: RequestContext | undefined;
  schoolYear: ObjectId | undefined;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
}

export interface ListFamiliesWithTuitionInvoicesResponse {
  familyWithTuitionInvoice: FamilyWithTuitionInvoice[];
}

export interface FamilyWithTuitionInvoice {
  family: Family | undefined;
  tuitionInvoice?: TuitionInvoice | undefined;
  studentCount: number;
  totalPaid: number;
  status: TuitionInvoiceStatus;
  totalInvoicesAmount: number;
}

function createBaseStudentObj(): StudentObj {
  return { id: undefined, name: "", grade: "" };
}

export const StudentObj: MessageFns<StudentObj> = {
  encode(message: StudentObj, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.grade !== "") {
      writer.uint32(26).string(message.grade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StudentObj {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudentObj();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.grade = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudentObj {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
    };
  },

  toJSON(message: StudentObj): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudentObj>, I>>(base?: I): StudentObj {
    return StudentObj.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudentObj>, I>>(object: I): StudentObj {
    const message = createBaseStudentObj();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    message.grade = object.grade ?? "";
    return message;
  },
};

function createBaseGetFamilyTuitionInvoiceRequest(): GetFamilyTuitionInvoiceRequest {
  return { context: undefined, family: undefined, schoolYear: undefined };
}

export const GetFamilyTuitionInvoiceRequest: MessageFns<GetFamilyTuitionInvoiceRequest> = {
  encode(message: GetFamilyTuitionInvoiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFamilyTuitionInvoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFamilyTuitionInvoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFamilyTuitionInvoiceRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
    };
  },

  toJSON(message: GetFamilyTuitionInvoiceRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFamilyTuitionInvoiceRequest>, I>>(base?: I): GetFamilyTuitionInvoiceRequest {
    return GetFamilyTuitionInvoiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFamilyTuitionInvoiceRequest>, I>>(
    object: I,
  ): GetFamilyTuitionInvoiceRequest {
    const message = createBaseGetFamilyTuitionInvoiceRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    return message;
  },
};

function createBaseGenerateTuitionInvoiceRequest(): GenerateTuitionInvoiceRequest {
  return { context: undefined, family: undefined, schoolYear: undefined, tuitionPlan: undefined, students: [] };
}

export const GenerateTuitionInvoiceRequest: MessageFns<GenerateTuitionInvoiceRequest> = {
  encode(message: GenerateTuitionInvoiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.family !== undefined) {
      ObjectId.encode(message.family, writer.uint32(18).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
    }
    if (message.tuitionPlan !== undefined) {
      ObjectId.encode(message.tuitionPlan, writer.uint32(34).fork()).join();
    }
    for (const v of message.students) {
      StudentObj.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTuitionInvoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTuitionInvoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.family = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tuitionPlan = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.students.push(StudentObj.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTuitionInvoiceRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      family: isSet(object.family) ? ObjectId.fromJSON(object.family) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      tuitionPlan: isSet(object.tuitionPlan) ? ObjectId.fromJSON(object.tuitionPlan) : undefined,
      students: globalThis.Array.isArray(object?.students)
        ? object.students.map((e: any) => StudentObj.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenerateTuitionInvoiceRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.family !== undefined) {
      obj.family = ObjectId.toJSON(message.family);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.tuitionPlan !== undefined) {
      obj.tuitionPlan = ObjectId.toJSON(message.tuitionPlan);
    }
    if (message.students?.length) {
      obj.students = message.students.map((e) => StudentObj.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateTuitionInvoiceRequest>, I>>(base?: I): GenerateTuitionInvoiceRequest {
    return GenerateTuitionInvoiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateTuitionInvoiceRequest>, I>>(
    object: I,
  ): GenerateTuitionInvoiceRequest {
    const message = createBaseGenerateTuitionInvoiceRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? ObjectId.fromPartial(object.family)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.tuitionPlan = (object.tuitionPlan !== undefined && object.tuitionPlan !== null)
      ? ObjectId.fromPartial(object.tuitionPlan)
      : undefined;
    message.students = object.students?.map((e) => StudentObj.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFamiliesWithTuitionInvoicesRequest(): ListFamiliesWithTuitionInvoicesRequest {
  return { context: undefined, schoolYear: undefined, startDate: undefined, endDate: undefined };
}

export const ListFamiliesWithTuitionInvoicesRequest: MessageFns<ListFamiliesWithTuitionInvoicesRequest> = {
  encode(message: ListFamiliesWithTuitionInvoicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.schoolYear !== undefined) {
      ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFamiliesWithTuitionInvoicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFamiliesWithTuitionInvoicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schoolYear = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFamiliesWithTuitionInvoicesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      schoolYear: isSet(object.schoolYear) ? ObjectId.fromJSON(object.schoolYear) : undefined,
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
    };
  },

  toJSON(message: ListFamiliesWithTuitionInvoicesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.schoolYear !== undefined) {
      obj.schoolYear = ObjectId.toJSON(message.schoolYear);
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFamiliesWithTuitionInvoicesRequest>, I>>(
    base?: I,
  ): ListFamiliesWithTuitionInvoicesRequest {
    return ListFamiliesWithTuitionInvoicesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFamiliesWithTuitionInvoicesRequest>, I>>(
    object: I,
  ): ListFamiliesWithTuitionInvoicesRequest {
    const message = createBaseListFamiliesWithTuitionInvoicesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
      ? ObjectId.fromPartial(object.schoolYear)
      : undefined;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    return message;
  },
};

function createBaseListFamiliesWithTuitionInvoicesResponse(): ListFamiliesWithTuitionInvoicesResponse {
  return { familyWithTuitionInvoice: [] };
}

export const ListFamiliesWithTuitionInvoicesResponse: MessageFns<ListFamiliesWithTuitionInvoicesResponse> = {
  encode(message: ListFamiliesWithTuitionInvoicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.familyWithTuitionInvoice) {
      FamilyWithTuitionInvoice.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFamiliesWithTuitionInvoicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFamiliesWithTuitionInvoicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.familyWithTuitionInvoice.push(FamilyWithTuitionInvoice.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFamiliesWithTuitionInvoicesResponse {
    return {
      familyWithTuitionInvoice: globalThis.Array.isArray(object?.familyWithTuitionInvoice)
        ? object.familyWithTuitionInvoice.map((e: any) => FamilyWithTuitionInvoice.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListFamiliesWithTuitionInvoicesResponse): unknown {
    const obj: any = {};
    if (message.familyWithTuitionInvoice?.length) {
      obj.familyWithTuitionInvoice = message.familyWithTuitionInvoice.map((e) => FamilyWithTuitionInvoice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFamiliesWithTuitionInvoicesResponse>, I>>(
    base?: I,
  ): ListFamiliesWithTuitionInvoicesResponse {
    return ListFamiliesWithTuitionInvoicesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFamiliesWithTuitionInvoicesResponse>, I>>(
    object: I,
  ): ListFamiliesWithTuitionInvoicesResponse {
    const message = createBaseListFamiliesWithTuitionInvoicesResponse();
    message.familyWithTuitionInvoice =
      object.familyWithTuitionInvoice?.map((e) => FamilyWithTuitionInvoice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFamilyWithTuitionInvoice(): FamilyWithTuitionInvoice {
  return {
    family: undefined,
    tuitionInvoice: undefined,
    studentCount: 0,
    totalPaid: 0,
    status: TuitionInvoiceStatus.NOT_GENERATED,
    totalInvoicesAmount: 0,
  };
}

export const FamilyWithTuitionInvoice: MessageFns<FamilyWithTuitionInvoice> = {
  encode(message: FamilyWithTuitionInvoice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.family !== undefined) {
      Family.encode(message.family, writer.uint32(10).fork()).join();
    }
    if (message.tuitionInvoice !== undefined) {
      TuitionInvoice.encode(message.tuitionInvoice, writer.uint32(18).fork()).join();
    }
    if (message.studentCount !== 0) {
      writer.uint32(24).int32(message.studentCount);
    }
    if (message.totalPaid !== 0) {
      writer.uint32(33).double(message.totalPaid);
    }
    if (message.status !== TuitionInvoiceStatus.NOT_GENERATED) {
      writer.uint32(40).int32(tuitionInvoiceStatusToNumber(message.status));
    }
    if (message.totalInvoicesAmount !== 0) {
      writer.uint32(49).double(message.totalInvoicesAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamilyWithTuitionInvoice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamilyWithTuitionInvoice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.family = Family.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tuitionInvoice = TuitionInvoice.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.studentCount = reader.int32();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.totalPaid = reader.double();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = tuitionInvoiceStatusFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.totalInvoicesAmount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamilyWithTuitionInvoice {
    return {
      family: isSet(object.family) ? Family.fromJSON(object.family) : undefined,
      tuitionInvoice: isSet(object.tuitionInvoice) ? TuitionInvoice.fromJSON(object.tuitionInvoice) : undefined,
      studentCount: isSet(object.studentCount) ? globalThis.Number(object.studentCount) : 0,
      totalPaid: isSet(object.totalPaid) ? globalThis.Number(object.totalPaid) : 0,
      status: isSet(object.status) ? tuitionInvoiceStatusFromJSON(object.status) : TuitionInvoiceStatus.NOT_GENERATED,
      totalInvoicesAmount: isSet(object.totalInvoicesAmount) ? globalThis.Number(object.totalInvoicesAmount) : 0,
    };
  },

  toJSON(message: FamilyWithTuitionInvoice): unknown {
    const obj: any = {};
    if (message.family !== undefined) {
      obj.family = Family.toJSON(message.family);
    }
    if (message.tuitionInvoice !== undefined) {
      obj.tuitionInvoice = TuitionInvoice.toJSON(message.tuitionInvoice);
    }
    if (message.studentCount !== 0) {
      obj.studentCount = Math.round(message.studentCount);
    }
    if (message.totalPaid !== 0) {
      obj.totalPaid = message.totalPaid;
    }
    if (message.status !== TuitionInvoiceStatus.NOT_GENERATED) {
      obj.status = tuitionInvoiceStatusToJSON(message.status);
    }
    if (message.totalInvoicesAmount !== 0) {
      obj.totalInvoicesAmount = message.totalInvoicesAmount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamilyWithTuitionInvoice>, I>>(base?: I): FamilyWithTuitionInvoice {
    return FamilyWithTuitionInvoice.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamilyWithTuitionInvoice>, I>>(object: I): FamilyWithTuitionInvoice {
    const message = createBaseFamilyWithTuitionInvoice();
    message.family = (object.family !== undefined && object.family !== null)
      ? Family.fromPartial(object.family)
      : undefined;
    message.tuitionInvoice = (object.tuitionInvoice !== undefined && object.tuitionInvoice !== null)
      ? TuitionInvoice.fromPartial(object.tuitionInvoice)
      : undefined;
    message.studentCount = object.studentCount ?? 0;
    message.totalPaid = object.totalPaid ?? 0;
    message.status = object.status ?? TuitionInvoiceStatus.NOT_GENERATED;
    message.totalInvoicesAmount = object.totalInvoicesAmount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
