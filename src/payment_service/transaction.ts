// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/transaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { Currency, currencyFromJSON, currencyToJSON, currencyToNumber } from "../organization_service/organization";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "payment_service_transaction";

export enum TransactionStatus {
  Created = "Created",
  Declined = "Declined",
  Refunded = "Refunded",
  Processing = "Processing",
  Paid = "Paid",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function transactionStatusFromJSON(object: any): TransactionStatus {
  switch (object) {
    case 1:
    case "Created":
      return TransactionStatus.Created;
    case 2:
    case "Declined":
      return TransactionStatus.Declined;
    case 3:
    case "Refunded":
      return TransactionStatus.Refunded;
    case 4:
    case "Processing":
      return TransactionStatus.Processing;
    case 5:
    case "Paid":
      return TransactionStatus.Paid;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TransactionStatus.UNRECOGNIZED;
  }
}

export function transactionStatusToJSON(object: TransactionStatus): string {
  switch (object) {
    case TransactionStatus.Created:
      return "Created";
    case TransactionStatus.Declined:
      return "Declined";
    case TransactionStatus.Refunded:
      return "Refunded";
    case TransactionStatus.Processing:
      return "Processing";
    case TransactionStatus.Paid:
      return "Paid";
    case TransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function transactionStatusToNumber(object: TransactionStatus): number {
  switch (object) {
    case TransactionStatus.Created:
      return 1;
    case TransactionStatus.Declined:
      return 2;
    case TransactionStatus.Refunded:
      return 3;
    case TransactionStatus.Processing:
      return 4;
    case TransactionStatus.Paid:
      return 5;
    case TransactionStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum PaymentType {
  Stripe = "Stripe",
  Cash = "Cash",
  Cheque = "Cheque",
  Card = "Card",
  Other = "Other",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function paymentTypeFromJSON(object: any): PaymentType {
  switch (object) {
    case 1:
    case "Stripe":
      return PaymentType.Stripe;
    case 2:
    case "Cash":
      return PaymentType.Cash;
    case 3:
    case "Cheque":
      return PaymentType.Cheque;
    case 4:
    case "Card":
      return PaymentType.Card;
    case 5:
    case "Other":
      return PaymentType.Other;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentType.UNRECOGNIZED;
  }
}

export function paymentTypeToJSON(object: PaymentType): string {
  switch (object) {
    case PaymentType.Stripe:
      return "Stripe";
    case PaymentType.Cash:
      return "Cash";
    case PaymentType.Cheque:
      return "Cheque";
    case PaymentType.Card:
      return "Card";
    case PaymentType.Other:
      return "Other";
    case PaymentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function paymentTypeToNumber(object: PaymentType): number {
  switch (object) {
    case PaymentType.Stripe:
      return 1;
    case PaymentType.Cash:
      return 2;
    case PaymentType.Cheque:
      return 3;
    case PaymentType.Card:
      return 4;
    case PaymentType.Other:
      return 5;
    case PaymentType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface Transaction {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  stripePaymentIntentId: string;
  currency: Currency;
  status: TransactionStatus;
  paymentType: PaymentType;
  date: Date | undefined;
  invoice: ObjectId | undefined;
  amount: number;
}

function createBaseTransaction(): Transaction {
  return {
    id: undefined,
    organization: undefined,
    stripePaymentIntentId: "",
    currency: Currency.USD,
    status: TransactionStatus.Created,
    paymentType: PaymentType.Stripe,
    date: undefined,
    invoice: undefined,
    amount: 0,
  };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.stripePaymentIntentId !== "") {
      writer.uint32(26).string(message.stripePaymentIntentId);
    }
    if (message.currency !== Currency.USD) {
      writer.uint32(32).int32(currencyToNumber(message.currency));
    }
    if (message.status !== TransactionStatus.Created) {
      writer.uint32(40).int32(transactionStatusToNumber(message.status));
    }
    if (message.paymentType !== PaymentType.Stripe) {
      writer.uint32(48).int32(paymentTypeToNumber(message.paymentType));
    }
    if (message.date !== undefined) {
      Timestamp.encode(toTimestamp(message.date), writer.uint32(58).fork()).join();
    }
    if (message.invoice !== undefined) {
      ObjectId.encode(message.invoice, writer.uint32(66).fork()).join();
    }
    if (message.amount !== 0) {
      writer.uint32(73).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stripePaymentIntentId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.currency = currencyFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = transactionStatusFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.paymentType = paymentTypeFromJSON(reader.int32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.date = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.invoice = ObjectId.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.amount = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      stripePaymentIntentId: isSet(object.stripePaymentIntentId) ? globalThis.String(object.stripePaymentIntentId) : "",
      currency: isSet(object.currency) ? currencyFromJSON(object.currency) : Currency.USD,
      status: isSet(object.status) ? transactionStatusFromJSON(object.status) : TransactionStatus.Created,
      paymentType: isSet(object.paymentType) ? paymentTypeFromJSON(object.paymentType) : PaymentType.Stripe,
      date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
      invoice: isSet(object.invoice) ? ObjectId.fromJSON(object.invoice) : undefined,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.stripePaymentIntentId !== "") {
      obj.stripePaymentIntentId = message.stripePaymentIntentId;
    }
    if (message.currency !== Currency.USD) {
      obj.currency = currencyToJSON(message.currency);
    }
    if (message.status !== TransactionStatus.Created) {
      obj.status = transactionStatusToJSON(message.status);
    }
    if (message.paymentType !== PaymentType.Stripe) {
      obj.paymentType = paymentTypeToJSON(message.paymentType);
    }
    if (message.date !== undefined) {
      obj.date = message.date.toISOString();
    }
    if (message.invoice !== undefined) {
      obj.invoice = ObjectId.toJSON(message.invoice);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.stripePaymentIntentId = object.stripePaymentIntentId ?? "";
    message.currency = object.currency ?? Currency.USD;
    message.status = object.status ?? TransactionStatus.Created;
    message.paymentType = object.paymentType ?? PaymentType.Stripe;
    message.date = object.date ?? undefined;
    message.invoice = (object.invoice !== undefined && object.invoice !== null)
      ? ObjectId.fromPartial(object.invoice)
      : undefined;
    message.amount = object.amount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
