// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/processing_fees.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import {
  DiscountValueType,
  discountValueTypeFromJSON,
  discountValueTypeToJSON,
  discountValueTypeToNumber,
} from "./tuition";

export const protobufPackage = "payment_service";

export enum FeeType {
  CARD_FEE = "CARD_FEE",
  BANK_FEE = "BANK_FEE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function feeTypeFromJSON(object: any): FeeType {
  switch (object) {
    case 1:
    case "CARD_FEE":
      return FeeType.CARD_FEE;
    case 2:
    case "BANK_FEE":
      return FeeType.BANK_FEE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeeType.UNRECOGNIZED;
  }
}

export function feeTypeToJSON(object: FeeType): string {
  switch (object) {
    case FeeType.CARD_FEE:
      return "CARD_FEE";
    case FeeType.BANK_FEE:
      return "BANK_FEE";
    case FeeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function feeTypeToNumber(object: FeeType): number {
  switch (object) {
    case FeeType.CARD_FEE:
      return 1;
    case FeeType.BANK_FEE:
      return 2;
    case FeeType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum InvoiceType {
  TUITION = "TUITION",
  NON_TUITION = "NON_TUITION",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function invoiceTypeFromJSON(object: any): InvoiceType {
  switch (object) {
    case 1:
    case "TUITION":
      return InvoiceType.TUITION;
    case 2:
    case "NON_TUITION":
      return InvoiceType.NON_TUITION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InvoiceType.UNRECOGNIZED;
  }
}

export function invoiceTypeToJSON(object: InvoiceType): string {
  switch (object) {
    case InvoiceType.TUITION:
      return "TUITION";
    case InvoiceType.NON_TUITION:
      return "NON_TUITION";
    case InvoiceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function invoiceTypeToNumber(object: InvoiceType): number {
  switch (object) {
    case InvoiceType.TUITION:
      return 1;
    case InvoiceType.NON_TUITION:
      return 2;
    case InvoiceType.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** Configuration for a single processing fee (card or bank) */
export interface ProcessingFee {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  invoiceType: InvoiceType;
  feeType: FeeType;
  valueType: DiscountValueType;
  value: number;
  capAmount?: number | undefined;
  archived: boolean;
}

/** Organization-level processing fees configuration */
export interface OrganizationProcessingFee {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  tuitionInvoiceFeesEnabled: boolean;
  nonTuitionInvoiceFeesEnabled: boolean;
}

function createBaseProcessingFee(): ProcessingFee {
  return {
    id: undefined,
    organization: undefined,
    invoiceType: InvoiceType.TUITION,
    feeType: FeeType.CARD_FEE,
    valueType: DiscountValueType.AMOUNT,
    value: 0,
    capAmount: 0,
    archived: false,
  };
}

export const ProcessingFee: MessageFns<ProcessingFee> = {
  encode(message: ProcessingFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.invoiceType !== InvoiceType.TUITION) {
      writer.uint32(24).int32(invoiceTypeToNumber(message.invoiceType));
    }
    if (message.feeType !== FeeType.CARD_FEE) {
      writer.uint32(32).int32(feeTypeToNumber(message.feeType));
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      writer.uint32(40).int32(discountValueTypeToNumber(message.valueType));
    }
    if (message.value !== 0) {
      writer.uint32(49).double(message.value);
    }
    if (message.capAmount !== undefined && message.capAmount !== 0) {
      writer.uint32(57).double(message.capAmount);
    }
    if (message.archived !== false) {
      writer.uint32(64).bool(message.archived);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessingFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessingFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.invoiceType = invoiceTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.feeType = feeTypeFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.valueType = discountValueTypeFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.value = reader.double();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.capAmount = reader.double();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.archived = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessingFee {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      invoiceType: isSet(object.invoiceType) ? invoiceTypeFromJSON(object.invoiceType) : InvoiceType.TUITION,
      feeType: isSet(object.feeType) ? feeTypeFromJSON(object.feeType) : FeeType.CARD_FEE,
      valueType: isSet(object.valueType) ? discountValueTypeFromJSON(object.valueType) : DiscountValueType.AMOUNT,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      capAmount: isSet(object.capAmount) ? globalThis.Number(object.capAmount) : 0,
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
    };
  },

  toJSON(message: ProcessingFee): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.invoiceType !== InvoiceType.TUITION) {
      obj.invoiceType = invoiceTypeToJSON(message.invoiceType);
    }
    if (message.feeType !== FeeType.CARD_FEE) {
      obj.feeType = feeTypeToJSON(message.feeType);
    }
    if (message.valueType !== DiscountValueType.AMOUNT) {
      obj.valueType = discountValueTypeToJSON(message.valueType);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.capAmount !== undefined && message.capAmount !== 0) {
      obj.capAmount = message.capAmount;
    }
    if (message.archived !== false) {
      obj.archived = message.archived;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessingFee>, I>>(base?: I): ProcessingFee {
    return ProcessingFee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessingFee>, I>>(object: I): ProcessingFee {
    const message = createBaseProcessingFee();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.invoiceType = object.invoiceType ?? InvoiceType.TUITION;
    message.feeType = object.feeType ?? FeeType.CARD_FEE;
    message.valueType = object.valueType ?? DiscountValueType.AMOUNT;
    message.value = object.value ?? 0;
    message.capAmount = object.capAmount ?? 0;
    message.archived = object.archived ?? false;
    return message;
  },
};

function createBaseOrganizationProcessingFee(): OrganizationProcessingFee {
  return {
    id: undefined,
    organization: undefined,
    tuitionInvoiceFeesEnabled: false,
    nonTuitionInvoiceFeesEnabled: false,
  };
}

export const OrganizationProcessingFee: MessageFns<OrganizationProcessingFee> = {
  encode(message: OrganizationProcessingFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.tuitionInvoiceFeesEnabled !== false) {
      writer.uint32(24).bool(message.tuitionInvoiceFeesEnabled);
    }
    if (message.nonTuitionInvoiceFeesEnabled !== false) {
      writer.uint32(32).bool(message.nonTuitionInvoiceFeesEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationProcessingFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationProcessingFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tuitionInvoiceFeesEnabled = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.nonTuitionInvoiceFeesEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationProcessingFee {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      tuitionInvoiceFeesEnabled: isSet(object.tuitionInvoiceFeesEnabled)
        ? globalThis.Boolean(object.tuitionInvoiceFeesEnabled)
        : false,
      nonTuitionInvoiceFeesEnabled: isSet(object.nonTuitionInvoiceFeesEnabled)
        ? globalThis.Boolean(object.nonTuitionInvoiceFeesEnabled)
        : false,
    };
  },

  toJSON(message: OrganizationProcessingFee): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.tuitionInvoiceFeesEnabled !== false) {
      obj.tuitionInvoiceFeesEnabled = message.tuitionInvoiceFeesEnabled;
    }
    if (message.nonTuitionInvoiceFeesEnabled !== false) {
      obj.nonTuitionInvoiceFeesEnabled = message.nonTuitionInvoiceFeesEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrganizationProcessingFee>, I>>(base?: I): OrganizationProcessingFee {
    return OrganizationProcessingFee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrganizationProcessingFee>, I>>(object: I): OrganizationProcessingFee {
    const message = createBaseOrganizationProcessingFee();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.tuitionInvoiceFeesEnabled = object.tuitionInvoiceFeesEnabled ?? false;
    message.nonTuitionInvoiceFeesEnabled = object.nonTuitionInvoiceFeesEnabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
