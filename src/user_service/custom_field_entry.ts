// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: user_service/custom_field_entry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "user_service";

export interface CustomFieldEntry {
  id: ObjectId | undefined;
  organizationId: ObjectId | undefined;
  customFieldId: ObjectId | undefined;
  groupId: ObjectId | undefined;
  userId: ObjectId | undefined;
  value: string;
}

function createBaseCustomFieldEntry(): CustomFieldEntry {
  return {
    id: undefined,
    organizationId: undefined,
    customFieldId: undefined,
    groupId: undefined,
    userId: undefined,
    value: "",
  };
}

export const CustomFieldEntry: MessageFns<CustomFieldEntry> = {
  encode(message: CustomFieldEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.customFieldId !== undefined) {
      ObjectId.encode(message.customFieldId, writer.uint32(26).fork()).join();
    }
    if (message.groupId !== undefined) {
      ObjectId.encode(message.groupId, writer.uint32(34).fork()).join();
    }
    if (message.userId !== undefined) {
      ObjectId.encode(message.userId, writer.uint32(42).fork()).join();
    }
    if (message.value !== "") {
      writer.uint32(50).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomFieldEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomFieldEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customFieldId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.groupId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.userId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomFieldEntry {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      customFieldId: isSet(object.customFieldId) ? ObjectId.fromJSON(object.customFieldId) : undefined,
      groupId: isSet(object.groupId) ? ObjectId.fromJSON(object.groupId) : undefined,
      userId: isSet(object.userId) ? ObjectId.fromJSON(object.userId) : undefined,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CustomFieldEntry): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.customFieldId !== undefined) {
      obj.customFieldId = ObjectId.toJSON(message.customFieldId);
    }
    if (message.groupId !== undefined) {
      obj.groupId = ObjectId.toJSON(message.groupId);
    }
    if (message.userId !== undefined) {
      obj.userId = ObjectId.toJSON(message.userId);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomFieldEntry>, I>>(base?: I): CustomFieldEntry {
    return CustomFieldEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomFieldEntry>, I>>(object: I): CustomFieldEntry {
    const message = createBaseCustomFieldEntry();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.customFieldId = (object.customFieldId !== undefined && object.customFieldId !== null)
      ? ObjectId.fromPartial(object.customFieldId)
      : undefined;
    message.groupId = (object.groupId !== undefined && object.groupId !== null)
      ? ObjectId.fromPartial(object.groupId)
      : undefined;
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? ObjectId.fromPartial(object.userId)
      : undefined;
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
