// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: user_service/family.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "user_service";

export interface FamilyContact {
  name: string;
  phone: string;
  email: string;
}

export interface FamilyInformation {
  studentLiving: string;
  languageSpoken: string;
  preferredContact?: ObjectId | undefined;
  emergencyContact: FamilyContact | undefined;
  primaryPayer?: ObjectId | undefined;
}

export interface Family {
  id: ObjectId | undefined;
  organization: ObjectId | undefined;
  name: string;
  guardians: ObjectId[];
  guardiansToNotContact: ObjectId[];
  information: FamilyInformation | undefined;
}

function createBaseFamilyContact(): FamilyContact {
  return { name: "", phone: "", email: "" };
}

export const FamilyContact: MessageFns<FamilyContact> = {
  encode(message: FamilyContact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.phone !== "") {
      writer.uint32(18).string(message.phone);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamilyContact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamilyContact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamilyContact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: FamilyContact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamilyContact>, I>>(base?: I): FamilyContact {
    return FamilyContact.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamilyContact>, I>>(object: I): FamilyContact {
    const message = createBaseFamilyContact();
    message.name = object.name ?? "";
    message.phone = object.phone ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseFamilyInformation(): FamilyInformation {
  return {
    studentLiving: "",
    languageSpoken: "",
    preferredContact: undefined,
    emergencyContact: undefined,
    primaryPayer: undefined,
  };
}

export const FamilyInformation: MessageFns<FamilyInformation> = {
  encode(message: FamilyInformation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.studentLiving !== "") {
      writer.uint32(10).string(message.studentLiving);
    }
    if (message.languageSpoken !== "") {
      writer.uint32(18).string(message.languageSpoken);
    }
    if (message.preferredContact !== undefined) {
      ObjectId.encode(message.preferredContact, writer.uint32(26).fork()).join();
    }
    if (message.emergencyContact !== undefined) {
      FamilyContact.encode(message.emergencyContact, writer.uint32(34).fork()).join();
    }
    if (message.primaryPayer !== undefined) {
      ObjectId.encode(message.primaryPayer, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamilyInformation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamilyInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studentLiving = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageSpoken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preferredContact = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.emergencyContact = FamilyContact.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.primaryPayer = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamilyInformation {
    return {
      studentLiving: isSet(object.studentLiving) ? globalThis.String(object.studentLiving) : "",
      languageSpoken: isSet(object.languageSpoken) ? globalThis.String(object.languageSpoken) : "",
      preferredContact: isSet(object.preferredContact) ? ObjectId.fromJSON(object.preferredContact) : undefined,
      emergencyContact: isSet(object.emergencyContact) ? FamilyContact.fromJSON(object.emergencyContact) : undefined,
      primaryPayer: isSet(object.primaryPayer) ? ObjectId.fromJSON(object.primaryPayer) : undefined,
    };
  },

  toJSON(message: FamilyInformation): unknown {
    const obj: any = {};
    if (message.studentLiving !== "") {
      obj.studentLiving = message.studentLiving;
    }
    if (message.languageSpoken !== "") {
      obj.languageSpoken = message.languageSpoken;
    }
    if (message.preferredContact !== undefined) {
      obj.preferredContact = ObjectId.toJSON(message.preferredContact);
    }
    if (message.emergencyContact !== undefined) {
      obj.emergencyContact = FamilyContact.toJSON(message.emergencyContact);
    }
    if (message.primaryPayer !== undefined) {
      obj.primaryPayer = ObjectId.toJSON(message.primaryPayer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamilyInformation>, I>>(base?: I): FamilyInformation {
    return FamilyInformation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamilyInformation>, I>>(object: I): FamilyInformation {
    const message = createBaseFamilyInformation();
    message.studentLiving = object.studentLiving ?? "";
    message.languageSpoken = object.languageSpoken ?? "";
    message.preferredContact = (object.preferredContact !== undefined && object.preferredContact !== null)
      ? ObjectId.fromPartial(object.preferredContact)
      : undefined;
    message.emergencyContact = (object.emergencyContact !== undefined && object.emergencyContact !== null)
      ? FamilyContact.fromPartial(object.emergencyContact)
      : undefined;
    message.primaryPayer = (object.primaryPayer !== undefined && object.primaryPayer !== null)
      ? ObjectId.fromPartial(object.primaryPayer)
      : undefined;
    return message;
  },
};

function createBaseFamily(): Family {
  return {
    id: undefined,
    organization: undefined,
    name: "",
    guardians: [],
    guardiansToNotContact: [],
    information: undefined,
  };
}

export const Family: MessageFns<Family> = {
  encode(message: Family, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organization !== undefined) {
      ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.guardians) {
      ObjectId.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.guardiansToNotContact) {
      ObjectId.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.information !== undefined) {
      FamilyInformation.encode(message.information, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Family {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamily();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.guardians.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.guardiansToNotContact.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.information = FamilyInformation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Family {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organization: isSet(object.organization) ? ObjectId.fromJSON(object.organization) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      guardians: globalThis.Array.isArray(object?.guardians)
        ? object.guardians.map((e: any) => ObjectId.fromJSON(e))
        : [],
      guardiansToNotContact: globalThis.Array.isArray(object?.guardiansToNotContact)
        ? object.guardiansToNotContact.map((e: any) => ObjectId.fromJSON(e))
        : [],
      information: isSet(object.information) ? FamilyInformation.fromJSON(object.information) : undefined,
    };
  },

  toJSON(message: Family): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organization !== undefined) {
      obj.organization = ObjectId.toJSON(message.organization);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.guardians?.length) {
      obj.guardians = message.guardians.map((e) => ObjectId.toJSON(e));
    }
    if (message.guardiansToNotContact?.length) {
      obj.guardiansToNotContact = message.guardiansToNotContact.map((e) => ObjectId.toJSON(e));
    }
    if (message.information !== undefined) {
      obj.information = FamilyInformation.toJSON(message.information);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Family>, I>>(base?: I): Family {
    return Family.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Family>, I>>(object: I): Family {
    const message = createBaseFamily();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? ObjectId.fromPartial(object.organization)
      : undefined;
    message.name = object.name ?? "";
    message.guardians = object.guardians?.map((e) => ObjectId.fromPartial(e)) || [];
    message.guardiansToNotContact = object.guardiansToNotContact?.map((e) => ObjectId.fromPartial(e)) || [];
    message.information = (object.information !== undefined && object.information !== null)
      ? FamilyInformation.fromPartial(object.information)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
