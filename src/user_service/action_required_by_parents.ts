// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: user_service/action_required_by_parents.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "user_service";

export enum ActionType {
  PAY_INVOICE = "PAY_INVOICE",
  FILL_FIELDS = "FILL_FIELDS",
  CORRECT_FIELDS = "CORRECT_FIELDS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function actionTypeFromJSON(object: any): ActionType {
  switch (object) {
    case 0:
    case "PAY_INVOICE":
      return ActionType.PAY_INVOICE;
    case 1:
    case "FILL_FIELDS":
      return ActionType.FILL_FIELDS;
    case 2:
    case "CORRECT_FIELDS":
      return ActionType.CORRECT_FIELDS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionType.UNRECOGNIZED;
  }
}

export function actionTypeToJSON(object: ActionType): string {
  switch (object) {
    case ActionType.PAY_INVOICE:
      return "PAY_INVOICE";
    case ActionType.FILL_FIELDS:
      return "FILL_FIELDS";
    case ActionType.CORRECT_FIELDS:
      return "CORRECT_FIELDS";
    case ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function actionTypeToNumber(object: ActionType): number {
  switch (object) {
    case ActionType.PAY_INVOICE:
      return 0;
    case ActionType.FILL_FIELDS:
      return 1;
    case ActionType.CORRECT_FIELDS:
      return 2;
    case ActionType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ActionRequiredByParents {
  actionType: ActionType;
  title: string;
  invoiceId?: ObjectId | undefined;
  groupId?: ObjectId | undefined;
}

function createBaseActionRequiredByParents(): ActionRequiredByParents {
  return { actionType: ActionType.PAY_INVOICE, title: "", invoiceId: undefined, groupId: undefined };
}

export const ActionRequiredByParents: MessageFns<ActionRequiredByParents> = {
  encode(message: ActionRequiredByParents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionType !== ActionType.PAY_INVOICE) {
      writer.uint32(8).int32(actionTypeToNumber(message.actionType));
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.invoiceId !== undefined) {
      ObjectId.encode(message.invoiceId, writer.uint32(26).fork()).join();
    }
    if (message.groupId !== undefined) {
      ObjectId.encode(message.groupId, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionRequiredByParents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionRequiredByParents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.actionType = actionTypeFromJSON(reader.int32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.invoiceId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.groupId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionRequiredByParents {
    return {
      actionType: isSet(object.actionType) ? actionTypeFromJSON(object.actionType) : ActionType.PAY_INVOICE,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      invoiceId: isSet(object.invoiceId) ? ObjectId.fromJSON(object.invoiceId) : undefined,
      groupId: isSet(object.groupId) ? ObjectId.fromJSON(object.groupId) : undefined,
    };
  },

  toJSON(message: ActionRequiredByParents): unknown {
    const obj: any = {};
    if (message.actionType !== ActionType.PAY_INVOICE) {
      obj.actionType = actionTypeToJSON(message.actionType);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.invoiceId !== undefined) {
      obj.invoiceId = ObjectId.toJSON(message.invoiceId);
    }
    if (message.groupId !== undefined) {
      obj.groupId = ObjectId.toJSON(message.groupId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionRequiredByParents>, I>>(base?: I): ActionRequiredByParents {
    return ActionRequiredByParents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionRequiredByParents>, I>>(object: I): ActionRequiredByParents {
    const message = createBaseActionRequiredByParents();
    message.actionType = object.actionType ?? ActionType.PAY_INVOICE;
    message.title = object.title ?? "";
    message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
      ? ObjectId.fromPartial(object.invoiceId)
      : undefined;
    message.groupId = (object.groupId !== undefined && object.groupId !== null)
      ? ObjectId.fromPartial(object.groupId)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
