// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/report_layout.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";

export const protobufPackage = "class_service";

export interface ReportLayout {
  id: ObjectId | undefined;
  organizationId: ObjectId | undefined;
  courseId: ObjectId | undefined;
  commentCharLimit?: number | undefined;
  sections: ReportLayoutSection[];
  checkBoxes: ReportCheckBoxLayout[];
}

export interface ReportLayoutSection {
  id: ObjectId | undefined;
  name: string;
}

export interface ReportCheckBoxLayout {
  id: ObjectId | undefined;
  name: string;
}

function createBaseReportLayout(): ReportLayout {
  return {
    id: undefined,
    organizationId: undefined,
    courseId: undefined,
    commentCharLimit: 0,
    sections: [],
    checkBoxes: [],
  };
}

export const ReportLayout: MessageFns<ReportLayout> = {
  encode(message: ReportLayout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.organizationId !== undefined) {
      ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
    }
    if (message.commentCharLimit !== undefined && message.commentCharLimit !== 0) {
      writer.uint32(32).uint32(message.commentCharLimit);
    }
    for (const v of message.sections) {
      ReportLayoutSection.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.checkBoxes) {
      ReportCheckBoxLayout.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportLayout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organizationId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.commentCharLimit = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sections.push(ReportLayoutSection.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.checkBoxes.push(ReportCheckBoxLayout.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportLayout {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      organizationId: isSet(object.organizationId) ? ObjectId.fromJSON(object.organizationId) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
      commentCharLimit: isSet(object.commentCharLimit) ? globalThis.Number(object.commentCharLimit) : 0,
      sections: globalThis.Array.isArray(object?.sections)
        ? object.sections.map((e: any) => ReportLayoutSection.fromJSON(e))
        : [],
      checkBoxes: globalThis.Array.isArray(object?.checkBoxes)
        ? object.checkBoxes.map((e: any) => ReportCheckBoxLayout.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReportLayout): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.organizationId !== undefined) {
      obj.organizationId = ObjectId.toJSON(message.organizationId);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    if (message.commentCharLimit !== undefined && message.commentCharLimit !== 0) {
      obj.commentCharLimit = Math.round(message.commentCharLimit);
    }
    if (message.sections?.length) {
      obj.sections = message.sections.map((e) => ReportLayoutSection.toJSON(e));
    }
    if (message.checkBoxes?.length) {
      obj.checkBoxes = message.checkBoxes.map((e) => ReportCheckBoxLayout.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportLayout>, I>>(base?: I): ReportLayout {
    return ReportLayout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportLayout>, I>>(object: I): ReportLayout {
    const message = createBaseReportLayout();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
      ? ObjectId.fromPartial(object.organizationId)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    message.commentCharLimit = object.commentCharLimit ?? 0;
    message.sections = object.sections?.map((e) => ReportLayoutSection.fromPartial(e)) || [];
    message.checkBoxes = object.checkBoxes?.map((e) => ReportCheckBoxLayout.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReportLayoutSection(): ReportLayoutSection {
  return { id: undefined, name: "" };
}

export const ReportLayoutSection: MessageFns<ReportLayoutSection> = {
  encode(message: ReportLayoutSection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportLayoutSection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportLayoutSection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportLayoutSection {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ReportLayoutSection): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportLayoutSection>, I>>(base?: I): ReportLayoutSection {
    return ReportLayoutSection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportLayoutSection>, I>>(object: I): ReportLayoutSection {
    const message = createBaseReportLayoutSection();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReportCheckBoxLayout(): ReportCheckBoxLayout {
  return { id: undefined, name: "" };
}

export const ReportCheckBoxLayout: MessageFns<ReportCheckBoxLayout> = {
  encode(message: ReportCheckBoxLayout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportCheckBoxLayout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportCheckBoxLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportCheckBoxLayout {
    return {
      id: isSet(object.id) ? ObjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ReportCheckBoxLayout): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ObjectId.toJSON(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportCheckBoxLayout>, I>>(base?: I): ReportCheckBoxLayout {
    return ReportCheckBoxLayout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportCheckBoxLayout>, I>>(object: I): ReportCheckBoxLayout {
    const message = createBaseReportCheckBoxLayout();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
