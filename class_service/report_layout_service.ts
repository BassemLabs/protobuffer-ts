// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/report_layout_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { ReportLayout } from "./report_layout";

export const protobufPackage = "class_service.report_layout_service";

export interface GetByCourseRequest {
  context: RequestContext | undefined;
  courseId: ObjectId | undefined;
}

export interface UpdateReportLayoutRequest {
  context: RequestContext | undefined;
  reportCardLayoutId: ObjectId | undefined;
  updatedReportCardLayout: ReportLayout | undefined;
}

function createBaseGetByCourseRequest(): GetByCourseRequest {
  return { context: undefined, courseId: undefined };
}

export const GetByCourseRequest: MessageFns<GetByCourseRequest> = {
  encode(message: GetByCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.courseId !== undefined) {
      ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetByCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetByCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.courseId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetByCourseRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      courseId: isSet(object.courseId) ? ObjectId.fromJSON(object.courseId) : undefined,
    };
  },

  toJSON(message: GetByCourseRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.courseId !== undefined) {
      obj.courseId = ObjectId.toJSON(message.courseId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetByCourseRequest>, I>>(base?: I): GetByCourseRequest {
    return GetByCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetByCourseRequest>, I>>(object: I): GetByCourseRequest {
    const message = createBaseGetByCourseRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.courseId = (object.courseId !== undefined && object.courseId !== null)
      ? ObjectId.fromPartial(object.courseId)
      : undefined;
    return message;
  },
};

function createBaseUpdateReportLayoutRequest(): UpdateReportLayoutRequest {
  return { context: undefined, reportCardLayoutId: undefined, updatedReportCardLayout: undefined };
}

export const UpdateReportLayoutRequest: MessageFns<UpdateReportLayoutRequest> = {
  encode(message: UpdateReportLayoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.reportCardLayoutId !== undefined) {
      ObjectId.encode(message.reportCardLayoutId, writer.uint32(18).fork()).join();
    }
    if (message.updatedReportCardLayout !== undefined) {
      ReportLayout.encode(message.updatedReportCardLayout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReportLayoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReportLayoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reportCardLayoutId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updatedReportCardLayout = ReportLayout.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReportLayoutRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      reportCardLayoutId: isSet(object.reportCardLayoutId) ? ObjectId.fromJSON(object.reportCardLayoutId) : undefined,
      updatedReportCardLayout: isSet(object.updatedReportCardLayout)
        ? ReportLayout.fromJSON(object.updatedReportCardLayout)
        : undefined,
    };
  },

  toJSON(message: UpdateReportLayoutRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.reportCardLayoutId !== undefined) {
      obj.reportCardLayoutId = ObjectId.toJSON(message.reportCardLayoutId);
    }
    if (message.updatedReportCardLayout !== undefined) {
      obj.updatedReportCardLayout = ReportLayout.toJSON(message.updatedReportCardLayout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReportLayoutRequest>, I>>(base?: I): UpdateReportLayoutRequest {
    return UpdateReportLayoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReportLayoutRequest>, I>>(object: I): UpdateReportLayoutRequest {
    const message = createBaseUpdateReportLayoutRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.reportCardLayoutId = (object.reportCardLayoutId !== undefined && object.reportCardLayoutId !== null)
      ? ObjectId.fromPartial(object.reportCardLayoutId)
      : undefined;
    message.updatedReportCardLayout =
      (object.updatedReportCardLayout !== undefined && object.updatedReportCardLayout !== null)
        ? ReportLayout.fromPartial(object.updatedReportCardLayout)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
