// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/homeroom_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "../utils/object_id";
import { RequestContext } from "../utils/request_context";
import { Course } from "./course";
import { GClassCourseWork, GClassStudentSubmission } from "./gclass";
import { Homeroom } from "./homeroom";

export const protobufPackage = "class_service.homeroom_service";

export interface GetHomeroomRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
}

export interface AggregateHomeroomRequest {
  context: RequestContext | undefined;
  aggregationDocument: string;
}

export interface AggregateHomeroomResponse {
  result: string;
}

export interface CreateHomeroomRequest {
  context: RequestContext | undefined;
  name: string;
  semesterId: ObjectId | undefined;
  teacherIds: ObjectId[];
  grade: string;
}

export interface CloneHomeroomRequest {
  context: RequestContext | undefined;
  homeroomToCloneId: ObjectId | undefined;
  name: string;
  semesterId: ObjectId | undefined;
  teacherIds: ObjectId[];
  grade: string;
}

export interface GetHomeroomCoursesRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
}

export interface GetHomeroomCoursesResponse {
  courses: Course[];
}

export interface GetStudentHomeroomsRequest {
  context: RequestContext | undefined;
  studentId: ObjectId | undefined;
  includeArchived?: boolean | undefined;
}

export interface GetStudentHomeroomsResponse {
  homerooms: Homeroom[];
}

export interface ArchiveHomeroomRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
}

export interface UpdateHomeroomRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  semesterId: ObjectId | undefined;
  name: string;
  grade: string;
}

export interface AddTeachersRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  teacherIds: ObjectId[];
}

export interface RemoveTeachersRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  teacherIds: ObjectId[];
}

export interface AddStudentsRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  studentIds: ObjectId[];
}

export interface RemoveStudentsRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  studentIds: ObjectId[];
}

export interface AddAttendanceTeachersRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  teacherIds: ObjectId[];
}

export interface GetAttendanceClassesRequest {
  context: RequestContext | undefined;
  teacherId: ObjectId | undefined;
}

export interface GetAttendanceClassesResponse {
  homerooms: Homeroom[];
}

export interface GetAllAttendanceClassesRequest {
  context: RequestContext | undefined;
}

export interface GetAllAttendanceClassesResponse {
  homerooms: Homeroom[];
}

export interface GetGClassCourseWorkRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
}

export interface GetGClassCourseWorkResponse {
  courseWork: GClassCourseWork[];
}

export interface GetStudentGClassCourseWorkRequest {
  context: RequestContext | undefined;
  homeroomId: ObjectId | undefined;
  studentId: ObjectId | undefined;
}

export interface GetStudentGClassCourseWorkResponse {
  submissions: GClassStudentSubmission[];
}

function createBaseGetHomeroomRequest(): GetHomeroomRequest {
  return { context: undefined, homeroomId: undefined };
}

export const GetHomeroomRequest: MessageFns<GetHomeroomRequest> = {
  encode(message: GetHomeroomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHomeroomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHomeroomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHomeroomRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
    };
  },

  toJSON(message: GetHomeroomRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHomeroomRequest>, I>>(base?: I): GetHomeroomRequest {
    return GetHomeroomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHomeroomRequest>, I>>(object: I): GetHomeroomRequest {
    const message = createBaseGetHomeroomRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    return message;
  },
};

function createBaseAggregateHomeroomRequest(): AggregateHomeroomRequest {
  return { context: undefined, aggregationDocument: "" };
}

export const AggregateHomeroomRequest: MessageFns<AggregateHomeroomRequest> = {
  encode(message: AggregateHomeroomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.aggregationDocument !== "") {
      writer.uint32(18).string(message.aggregationDocument);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregateHomeroomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateHomeroomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aggregationDocument = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregateHomeroomRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      aggregationDocument: isSet(object.aggregationDocument) ? globalThis.String(object.aggregationDocument) : "",
    };
  },

  toJSON(message: AggregateHomeroomRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.aggregationDocument !== "") {
      obj.aggregationDocument = message.aggregationDocument;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AggregateHomeroomRequest>, I>>(base?: I): AggregateHomeroomRequest {
    return AggregateHomeroomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AggregateHomeroomRequest>, I>>(object: I): AggregateHomeroomRequest {
    const message = createBaseAggregateHomeroomRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.aggregationDocument = object.aggregationDocument ?? "";
    return message;
  },
};

function createBaseAggregateHomeroomResponse(): AggregateHomeroomResponse {
  return { result: "" };
}

export const AggregateHomeroomResponse: MessageFns<AggregateHomeroomResponse> = {
  encode(message: AggregateHomeroomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregateHomeroomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateHomeroomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregateHomeroomResponse {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: AggregateHomeroomResponse): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AggregateHomeroomResponse>, I>>(base?: I): AggregateHomeroomResponse {
    return AggregateHomeroomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AggregateHomeroomResponse>, I>>(object: I): AggregateHomeroomResponse {
    const message = createBaseAggregateHomeroomResponse();
    message.result = object.result ?? "";
    return message;
  },
};

function createBaseCreateHomeroomRequest(): CreateHomeroomRequest {
  return { context: undefined, name: "", semesterId: undefined, teacherIds: [], grade: "" };
}

export const CreateHomeroomRequest: MessageFns<CreateHomeroomRequest> = {
  encode(message: CreateHomeroomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(26).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.grade !== "") {
      writer.uint32(42).string(message.grade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHomeroomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHomeroomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.grade = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHomeroomRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
    };
  },

  toJSON(message: CreateHomeroomRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateHomeroomRequest>, I>>(base?: I): CreateHomeroomRequest {
    return CreateHomeroomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateHomeroomRequest>, I>>(object: I): CreateHomeroomRequest {
    const message = createBaseCreateHomeroomRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.name = object.name ?? "";
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    message.grade = object.grade ?? "";
    return message;
  },
};

function createBaseCloneHomeroomRequest(): CloneHomeroomRequest {
  return {
    context: undefined,
    homeroomToCloneId: undefined,
    name: "",
    semesterId: undefined,
    teacherIds: [],
    grade: "",
  };
}

export const CloneHomeroomRequest: MessageFns<CloneHomeroomRequest> = {
  encode(message: CloneHomeroomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomToCloneId !== undefined) {
      ObjectId.encode(message.homeroomToCloneId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.grade !== "") {
      writer.uint32(50).string(message.grade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloneHomeroomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloneHomeroomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomToCloneId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.grade = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloneHomeroomRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomToCloneId: isSet(object.homeroomToCloneId) ? ObjectId.fromJSON(object.homeroomToCloneId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
    };
  },

  toJSON(message: CloneHomeroomRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomToCloneId !== undefined) {
      obj.homeroomToCloneId = ObjectId.toJSON(message.homeroomToCloneId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CloneHomeroomRequest>, I>>(base?: I): CloneHomeroomRequest {
    return CloneHomeroomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloneHomeroomRequest>, I>>(object: I): CloneHomeroomRequest {
    const message = createBaseCloneHomeroomRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomToCloneId = (object.homeroomToCloneId !== undefined && object.homeroomToCloneId !== null)
      ? ObjectId.fromPartial(object.homeroomToCloneId)
      : undefined;
    message.name = object.name ?? "";
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    message.grade = object.grade ?? "";
    return message;
  },
};

function createBaseGetHomeroomCoursesRequest(): GetHomeroomCoursesRequest {
  return { context: undefined, homeroomId: undefined };
}

export const GetHomeroomCoursesRequest: MessageFns<GetHomeroomCoursesRequest> = {
  encode(message: GetHomeroomCoursesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHomeroomCoursesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHomeroomCoursesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHomeroomCoursesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
    };
  },

  toJSON(message: GetHomeroomCoursesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHomeroomCoursesRequest>, I>>(base?: I): GetHomeroomCoursesRequest {
    return GetHomeroomCoursesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHomeroomCoursesRequest>, I>>(object: I): GetHomeroomCoursesRequest {
    const message = createBaseGetHomeroomCoursesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    return message;
  },
};

function createBaseGetHomeroomCoursesResponse(): GetHomeroomCoursesResponse {
  return { courses: [] };
}

export const GetHomeroomCoursesResponse: MessageFns<GetHomeroomCoursesResponse> = {
  encode(message: GetHomeroomCoursesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.courses) {
      Course.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHomeroomCoursesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHomeroomCoursesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.courses.push(Course.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHomeroomCoursesResponse {
    return {
      courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e: any) => Course.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetHomeroomCoursesResponse): unknown {
    const obj: any = {};
    if (message.courses?.length) {
      obj.courses = message.courses.map((e) => Course.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHomeroomCoursesResponse>, I>>(base?: I): GetHomeroomCoursesResponse {
    return GetHomeroomCoursesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHomeroomCoursesResponse>, I>>(object: I): GetHomeroomCoursesResponse {
    const message = createBaseGetHomeroomCoursesResponse();
    message.courses = object.courses?.map((e) => Course.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStudentHomeroomsRequest(): GetStudentHomeroomsRequest {
  return { context: undefined, studentId: undefined, includeArchived: false };
}

export const GetStudentHomeroomsRequest: MessageFns<GetStudentHomeroomsRequest> = {
  encode(message: GetStudentHomeroomsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
    }
    if (message.includeArchived !== undefined && message.includeArchived !== false) {
      writer.uint32(24).bool(message.includeArchived);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentHomeroomsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentHomeroomsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeArchived = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentHomeroomsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
      includeArchived: isSet(object.includeArchived) ? globalThis.Boolean(object.includeArchived) : false,
    };
  },

  toJSON(message: GetStudentHomeroomsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    if (message.includeArchived !== undefined && message.includeArchived !== false) {
      obj.includeArchived = message.includeArchived;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentHomeroomsRequest>, I>>(base?: I): GetStudentHomeroomsRequest {
    return GetStudentHomeroomsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentHomeroomsRequest>, I>>(object: I): GetStudentHomeroomsRequest {
    const message = createBaseGetStudentHomeroomsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    message.includeArchived = object.includeArchived ?? false;
    return message;
  },
};

function createBaseGetStudentHomeroomsResponse(): GetStudentHomeroomsResponse {
  return { homerooms: [] };
}

export const GetStudentHomeroomsResponse: MessageFns<GetStudentHomeroomsResponse> = {
  encode(message: GetStudentHomeroomsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.homerooms) {
      Homeroom.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentHomeroomsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentHomeroomsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.homerooms.push(Homeroom.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentHomeroomsResponse {
    return {
      homerooms: globalThis.Array.isArray(object?.homerooms)
        ? object.homerooms.map((e: any) => Homeroom.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetStudentHomeroomsResponse): unknown {
    const obj: any = {};
    if (message.homerooms?.length) {
      obj.homerooms = message.homerooms.map((e) => Homeroom.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentHomeroomsResponse>, I>>(base?: I): GetStudentHomeroomsResponse {
    return GetStudentHomeroomsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentHomeroomsResponse>, I>>(object: I): GetStudentHomeroomsResponse {
    const message = createBaseGetStudentHomeroomsResponse();
    message.homerooms = object.homerooms?.map((e) => Homeroom.fromPartial(e)) || [];
    return message;
  },
};

function createBaseArchiveHomeroomRequest(): ArchiveHomeroomRequest {
  return { context: undefined, homeroomId: undefined };
}

export const ArchiveHomeroomRequest: MessageFns<ArchiveHomeroomRequest> = {
  encode(message: ArchiveHomeroomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveHomeroomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveHomeroomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveHomeroomRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
    };
  },

  toJSON(message: ArchiveHomeroomRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArchiveHomeroomRequest>, I>>(base?: I): ArchiveHomeroomRequest {
    return ArchiveHomeroomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArchiveHomeroomRequest>, I>>(object: I): ArchiveHomeroomRequest {
    const message = createBaseArchiveHomeroomRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    return message;
  },
};

function createBaseUpdateHomeroomRequest(): UpdateHomeroomRequest {
  return { context: undefined, homeroomId: undefined, semesterId: undefined, name: "", grade: "" };
}

export const UpdateHomeroomRequest: MessageFns<UpdateHomeroomRequest> = {
  encode(message: UpdateHomeroomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    if (message.semesterId !== undefined) {
      ObjectId.encode(message.semesterId, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.grade !== "") {
      writer.uint32(42).string(message.grade);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHomeroomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHomeroomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.semesterId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.grade = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHomeroomRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      semesterId: isSet(object.semesterId) ? ObjectId.fromJSON(object.semesterId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
    };
  },

  toJSON(message: UpdateHomeroomRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.semesterId !== undefined) {
      obj.semesterId = ObjectId.toJSON(message.semesterId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.grade !== "") {
      obj.grade = message.grade;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHomeroomRequest>, I>>(base?: I): UpdateHomeroomRequest {
    return UpdateHomeroomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHomeroomRequest>, I>>(object: I): UpdateHomeroomRequest {
    const message = createBaseUpdateHomeroomRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
      ? ObjectId.fromPartial(object.semesterId)
      : undefined;
    message.name = object.name ?? "";
    message.grade = object.grade ?? "";
    return message;
  },
};

function createBaseAddTeachersRequest(): AddTeachersRequest {
  return { context: undefined, homeroomId: undefined, teacherIds: [] };
}

export const AddTeachersRequest: MessageFns<AddTeachersRequest> = {
  encode(message: AddTeachersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTeachersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTeachersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTeachersRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddTeachersRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddTeachersRequest>, I>>(base?: I): AddTeachersRequest {
    return AddTeachersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddTeachersRequest>, I>>(object: I): AddTeachersRequest {
    const message = createBaseAddTeachersRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveTeachersRequest(): RemoveTeachersRequest {
  return { context: undefined, homeroomId: undefined, teacherIds: [] };
}

export const RemoveTeachersRequest: MessageFns<RemoveTeachersRequest> = {
  encode(message: RemoveTeachersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTeachersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTeachersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTeachersRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RemoveTeachersRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTeachersRequest>, I>>(base?: I): RemoveTeachersRequest {
    return RemoveTeachersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTeachersRequest>, I>>(object: I): RemoveTeachersRequest {
    const message = createBaseRemoveTeachersRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddStudentsRequest(): AddStudentsRequest {
  return { context: undefined, homeroomId: undefined, studentIds: [] };
}

export const AddStudentsRequest: MessageFns<AddStudentsRequest> = {
  encode(message: AddStudentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    for (const v of message.studentIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddStudentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddStudentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddStudentsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      studentIds: globalThis.Array.isArray(object?.studentIds)
        ? object.studentIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddStudentsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.studentIds?.length) {
      obj.studentIds = message.studentIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddStudentsRequest>, I>>(base?: I): AddStudentsRequest {
    return AddStudentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddStudentsRequest>, I>>(object: I): AddStudentsRequest {
    const message = createBaseAddStudentsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.studentIds = object.studentIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveStudentsRequest(): RemoveStudentsRequest {
  return { context: undefined, homeroomId: undefined, studentIds: [] };
}

export const RemoveStudentsRequest: MessageFns<RemoveStudentsRequest> = {
  encode(message: RemoveStudentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    for (const v of message.studentIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveStudentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveStudentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveStudentsRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      studentIds: globalThis.Array.isArray(object?.studentIds)
        ? object.studentIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RemoveStudentsRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.studentIds?.length) {
      obj.studentIds = message.studentIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveStudentsRequest>, I>>(base?: I): RemoveStudentsRequest {
    return RemoveStudentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveStudentsRequest>, I>>(object: I): RemoveStudentsRequest {
    const message = createBaseRemoveStudentsRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.studentIds = object.studentIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddAttendanceTeachersRequest(): AddAttendanceTeachersRequest {
  return { context: undefined, homeroomId: undefined, teacherIds: [] };
}

export const AddAttendanceTeachersRequest: MessageFns<AddAttendanceTeachersRequest> = {
  encode(message: AddAttendanceTeachersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    for (const v of message.teacherIds) {
      ObjectId.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAttendanceTeachersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAttendanceTeachersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teacherIds.push(ObjectId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAttendanceTeachersRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      teacherIds: globalThis.Array.isArray(object?.teacherIds)
        ? object.teacherIds.map((e: any) => ObjectId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddAttendanceTeachersRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.teacherIds?.length) {
      obj.teacherIds = message.teacherIds.map((e) => ObjectId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAttendanceTeachersRequest>, I>>(base?: I): AddAttendanceTeachersRequest {
    return AddAttendanceTeachersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAttendanceTeachersRequest>, I>>(object: I): AddAttendanceTeachersRequest {
    const message = createBaseAddAttendanceTeachersRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.teacherIds = object.teacherIds?.map((e) => ObjectId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAttendanceClassesRequest(): GetAttendanceClassesRequest {
  return { context: undefined, teacherId: undefined };
}

export const GetAttendanceClassesRequest: MessageFns<GetAttendanceClassesRequest> = {
  encode(message: GetAttendanceClassesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.teacherId !== undefined) {
      ObjectId.encode(message.teacherId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttendanceClassesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttendanceClassesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.teacherId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttendanceClassesRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      teacherId: isSet(object.teacherId) ? ObjectId.fromJSON(object.teacherId) : undefined,
    };
  },

  toJSON(message: GetAttendanceClassesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.teacherId !== undefined) {
      obj.teacherId = ObjectId.toJSON(message.teacherId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAttendanceClassesRequest>, I>>(base?: I): GetAttendanceClassesRequest {
    return GetAttendanceClassesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAttendanceClassesRequest>, I>>(object: I): GetAttendanceClassesRequest {
    const message = createBaseGetAttendanceClassesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.teacherId = (object.teacherId !== undefined && object.teacherId !== null)
      ? ObjectId.fromPartial(object.teacherId)
      : undefined;
    return message;
  },
};

function createBaseGetAttendanceClassesResponse(): GetAttendanceClassesResponse {
  return { homerooms: [] };
}

export const GetAttendanceClassesResponse: MessageFns<GetAttendanceClassesResponse> = {
  encode(message: GetAttendanceClassesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.homerooms) {
      Homeroom.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttendanceClassesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttendanceClassesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.homerooms.push(Homeroom.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttendanceClassesResponse {
    return {
      homerooms: globalThis.Array.isArray(object?.homerooms)
        ? object.homerooms.map((e: any) => Homeroom.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAttendanceClassesResponse): unknown {
    const obj: any = {};
    if (message.homerooms?.length) {
      obj.homerooms = message.homerooms.map((e) => Homeroom.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAttendanceClassesResponse>, I>>(base?: I): GetAttendanceClassesResponse {
    return GetAttendanceClassesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAttendanceClassesResponse>, I>>(object: I): GetAttendanceClassesResponse {
    const message = createBaseGetAttendanceClassesResponse();
    message.homerooms = object.homerooms?.map((e) => Homeroom.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllAttendanceClassesRequest(): GetAllAttendanceClassesRequest {
  return { context: undefined };
}

export const GetAllAttendanceClassesRequest: MessageFns<GetAllAttendanceClassesRequest> = {
  encode(message: GetAllAttendanceClassesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAttendanceClassesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAttendanceClassesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAttendanceClassesRequest {
    return { context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined };
  },

  toJSON(message: GetAllAttendanceClassesRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAttendanceClassesRequest>, I>>(base?: I): GetAllAttendanceClassesRequest {
    return GetAllAttendanceClassesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAttendanceClassesRequest>, I>>(
    object: I,
  ): GetAllAttendanceClassesRequest {
    const message = createBaseGetAllAttendanceClassesRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseGetAllAttendanceClassesResponse(): GetAllAttendanceClassesResponse {
  return { homerooms: [] };
}

export const GetAllAttendanceClassesResponse: MessageFns<GetAllAttendanceClassesResponse> = {
  encode(message: GetAllAttendanceClassesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.homerooms) {
      Homeroom.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAttendanceClassesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAttendanceClassesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.homerooms.push(Homeroom.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAttendanceClassesResponse {
    return {
      homerooms: globalThis.Array.isArray(object?.homerooms)
        ? object.homerooms.map((e: any) => Homeroom.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllAttendanceClassesResponse): unknown {
    const obj: any = {};
    if (message.homerooms?.length) {
      obj.homerooms = message.homerooms.map((e) => Homeroom.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAttendanceClassesResponse>, I>>(base?: I): GetAllAttendanceClassesResponse {
    return GetAllAttendanceClassesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAttendanceClassesResponse>, I>>(
    object: I,
  ): GetAllAttendanceClassesResponse {
    const message = createBaseGetAllAttendanceClassesResponse();
    message.homerooms = object.homerooms?.map((e) => Homeroom.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetGClassCourseWorkRequest(): GetGClassCourseWorkRequest {
  return { context: undefined, homeroomId: undefined };
}

export const GetGClassCourseWorkRequest: MessageFns<GetGClassCourseWorkRequest> = {
  encode(message: GetGClassCourseWorkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGClassCourseWorkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGClassCourseWorkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGClassCourseWorkRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
    };
  },

  toJSON(message: GetGClassCourseWorkRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGClassCourseWorkRequest>, I>>(base?: I): GetGClassCourseWorkRequest {
    return GetGClassCourseWorkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGClassCourseWorkRequest>, I>>(object: I): GetGClassCourseWorkRequest {
    const message = createBaseGetGClassCourseWorkRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    return message;
  },
};

function createBaseGetGClassCourseWorkResponse(): GetGClassCourseWorkResponse {
  return { courseWork: [] };
}

export const GetGClassCourseWorkResponse: MessageFns<GetGClassCourseWorkResponse> = {
  encode(message: GetGClassCourseWorkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.courseWork) {
      GClassCourseWork.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGClassCourseWorkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGClassCourseWorkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.courseWork.push(GClassCourseWork.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGClassCourseWorkResponse {
    return {
      courseWork: globalThis.Array.isArray(object?.courseWork)
        ? object.courseWork.map((e: any) => GClassCourseWork.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetGClassCourseWorkResponse): unknown {
    const obj: any = {};
    if (message.courseWork?.length) {
      obj.courseWork = message.courseWork.map((e) => GClassCourseWork.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGClassCourseWorkResponse>, I>>(base?: I): GetGClassCourseWorkResponse {
    return GetGClassCourseWorkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGClassCourseWorkResponse>, I>>(object: I): GetGClassCourseWorkResponse {
    const message = createBaseGetGClassCourseWorkResponse();
    message.courseWork = object.courseWork?.map((e) => GClassCourseWork.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStudentGClassCourseWorkRequest(): GetStudentGClassCourseWorkRequest {
  return { context: undefined, homeroomId: undefined, studentId: undefined };
}

export const GetStudentGClassCourseWorkRequest: MessageFns<GetStudentGClassCourseWorkRequest> = {
  encode(message: GetStudentGClassCourseWorkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      RequestContext.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.homeroomId !== undefined) {
      ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
    }
    if (message.studentId !== undefined) {
      ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentGClassCourseWorkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentGClassCourseWorkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = RequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.homeroomId = ObjectId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.studentId = ObjectId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentGClassCourseWorkRequest {
    return {
      context: isSet(object.context) ? RequestContext.fromJSON(object.context) : undefined,
      homeroomId: isSet(object.homeroomId) ? ObjectId.fromJSON(object.homeroomId) : undefined,
      studentId: isSet(object.studentId) ? ObjectId.fromJSON(object.studentId) : undefined,
    };
  },

  toJSON(message: GetStudentGClassCourseWorkRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = RequestContext.toJSON(message.context);
    }
    if (message.homeroomId !== undefined) {
      obj.homeroomId = ObjectId.toJSON(message.homeroomId);
    }
    if (message.studentId !== undefined) {
      obj.studentId = ObjectId.toJSON(message.studentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentGClassCourseWorkRequest>, I>>(
    base?: I,
  ): GetStudentGClassCourseWorkRequest {
    return GetStudentGClassCourseWorkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentGClassCourseWorkRequest>, I>>(
    object: I,
  ): GetStudentGClassCourseWorkRequest {
    const message = createBaseGetStudentGClassCourseWorkRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? RequestContext.fromPartial(object.context)
      : undefined;
    message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
      ? ObjectId.fromPartial(object.homeroomId)
      : undefined;
    message.studentId = (object.studentId !== undefined && object.studentId !== null)
      ? ObjectId.fromPartial(object.studentId)
      : undefined;
    return message;
  },
};

function createBaseGetStudentGClassCourseWorkResponse(): GetStudentGClassCourseWorkResponse {
  return { submissions: [] };
}

export const GetStudentGClassCourseWorkResponse: MessageFns<GetStudentGClassCourseWorkResponse> = {
  encode(message: GetStudentGClassCourseWorkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.submissions) {
      GClassStudentSubmission.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentGClassCourseWorkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentGClassCourseWorkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.submissions.push(GClassStudentSubmission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentGClassCourseWorkResponse {
    return {
      submissions: globalThis.Array.isArray(object?.submissions)
        ? object.submissions.map((e: any) => GClassStudentSubmission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetStudentGClassCourseWorkResponse): unknown {
    const obj: any = {};
    if (message.submissions?.length) {
      obj.submissions = message.submissions.map((e) => GClassStudentSubmission.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentGClassCourseWorkResponse>, I>>(
    base?: I,
  ): GetStudentGClassCourseWorkResponse {
    return GetStudentGClassCourseWorkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentGClassCourseWorkResponse>, I>>(
    object: I,
  ): GetStudentGClassCourseWorkResponse {
    const message = createBaseGetStudentGClassCourseWorkResponse();
    message.submissions = object.submissions?.map((e) => GClassStudentSubmission.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
