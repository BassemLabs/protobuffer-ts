"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: rabbitmq_schemas/invoice_to_charge.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceToCharge = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "rabbitmq_schemas";
function createBaseInvoiceToCharge() {
    return { invoiceId: undefined, dateSent: undefined };
}
exports.InvoiceToCharge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(10).fork()).join();
        }
        if (message.dateSent !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dateSent), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvoiceToCharge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dateSent = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
            dateSent: isSet(object.dateSent) ? fromJsonTimestamp(object.dateSent) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        if (message.dateSent !== undefined) {
            obj.dateSent = message.dateSent.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.InvoiceToCharge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvoiceToCharge();
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        message.dateSent = object.dateSent ?? undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
