"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: user_service/student.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Student = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "user_service";
function createBaseStudent() {
    return {
        id: undefined,
        username: "",
        emailDomain: "",
        familyId: undefined,
        firstName: "",
        lastName: "",
        gender: "",
        hasWaitlistPriority: false,
        dateOfBirth: undefined,
        interviewDate: undefined,
    };
}
exports.Student = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.emailDomain !== "") {
            writer.uint32(26).string(message.emailDomain);
        }
        if (message.familyId !== undefined) {
            object_id_1.ObjectId.encode(message.familyId, writer.uint32(34).fork()).join();
        }
        if (message.firstName !== "") {
            writer.uint32(42).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(50).string(message.lastName);
        }
        if (message.gender !== "") {
            writer.uint32(58).string(message.gender);
        }
        if (message.hasWaitlistPriority !== undefined && message.hasWaitlistPriority !== false) {
            writer.uint32(64).bool(message.hasWaitlistPriority);
        }
        if (message.dateOfBirth !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(74).fork()).join();
        }
        if (message.interviewDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.interviewDate), writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.emailDomain = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.familyId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.gender = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.hasWaitlistPriority = reader.bool();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.dateOfBirth = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.interviewDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            emailDomain: isSet(object.emailDomain) ? globalThis.String(object.emailDomain) : "",
            familyId: isSet(object.familyId) ? object_id_1.ObjectId.fromJSON(object.familyId) : undefined,
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
            hasWaitlistPriority: isSet(object.hasWaitlistPriority) ? globalThis.Boolean(object.hasWaitlistPriority) : false,
            dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
            interviewDate: isSet(object.interviewDate) ? fromJsonTimestamp(object.interviewDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.emailDomain !== "") {
            obj.emailDomain = message.emailDomain;
        }
        if (message.familyId !== undefined) {
            obj.familyId = object_id_1.ObjectId.toJSON(message.familyId);
        }
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.gender !== "") {
            obj.gender = message.gender;
        }
        if (message.hasWaitlistPriority !== undefined && message.hasWaitlistPriority !== false) {
            obj.hasWaitlistPriority = message.hasWaitlistPriority;
        }
        if (message.dateOfBirth !== undefined) {
            obj.dateOfBirth = message.dateOfBirth.toISOString();
        }
        if (message.interviewDate !== undefined) {
            obj.interviewDate = message.interviewDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.Student.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudent();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.username = object.username ?? "";
        message.emailDomain = object.emailDomain ?? "";
        message.familyId = (object.familyId !== undefined && object.familyId !== null)
            ? object_id_1.ObjectId.fromPartial(object.familyId)
            : undefined;
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.gender = object.gender ?? "";
        message.hasWaitlistPriority = object.hasWaitlistPriority ?? false;
        message.dateOfBirth = object.dateOfBirth ?? undefined;
        message.interviewDate = object.interviewDate ?? undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
