"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: user_service/family.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Family = exports.FamilyInformation = exports.FamilyContact = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const phone_number_1 = require("../utils/phone_number");
exports.protobufPackage = "user_service";
function createBaseFamilyContact() {
    return { name: "", phone: undefined, email: "" };
}
exports.FamilyContact = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.phone !== undefined) {
            phone_number_1.PhoneNumber.encode(message.phone, writer.uint32(18).fork()).join();
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFamilyContact();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.phone = phone_number_1.PhoneNumber.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            phone: isSet(object.phone) ? phone_number_1.PhoneNumber.fromJSON(object.phone) : undefined,
            email: isSet(object.email) ? globalThis.String(object.email) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.phone !== undefined) {
            obj.phone = phone_number_1.PhoneNumber.toJSON(message.phone);
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
    create(base) {
        return exports.FamilyContact.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFamilyContact();
        message.name = object.name ?? "";
        message.phone = (object.phone !== undefined && object.phone !== null)
            ? phone_number_1.PhoneNumber.fromPartial(object.phone)
            : undefined;
        message.email = object.email ?? "";
        return message;
    },
};
function createBaseFamilyInformation() {
    return {
        studentLiving: "",
        languageSpoken: "",
        preferredContact: undefined,
        emergencyContact: undefined,
        primaryPayer: undefined,
    };
}
exports.FamilyInformation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.studentLiving !== "") {
            writer.uint32(10).string(message.studentLiving);
        }
        if (message.languageSpoken !== "") {
            writer.uint32(18).string(message.languageSpoken);
        }
        if (message.preferredContact !== undefined) {
            object_id_1.ObjectId.encode(message.preferredContact, writer.uint32(26).fork()).join();
        }
        if (message.emergencyContact !== undefined) {
            exports.FamilyContact.encode(message.emergencyContact, writer.uint32(34).fork()).join();
        }
        if (message.primaryPayer !== undefined) {
            object_id_1.ObjectId.encode(message.primaryPayer, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFamilyInformation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.studentLiving = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.languageSpoken = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preferredContact = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.emergencyContact = exports.FamilyContact.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.primaryPayer = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            studentLiving: isSet(object.studentLiving) ? globalThis.String(object.studentLiving) : "",
            languageSpoken: isSet(object.languageSpoken) ? globalThis.String(object.languageSpoken) : "",
            preferredContact: isSet(object.preferredContact) ? object_id_1.ObjectId.fromJSON(object.preferredContact) : undefined,
            emergencyContact: isSet(object.emergencyContact) ? exports.FamilyContact.fromJSON(object.emergencyContact) : undefined,
            primaryPayer: isSet(object.primaryPayer) ? object_id_1.ObjectId.fromJSON(object.primaryPayer) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.studentLiving !== "") {
            obj.studentLiving = message.studentLiving;
        }
        if (message.languageSpoken !== "") {
            obj.languageSpoken = message.languageSpoken;
        }
        if (message.preferredContact !== undefined) {
            obj.preferredContact = object_id_1.ObjectId.toJSON(message.preferredContact);
        }
        if (message.emergencyContact !== undefined) {
            obj.emergencyContact = exports.FamilyContact.toJSON(message.emergencyContact);
        }
        if (message.primaryPayer !== undefined) {
            obj.primaryPayer = object_id_1.ObjectId.toJSON(message.primaryPayer);
        }
        return obj;
    },
    create(base) {
        return exports.FamilyInformation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFamilyInformation();
        message.studentLiving = object.studentLiving ?? "";
        message.languageSpoken = object.languageSpoken ?? "";
        message.preferredContact = (object.preferredContact !== undefined && object.preferredContact !== null)
            ? object_id_1.ObjectId.fromPartial(object.preferredContact)
            : undefined;
        message.emergencyContact = (object.emergencyContact !== undefined && object.emergencyContact !== null)
            ? exports.FamilyContact.fromPartial(object.emergencyContact)
            : undefined;
        message.primaryPayer = (object.primaryPayer !== undefined && object.primaryPayer !== null)
            ? object_id_1.ObjectId.fromPartial(object.primaryPayer)
            : undefined;
        return message;
    },
};
function createBaseFamily() {
    return {
        id: undefined,
        organization: undefined,
        name: "",
        guardians: [],
        guardiansToNotContact: [],
        information: undefined,
    };
}
exports.Family = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        for (const v of message.guardians) {
            object_id_1.ObjectId.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.guardiansToNotContact) {
            object_id_1.ObjectId.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.information !== undefined) {
            exports.FamilyInformation.encode(message.information, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFamily();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.guardians.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.guardiansToNotContact.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.information = exports.FamilyInformation.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            guardians: globalThis.Array.isArray(object?.guardians)
                ? object.guardians.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            guardiansToNotContact: globalThis.Array.isArray(object?.guardiansToNotContact)
                ? object.guardiansToNotContact.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            information: isSet(object.information) ? exports.FamilyInformation.fromJSON(object.information) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.guardians?.length) {
            obj.guardians = message.guardians.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.guardiansToNotContact?.length) {
            obj.guardiansToNotContact = message.guardiansToNotContact.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.information !== undefined) {
            obj.information = exports.FamilyInformation.toJSON(message.information);
        }
        return obj;
    },
    create(base) {
        return exports.Family.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFamily();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.name = object.name ?? "";
        message.guardians = object.guardians?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.guardiansToNotContact = object.guardiansToNotContact?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.information = (object.information !== undefined && object.information !== null)
            ? exports.FamilyInformation.fromPartial(object.information)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
