"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: user_service/teacher.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Teacher = exports.TeacherBasic = exports.TeacherStatus = exports.protobufPackage = void 0;
exports.teacherStatusFromJSON = teacherStatusFromJSON;
exports.teacherStatusToJSON = teacherStatusToJSON;
exports.teacherStatusToNumber = teacherStatusToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const phone_number_1 = require("../utils/phone_number");
exports.protobufPackage = "user_service";
var TeacherStatus;
(function (TeacherStatus) {
    TeacherStatus["ACTIVE"] = "ACTIVE";
    TeacherStatus["INACTIVE"] = "INACTIVE";
    TeacherStatus["SUSPENDED"] = "SUSPENDED";
    TeacherStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(TeacherStatus || (exports.TeacherStatus = TeacherStatus = {}));
function teacherStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTIVE":
            return TeacherStatus.ACTIVE;
        case 1:
        case "INACTIVE":
            return TeacherStatus.INACTIVE;
        case 2:
        case "SUSPENDED":
            return TeacherStatus.SUSPENDED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TeacherStatus.UNRECOGNIZED;
    }
}
function teacherStatusToJSON(object) {
    switch (object) {
        case TeacherStatus.ACTIVE:
            return "ACTIVE";
        case TeacherStatus.INACTIVE:
            return "INACTIVE";
        case TeacherStatus.SUSPENDED:
            return "SUSPENDED";
        case TeacherStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function teacherStatusToNumber(object) {
    switch (object) {
        case TeacherStatus.ACTIVE:
            return 0;
        case TeacherStatus.INACTIVE:
            return 1;
        case TeacherStatus.SUSPENDED:
            return 2;
        case TeacherStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseTeacherBasic() {
    return { id: undefined, username: "", firstName: "", lastName: "", email: "" };
}
exports.TeacherBasic = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.username !== "") {
            writer.uint32(42).string(message.username);
        }
        if (message.firstName !== "") {
            writer.uint32(58).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(66).string(message.lastName);
        }
        if (message.email !== "") {
            writer.uint32(82).string(message.email);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTeacherBasic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
    create(base) {
        return exports.TeacherBasic.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTeacherBasic();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.username = object.username ?? "";
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.email = object.email ?? "";
        return message;
    },
};
function createBaseTeacher() {
    return {
        id: undefined,
        status: TeacherStatus.ACTIVE,
        username: "",
        emailDomain: "",
        firstName: "",
        lastName: "",
        gender: "",
        email: "",
        personalEmail: "",
        dateOfBirth: undefined,
        phoneNumber: undefined,
        signatureFileId: undefined,
    };
}
exports.Teacher = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.status !== TeacherStatus.ACTIVE) {
            writer.uint32(32).int32(teacherStatusToNumber(message.status));
        }
        if (message.username !== "") {
            writer.uint32(42).string(message.username);
        }
        if (message.emailDomain !== "") {
            writer.uint32(50).string(message.emailDomain);
        }
        if (message.firstName !== "") {
            writer.uint32(58).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(66).string(message.lastName);
        }
        if (message.gender !== "") {
            writer.uint32(74).string(message.gender);
        }
        if (message.email !== "") {
            writer.uint32(82).string(message.email);
        }
        if (message.personalEmail !== "") {
            writer.uint32(90).string(message.personalEmail);
        }
        if (message.dateOfBirth !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(98).fork()).join();
        }
        if (message.phoneNumber !== undefined) {
            phone_number_1.PhoneNumber.encode(message.phoneNumber, writer.uint32(106).fork()).join();
        }
        if (message.signatureFileId !== undefined) {
            object_id_1.ObjectId.encode(message.signatureFileId, writer.uint32(114).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTeacher();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.status = teacherStatusFromJSON(reader.int32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.emailDomain = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.gender = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.personalEmail = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.dateOfBirth = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.phoneNumber = phone_number_1.PhoneNumber.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.signatureFileId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            status: isSet(object.status) ? teacherStatusFromJSON(object.status) : TeacherStatus.ACTIVE,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            emailDomain: isSet(object.emailDomain) ? globalThis.String(object.emailDomain) : "",
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            personalEmail: isSet(object.personalEmail) ? globalThis.String(object.personalEmail) : "",
            dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
            phoneNumber: isSet(object.phoneNumber) ? phone_number_1.PhoneNumber.fromJSON(object.phoneNumber) : undefined,
            signatureFileId: isSet(object.signatureFileId) ? object_id_1.ObjectId.fromJSON(object.signatureFileId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.status !== TeacherStatus.ACTIVE) {
            obj.status = teacherStatusToJSON(message.status);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.emailDomain !== "") {
            obj.emailDomain = message.emailDomain;
        }
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.gender !== "") {
            obj.gender = message.gender;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.personalEmail !== "") {
            obj.personalEmail = message.personalEmail;
        }
        if (message.dateOfBirth !== undefined) {
            obj.dateOfBirth = message.dateOfBirth.toISOString();
        }
        if (message.phoneNumber !== undefined) {
            obj.phoneNumber = phone_number_1.PhoneNumber.toJSON(message.phoneNumber);
        }
        if (message.signatureFileId !== undefined) {
            obj.signatureFileId = object_id_1.ObjectId.toJSON(message.signatureFileId);
        }
        return obj;
    },
    create(base) {
        return exports.Teacher.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTeacher();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.status = object.status ?? TeacherStatus.ACTIVE;
        message.username = object.username ?? "";
        message.emailDomain = object.emailDomain ?? "";
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.gender = object.gender ?? "";
        message.email = object.email ?? "";
        message.personalEmail = object.personalEmail ?? "";
        message.dateOfBirth = object.dateOfBirth ?? undefined;
        message.phoneNumber = (object.phoneNumber !== undefined && object.phoneNumber !== null)
            ? phone_number_1.PhoneNumber.fromPartial(object.phoneNumber)
            : undefined;
        message.signatureFileId = (object.signatureFileId !== undefined && object.signatureFileId !== null)
            ? object_id_1.ObjectId.fromPartial(object.signatureFileId)
            : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
