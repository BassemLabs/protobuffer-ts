"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/transaction_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueRefundRequest = exports.CreateManualTransactionRequest = exports.GetTransactionsResponse = exports.GetTransactionsRequest = exports.GetPaidTransactionRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const transaction_1 = require("./transaction");
exports.protobufPackage = "payment_service_transaction";
function createBaseGetPaidTransactionRequest() {
    return { context: undefined, user: undefined, description: "" };
}
exports.GetPaidTransactionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            object_id_1.ObjectId.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPaidTransactionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            user: isSet(object.user) ? object_id_1.ObjectId.fromJSON(object.user) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.user !== undefined) {
            obj.user = object_id_1.ObjectId.toJSON(message.user);
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.GetPaidTransactionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPaidTransactionRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.user = (object.user !== undefined && object.user !== null) ? object_id_1.ObjectId.fromPartial(object.user) : undefined;
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseGetTransactionsRequest() {
    return { context: undefined, user: undefined };
}
exports.GetTransactionsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            object_id_1.ObjectId.encode(message.user, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTransactionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            user: isSet(object.user) ? object_id_1.ObjectId.fromJSON(object.user) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.user !== undefined) {
            obj.user = object_id_1.ObjectId.toJSON(message.user);
        }
        return obj;
    },
    create(base) {
        return exports.GetTransactionsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTransactionsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.user = (object.user !== undefined && object.user !== null) ? object_id_1.ObjectId.fromPartial(object.user) : undefined;
        return message;
    },
};
function createBaseGetTransactionsResponse() {
    return { transactions: [] };
}
exports.GetTransactionsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.transactions) {
            transaction_1.Transaction.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTransactionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.transactions.push(transaction_1.Transaction.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transactions: globalThis.Array.isArray(object?.transactions)
                ? object.transactions.map((e) => transaction_1.Transaction.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transactions?.length) {
            obj.transactions = message.transactions.map((e) => transaction_1.Transaction.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetTransactionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTransactionsResponse();
        message.transactions = object.transactions?.map((e) => transaction_1.Transaction.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateManualTransactionRequest() {
    return { context: undefined, paymentType: transaction_1.PaymentType.Stripe, invoiceId: undefined, amount: 0 };
}
exports.CreateManualTransactionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.paymentType !== transaction_1.PaymentType.Stripe) {
            writer.uint32(16).int32((0, transaction_1.paymentTypeToNumber)(message.paymentType));
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(26).fork()).join();
        }
        if (message.amount !== 0) {
            writer.uint32(33).double(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateManualTransactionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.paymentType = (0, transaction_1.paymentTypeFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            paymentType: isSet(object.paymentType) ? (0, transaction_1.paymentTypeFromJSON)(object.paymentType) : transaction_1.PaymentType.Stripe,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.paymentType !== transaction_1.PaymentType.Stripe) {
            obj.paymentType = (0, transaction_1.paymentTypeToJSON)(message.paymentType);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.CreateManualTransactionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateManualTransactionRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.paymentType = object.paymentType ?? transaction_1.PaymentType.Stripe;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        message.amount = object.amount ?? 0;
        return message;
    },
};
function createBaseIssueRefundRequest() {
    return { context: undefined, transactionId: undefined, paymentType: transaction_1.PaymentType.Stripe, amount: 0, reason: "" };
}
exports.IssueRefundRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.transactionId !== undefined) {
            object_id_1.ObjectId.encode(message.transactionId, writer.uint32(18).fork()).join();
        }
        if (message.paymentType !== transaction_1.PaymentType.Stripe) {
            writer.uint32(24).int32((0, transaction_1.paymentTypeToNumber)(message.paymentType));
        }
        if (message.amount !== 0) {
            writer.uint32(33).double(message.amount);
        }
        if (message.reason !== undefined && message.reason !== "") {
            writer.uint32(42).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIssueRefundRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.transactionId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.paymentType = (0, transaction_1.paymentTypeFromJSON)(reader.int32());
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            transactionId: isSet(object.transactionId) ? object_id_1.ObjectId.fromJSON(object.transactionId) : undefined,
            paymentType: isSet(object.paymentType) ? (0, transaction_1.paymentTypeFromJSON)(object.paymentType) : transaction_1.PaymentType.Stripe,
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.transactionId !== undefined) {
            obj.transactionId = object_id_1.ObjectId.toJSON(message.transactionId);
        }
        if (message.paymentType !== transaction_1.PaymentType.Stripe) {
            obj.paymentType = (0, transaction_1.paymentTypeToJSON)(message.paymentType);
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.reason !== undefined && message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.IssueRefundRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIssueRefundRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)
            ? object_id_1.ObjectId.fromPartial(object.transactionId)
            : undefined;
        message.paymentType = object.paymentType ?? transaction_1.PaymentType.Stripe;
        message.amount = object.amount ?? 0;
        message.reason = object.reason ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
