"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/tuition.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentInstallment = exports.TuitionPlan = exports.TuitionDiscount = exports.AdditionalFee = exports.TuitionRate = exports.DiscountStackMode = exports.PaymentScheduleType = exports.DiscountValueType = exports.Scope = exports.DiscountType = exports.protobufPackage = void 0;
exports.discountTypeFromJSON = discountTypeFromJSON;
exports.discountTypeToJSON = discountTypeToJSON;
exports.discountTypeToNumber = discountTypeToNumber;
exports.scopeFromJSON = scopeFromJSON;
exports.scopeToJSON = scopeToJSON;
exports.scopeToNumber = scopeToNumber;
exports.discountValueTypeFromJSON = discountValueTypeFromJSON;
exports.discountValueTypeToJSON = discountValueTypeToJSON;
exports.discountValueTypeToNumber = discountValueTypeToNumber;
exports.paymentScheduleTypeFromJSON = paymentScheduleTypeFromJSON;
exports.paymentScheduleTypeToJSON = paymentScheduleTypeToJSON;
exports.paymentScheduleTypeToNumber = paymentScheduleTypeToNumber;
exports.discountStackModeFromJSON = discountStackModeFromJSON;
exports.discountStackModeToJSON = discountStackModeToJSON;
exports.discountStackModeToNumber = discountStackModeToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "payment_service";
var DiscountType;
(function (DiscountType) {
    /** STANDARD - subsidized, teacher, sibling, scholarship */
    DiscountType["STANDARD"] = "STANDARD";
    /** CUSTOM - financial aid */
    DiscountType["CUSTOM"] = "CUSTOM";
    DiscountType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(DiscountType || (exports.DiscountType = DiscountType = {}));
function discountTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "STANDARD":
            return DiscountType.STANDARD;
        case 2:
        case "CUSTOM":
            return DiscountType.CUSTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiscountType.UNRECOGNIZED;
    }
}
function discountTypeToJSON(object) {
    switch (object) {
        case DiscountType.STANDARD:
            return "STANDARD";
        case DiscountType.CUSTOM:
            return "CUSTOM";
        case DiscountType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function discountTypeToNumber(object) {
    switch (object) {
        case DiscountType.STANDARD:
            return 1;
        case DiscountType.CUSTOM:
            return 2;
        case DiscountType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var Scope;
(function (Scope) {
    Scope["STUDENT_SCOPE"] = "STUDENT_SCOPE";
    Scope["FAMILY_SCOPE"] = "FAMILY_SCOPE";
    Scope["UNRECOGNIZED"] = "UNRECOGNIZED";
})(Scope || (exports.Scope = Scope = {}));
function scopeFromJSON(object) {
    switch (object) {
        case 1:
        case "STUDENT_SCOPE":
            return Scope.STUDENT_SCOPE;
        case 2:
        case "FAMILY_SCOPE":
            return Scope.FAMILY_SCOPE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Scope.UNRECOGNIZED;
    }
}
function scopeToJSON(object) {
    switch (object) {
        case Scope.STUDENT_SCOPE:
            return "STUDENT_SCOPE";
        case Scope.FAMILY_SCOPE:
            return "FAMILY_SCOPE";
        case Scope.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function scopeToNumber(object) {
    switch (object) {
        case Scope.STUDENT_SCOPE:
            return 1;
        case Scope.FAMILY_SCOPE:
            return 2;
        case Scope.UNRECOGNIZED:
        default:
            return -1;
    }
}
var DiscountValueType;
(function (DiscountValueType) {
    DiscountValueType["AMOUNT"] = "AMOUNT";
    DiscountValueType["PERCENTAGE"] = "PERCENTAGE";
    DiscountValueType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(DiscountValueType || (exports.DiscountValueType = DiscountValueType = {}));
function discountValueTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "AMOUNT":
            return DiscountValueType.AMOUNT;
        case 2:
        case "PERCENTAGE":
            return DiscountValueType.PERCENTAGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiscountValueType.UNRECOGNIZED;
    }
}
function discountValueTypeToJSON(object) {
    switch (object) {
        case DiscountValueType.AMOUNT:
            return "AMOUNT";
        case DiscountValueType.PERCENTAGE:
            return "PERCENTAGE";
        case DiscountValueType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function discountValueTypeToNumber(object) {
    switch (object) {
        case DiscountValueType.AMOUNT:
            return 1;
        case DiscountValueType.PERCENTAGE:
            return 2;
        case DiscountValueType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var PaymentScheduleType;
(function (PaymentScheduleType) {
    PaymentScheduleType["ONE_TIME"] = "ONE_TIME";
    PaymentScheduleType["MONTHLY"] = "MONTHLY";
    PaymentScheduleType["CUSTOM_PAYMENT_SCHEDULE"] = "CUSTOM_PAYMENT_SCHEDULE";
    PaymentScheduleType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(PaymentScheduleType || (exports.PaymentScheduleType = PaymentScheduleType = {}));
function paymentScheduleTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "ONE_TIME":
            return PaymentScheduleType.ONE_TIME;
        case 2:
        case "MONTHLY":
            return PaymentScheduleType.MONTHLY;
        case 3:
        case "CUSTOM_PAYMENT_SCHEDULE":
            return PaymentScheduleType.CUSTOM_PAYMENT_SCHEDULE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PaymentScheduleType.UNRECOGNIZED;
    }
}
function paymentScheduleTypeToJSON(object) {
    switch (object) {
        case PaymentScheduleType.ONE_TIME:
            return "ONE_TIME";
        case PaymentScheduleType.MONTHLY:
            return "MONTHLY";
        case PaymentScheduleType.CUSTOM_PAYMENT_SCHEDULE:
            return "CUSTOM_PAYMENT_SCHEDULE";
        case PaymentScheduleType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function paymentScheduleTypeToNumber(object) {
    switch (object) {
        case PaymentScheduleType.ONE_TIME:
            return 1;
        case PaymentScheduleType.MONTHLY:
            return 2;
        case PaymentScheduleType.CUSTOM_PAYMENT_SCHEDULE:
            return 3;
        case PaymentScheduleType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var DiscountStackMode;
(function (DiscountStackMode) {
    /** ADDITIVE - All discounts stack */
    DiscountStackMode["ADDITIVE"] = "ADDITIVE";
    /** EXCLUSIVE - Only the best in the bucket */
    DiscountStackMode["EXCLUSIVE"] = "EXCLUSIVE";
    DiscountStackMode["UNRECOGNIZED"] = "UNRECOGNIZED";
})(DiscountStackMode || (exports.DiscountStackMode = DiscountStackMode = {}));
function discountStackModeFromJSON(object) {
    switch (object) {
        case 1:
        case "ADDITIVE":
            return DiscountStackMode.ADDITIVE;
        case 2:
        case "EXCLUSIVE":
            return DiscountStackMode.EXCLUSIVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiscountStackMode.UNRECOGNIZED;
    }
}
function discountStackModeToJSON(object) {
    switch (object) {
        case DiscountStackMode.ADDITIVE:
            return "ADDITIVE";
        case DiscountStackMode.EXCLUSIVE:
            return "EXCLUSIVE";
        case DiscountStackMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function discountStackModeToNumber(object) {
    switch (object) {
        case DiscountStackMode.ADDITIVE:
            return 1;
        case DiscountStackMode.EXCLUSIVE:
            return 2;
        case DiscountStackMode.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseTuitionRate() {
    return { id: undefined, organization: undefined, schoolYear: undefined, grade: "", amount: 0 };
}
exports.TuitionRate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.grade !== "") {
            writer.uint32(34).string(message.grade);
        }
        if (message.amount !== 0) {
            writer.uint32(41).double(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionRate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.TuitionRate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionRate();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.grade = object.grade ?? "";
        message.amount = object.amount ?? 0;
        return message;
    },
};
function createBaseAdditionalFee() {
    return {
        id: undefined,
        organization: undefined,
        schoolYear: undefined,
        name: "",
        description: "",
        amount: 0,
        isOptional: false,
        scope: Scope.STUDENT_SCOPE,
    };
}
exports.AdditionalFee = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.amount !== 0) {
            writer.uint32(49).double(message.amount);
        }
        if (message.isOptional !== false) {
            writer.uint32(56).bool(message.isOptional);
        }
        if (message.scope !== Scope.STUDENT_SCOPE) {
            writer.uint32(64).int32(scopeToNumber(message.scope));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAdditionalFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.isOptional = reader.bool();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.scope = scopeFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
            scope: isSet(object.scope) ? scopeFromJSON(object.scope) : Scope.STUDENT_SCOPE,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.isOptional !== false) {
            obj.isOptional = message.isOptional;
        }
        if (message.scope !== Scope.STUDENT_SCOPE) {
            obj.scope = scopeToJSON(message.scope);
        }
        return obj;
    },
    create(base) {
        return exports.AdditionalFee.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAdditionalFee();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.amount = object.amount ?? 0;
        message.isOptional = object.isOptional ?? false;
        message.scope = object.scope ?? Scope.STUDENT_SCOPE;
        return message;
    },
};
function createBaseTuitionDiscount() {
    return {
        id: undefined,
        organization: undefined,
        schoolYear: undefined,
        name: "",
        discountType: DiscountType.STANDARD,
        scope: Scope.STUDENT_SCOPE,
        valueType: DiscountValueType.AMOUNT,
        value: 0,
        description: "",
        stackMode: DiscountStackMode.ADDITIVE,
    };
}
exports.TuitionDiscount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.discountType !== DiscountType.STANDARD) {
            writer.uint32(40).int32(discountTypeToNumber(message.discountType));
        }
        if (message.scope !== Scope.STUDENT_SCOPE) {
            writer.uint32(48).int32(scopeToNumber(message.scope));
        }
        if (message.valueType !== DiscountValueType.AMOUNT) {
            writer.uint32(56).int32(discountValueTypeToNumber(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(65).double(message.value);
        }
        if (message.description !== "") {
            writer.uint32(74).string(message.description);
        }
        if (message.stackMode !== DiscountStackMode.ADDITIVE) {
            writer.uint32(80).int32(discountStackModeToNumber(message.stackMode));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionDiscount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.discountType = discountTypeFromJSON(reader.int32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.scope = scopeFromJSON(reader.int32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.valueType = discountValueTypeFromJSON(reader.int32());
                    continue;
                case 8:
                    if (tag !== 65) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.stackMode = discountStackModeFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            discountType: isSet(object.discountType) ? discountTypeFromJSON(object.discountType) : DiscountType.STANDARD,
            scope: isSet(object.scope) ? scopeFromJSON(object.scope) : Scope.STUDENT_SCOPE,
            valueType: isSet(object.valueType) ? discountValueTypeFromJSON(object.valueType) : DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            stackMode: isSet(object.stackMode) ? discountStackModeFromJSON(object.stackMode) : DiscountStackMode.ADDITIVE,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.discountType !== DiscountType.STANDARD) {
            obj.discountType = discountTypeToJSON(message.discountType);
        }
        if (message.scope !== Scope.STUDENT_SCOPE) {
            obj.scope = scopeToJSON(message.scope);
        }
        if (message.valueType !== DiscountValueType.AMOUNT) {
            obj.valueType = discountValueTypeToJSON(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.stackMode !== DiscountStackMode.ADDITIVE) {
            obj.stackMode = discountStackModeToJSON(message.stackMode);
        }
        return obj;
    },
    create(base) {
        return exports.TuitionDiscount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionDiscount();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.name = object.name ?? "";
        message.discountType = object.discountType ?? DiscountType.STANDARD;
        message.scope = object.scope ?? Scope.STUDENT_SCOPE;
        message.valueType = object.valueType ?? DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.description = object.description ?? "";
        message.stackMode = object.stackMode ?? DiscountStackMode.ADDITIVE;
        return message;
    },
};
function createBaseTuitionPlan() {
    return {
        id: undefined,
        organization: undefined,
        schoolYear: undefined,
        name: "",
        description: "",
        scheduleType: PaymentScheduleType.ONE_TIME,
        dayOfMonth: 0,
        installments: [],
        archived: false,
        startDate: undefined,
        endDate: undefined,
    };
}
exports.TuitionPlan = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.scheduleType !== PaymentScheduleType.ONE_TIME) {
            writer.uint32(48).int32(paymentScheduleTypeToNumber(message.scheduleType));
        }
        if (message.dayOfMonth !== undefined && message.dayOfMonth !== 0) {
            writer.uint32(56).int32(message.dayOfMonth);
        }
        for (const v of message.installments) {
            exports.PaymentInstallment.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.archived !== false) {
            writer.uint32(72).bool(message.archived);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(82).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionPlan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.scheduleType = paymentScheduleTypeFromJSON(reader.int32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.dayOfMonth = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.installments.push(exports.PaymentInstallment.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            scheduleType: isSet(object.scheduleType)
                ? paymentScheduleTypeFromJSON(object.scheduleType)
                : PaymentScheduleType.ONE_TIME,
            dayOfMonth: isSet(object.dayOfMonth) ? globalThis.Number(object.dayOfMonth) : 0,
            installments: globalThis.Array.isArray(object?.installments)
                ? object.installments.map((e) => exports.PaymentInstallment.fromJSON(e))
                : [],
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.scheduleType !== PaymentScheduleType.ONE_TIME) {
            obj.scheduleType = paymentScheduleTypeToJSON(message.scheduleType);
        }
        if (message.dayOfMonth !== undefined && message.dayOfMonth !== 0) {
            obj.dayOfMonth = Math.round(message.dayOfMonth);
        }
        if (message.installments?.length) {
            obj.installments = message.installments.map((e) => exports.PaymentInstallment.toJSON(e));
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.TuitionPlan.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionPlan();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.scheduleType = object.scheduleType ?? PaymentScheduleType.ONE_TIME;
        message.dayOfMonth = object.dayOfMonth ?? 0;
        message.installments = object.installments?.map((e) => exports.PaymentInstallment.fromPartial(e)) || [];
        message.archived = object.archived ?? false;
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        return message;
    },
};
function createBasePaymentInstallment() {
    return { dueDate: undefined };
}
exports.PaymentInstallment = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentInstallment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.PaymentInstallment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentInstallment();
        message.dueDate = object.dueDate ?? undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
