"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/tuition_application_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListFamilyAdditionalFeesResponse = exports.ListFamilyAdditionalFeesRequest = exports.ListStudentAdditionalFeesResponse = exports.ListStudentAdditionalFeesRequest = exports.RemoveAdditionalFeeResponse = exports.RemoveAdditionalFeeRequest = exports.ApplyAdditionalFeeRequest = exports.ListFamilyDiscountsResponse = exports.ListFamilyDiscountsRequest = exports.ListStudentDiscountsResponse = exports.ListStudentDiscountsRequest = exports.RemoveDiscountResponse = exports.RemoveDiscountRequest = exports.ApplyDiscountRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const tuition_application_1 = require("./tuition_application");
exports.protobufPackage = "payment_service";
function createBaseApplyDiscountRequest() {
    return { context: undefined, discount: undefined, student: undefined, family: undefined };
}
exports.ApplyDiscountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.discount !== undefined) {
            object_id_1.ObjectId.encode(message.discount, writer.uint32(18).fork()).join();
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(26).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApplyDiscountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.discount = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            discount: isSet(object.discount) ? object_id_1.ObjectId.fromJSON(object.discount) : undefined,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.discount !== undefined) {
            obj.discount = object_id_1.ObjectId.toJSON(message.discount);
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        return obj;
    },
    create(base) {
        return exports.ApplyDiscountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApplyDiscountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.discount = (object.discount !== undefined && object.discount !== null)
            ? object_id_1.ObjectId.fromPartial(object.discount)
            : undefined;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        return message;
    },
};
function createBaseRemoveDiscountRequest() {
    return { context: undefined, id: undefined };
}
exports.RemoveDiscountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveDiscountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveDiscountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveDiscountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseRemoveDiscountResponse() {
    return { success: false };
}
exports.RemoveDiscountResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveDiscountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveDiscountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveDiscountResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseListStudentDiscountsRequest() {
    return { context: undefined, student: undefined, schoolYear: undefined };
}
exports.ListStudentDiscountsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListStudentDiscountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListStudentDiscountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListStudentDiscountsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListStudentDiscountsResponse() {
    return { applications: [] };
}
exports.ListStudentDiscountsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.applications) {
            tuition_application_1.DiscountApplication.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListStudentDiscountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.applications.push(tuition_application_1.DiscountApplication.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            applications: globalThis.Array.isArray(object?.applications)
                ? object.applications.map((e) => tuition_application_1.DiscountApplication.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.applications?.length) {
            obj.applications = message.applications.map((e) => tuition_application_1.DiscountApplication.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListStudentDiscountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListStudentDiscountsResponse();
        message.applications = object.applications?.map((e) => tuition_application_1.DiscountApplication.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListFamilyDiscountsRequest() {
    return { context: undefined, family: undefined, schoolYear: undefined };
}
exports.ListFamilyDiscountsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFamilyDiscountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListFamilyDiscountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFamilyDiscountsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListFamilyDiscountsResponse() {
    return { applications: [] };
}
exports.ListFamilyDiscountsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.applications) {
            tuition_application_1.DiscountApplication.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFamilyDiscountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.applications.push(tuition_application_1.DiscountApplication.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            applications: globalThis.Array.isArray(object?.applications)
                ? object.applications.map((e) => tuition_application_1.DiscountApplication.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.applications?.length) {
            obj.applications = message.applications.map((e) => tuition_application_1.DiscountApplication.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListFamilyDiscountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFamilyDiscountsResponse();
        message.applications = object.applications?.map((e) => tuition_application_1.DiscountApplication.fromPartial(e)) || [];
        return message;
    },
};
function createBaseApplyAdditionalFeeRequest() {
    return { context: undefined, additionalFee: undefined, student: undefined, family: undefined };
}
exports.ApplyAdditionalFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.additionalFee !== undefined) {
            object_id_1.ObjectId.encode(message.additionalFee, writer.uint32(18).fork()).join();
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(26).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApplyAdditionalFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.additionalFee = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            additionalFee: isSet(object.additionalFee) ? object_id_1.ObjectId.fromJSON(object.additionalFee) : undefined,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.additionalFee !== undefined) {
            obj.additionalFee = object_id_1.ObjectId.toJSON(message.additionalFee);
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        return obj;
    },
    create(base) {
        return exports.ApplyAdditionalFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApplyAdditionalFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.additionalFee = (object.additionalFee !== undefined && object.additionalFee !== null)
            ? object_id_1.ObjectId.fromPartial(object.additionalFee)
            : undefined;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        return message;
    },
};
function createBaseRemoveAdditionalFeeRequest() {
    return { context: undefined, id: undefined };
}
exports.RemoveAdditionalFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveAdditionalFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveAdditionalFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveAdditionalFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseRemoveAdditionalFeeResponse() {
    return { success: false };
}
exports.RemoveAdditionalFeeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveAdditionalFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveAdditionalFeeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveAdditionalFeeResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseListStudentAdditionalFeesRequest() {
    return { context: undefined, student: undefined, schoolYear: undefined };
}
exports.ListStudentAdditionalFeesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListStudentAdditionalFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListStudentAdditionalFeesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListStudentAdditionalFeesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListStudentAdditionalFeesResponse() {
    return { applications: [] };
}
exports.ListStudentAdditionalFeesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.applications) {
            tuition_application_1.AdditionalFeeApplication.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListStudentAdditionalFeesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.applications.push(tuition_application_1.AdditionalFeeApplication.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            applications: globalThis.Array.isArray(object?.applications)
                ? object.applications.map((e) => tuition_application_1.AdditionalFeeApplication.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.applications?.length) {
            obj.applications = message.applications.map((e) => tuition_application_1.AdditionalFeeApplication.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListStudentAdditionalFeesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListStudentAdditionalFeesResponse();
        message.applications = object.applications?.map((e) => tuition_application_1.AdditionalFeeApplication.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListFamilyAdditionalFeesRequest() {
    return { context: undefined, family: undefined, schoolYear: undefined };
}
exports.ListFamilyAdditionalFeesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFamilyAdditionalFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListFamilyAdditionalFeesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFamilyAdditionalFeesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListFamilyAdditionalFeesResponse() {
    return { applications: [] };
}
exports.ListFamilyAdditionalFeesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.applications) {
            tuition_application_1.AdditionalFeeApplication.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFamilyAdditionalFeesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.applications.push(tuition_application_1.AdditionalFeeApplication.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            applications: globalThis.Array.isArray(object?.applications)
                ? object.applications.map((e) => tuition_application_1.AdditionalFeeApplication.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.applications?.length) {
            obj.applications = message.applications.map((e) => tuition_application_1.AdditionalFeeApplication.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListFamilyAdditionalFeesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFamilyAdditionalFeesResponse();
        message.applications = object.applications?.map((e) => tuition_application_1.AdditionalFeeApplication.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
