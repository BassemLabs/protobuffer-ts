"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/processing_fees_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateOrganizationProcessingFeeRequest = exports.GetOrganizationProcessingFeeRequest = exports.GetActiveProcessingFeesRequest = exports.UnarchiveProcessingFeeRequest = exports.ArchiveProcessingFeeRequest = exports.UpdateProcessingFeeRequest = exports.GetProcessingFeeRequest = exports.CreateProcessingFeeRequest = exports.ListProcessingFeesResponse = exports.ListProcessingFeesRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const processing_fees_1 = require("./processing_fees");
const tuition_1 = require("./tuition");
exports.protobufPackage = "payment_service";
function createBaseListProcessingFeesRequest() {
    return { context: undefined, archived: false };
}
exports.ListProcessingFeesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.archived !== false) {
            writer.uint32(16).bool(message.archived);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProcessingFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        return obj;
    },
    create(base) {
        return exports.ListProcessingFeesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListProcessingFeesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.archived = object.archived ?? false;
        return message;
    },
};
function createBaseListProcessingFeesResponse() {
    return { fees: [] };
}
exports.ListProcessingFeesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.fees) {
            processing_fees_1.ProcessingFee.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProcessingFeesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fees.push(processing_fees_1.ProcessingFee.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fees: globalThis.Array.isArray(object?.fees) ? object.fees.map((e) => processing_fees_1.ProcessingFee.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fees?.length) {
            obj.fees = message.fees.map((e) => processing_fees_1.ProcessingFee.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListProcessingFeesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListProcessingFeesResponse();
        message.fees = object.fees?.map((e) => processing_fees_1.ProcessingFee.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateProcessingFeeRequest() {
    return {
        context: undefined,
        invoiceType: processing_fees_1.InvoiceType.TUITION,
        feeType: processing_fees_1.FeeType.CARD_FEE,
        valueType: tuition_1.DiscountValueType.AMOUNT,
        value: 0,
        capAmount: 0,
    };
}
exports.CreateProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceType !== processing_fees_1.InvoiceType.TUITION) {
            writer.uint32(16).int32((0, processing_fees_1.invoiceTypeToNumber)(message.invoiceType));
        }
        if (message.feeType !== processing_fees_1.FeeType.CARD_FEE) {
            writer.uint32(24).int32((0, processing_fees_1.feeTypeToNumber)(message.feeType));
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(32).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(41).double(message.value);
        }
        if (message.capAmount !== undefined && message.capAmount !== 0) {
            writer.uint32(49).double(message.capAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.invoiceType = (0, processing_fees_1.invoiceTypeFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.feeType = (0, processing_fees_1.feeTypeFromJSON)(reader.int32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.capAmount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceType: isSet(object.invoiceType) ? (0, processing_fees_1.invoiceTypeFromJSON)(object.invoiceType) : processing_fees_1.InvoiceType.TUITION,
            feeType: isSet(object.feeType) ? (0, processing_fees_1.feeTypeFromJSON)(object.feeType) : processing_fees_1.FeeType.CARD_FEE,
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            capAmount: isSet(object.capAmount) ? globalThis.Number(object.capAmount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceType !== processing_fees_1.InvoiceType.TUITION) {
            obj.invoiceType = (0, processing_fees_1.invoiceTypeToJSON)(message.invoiceType);
        }
        if (message.feeType !== processing_fees_1.FeeType.CARD_FEE) {
            obj.feeType = (0, processing_fees_1.feeTypeToJSON)(message.feeType);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.capAmount !== undefined && message.capAmount !== 0) {
            obj.capAmount = message.capAmount;
        }
        return obj;
    },
    create(base) {
        return exports.CreateProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceType = object.invoiceType ?? processing_fees_1.InvoiceType.TUITION;
        message.feeType = object.feeType ?? processing_fees_1.FeeType.CARD_FEE;
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.capAmount = object.capAmount ?? 0;
        return message;
    },
};
function createBaseGetProcessingFeeRequest() {
    return { context: undefined, id: undefined };
}
exports.GetProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseUpdateProcessingFeeRequest() {
    return {
        context: undefined,
        id: undefined,
        invoiceType: processing_fees_1.InvoiceType.TUITION,
        feeType: processing_fees_1.FeeType.CARD_FEE,
        valueType: tuition_1.DiscountValueType.AMOUNT,
        value: 0,
        capAmount: 0,
    };
}
exports.UpdateProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.invoiceType !== processing_fees_1.InvoiceType.TUITION) {
            writer.uint32(24).int32((0, processing_fees_1.invoiceTypeToNumber)(message.invoiceType));
        }
        if (message.feeType !== processing_fees_1.FeeType.CARD_FEE) {
            writer.uint32(32).int32((0, processing_fees_1.feeTypeToNumber)(message.feeType));
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(40).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(49).double(message.value);
        }
        if (message.capAmount !== undefined && message.capAmount !== 0) {
            writer.uint32(57).double(message.capAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.invoiceType = (0, processing_fees_1.invoiceTypeFromJSON)(reader.int32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.feeType = (0, processing_fees_1.feeTypeFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.capAmount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            invoiceType: isSet(object.invoiceType) ? (0, processing_fees_1.invoiceTypeFromJSON)(object.invoiceType) : processing_fees_1.InvoiceType.TUITION,
            feeType: isSet(object.feeType) ? (0, processing_fees_1.feeTypeFromJSON)(object.feeType) : processing_fees_1.FeeType.CARD_FEE,
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            capAmount: isSet(object.capAmount) ? globalThis.Number(object.capAmount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.invoiceType !== processing_fees_1.InvoiceType.TUITION) {
            obj.invoiceType = (0, processing_fees_1.invoiceTypeToJSON)(message.invoiceType);
        }
        if (message.feeType !== processing_fees_1.FeeType.CARD_FEE) {
            obj.feeType = (0, processing_fees_1.feeTypeToJSON)(message.feeType);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.capAmount !== undefined && message.capAmount !== 0) {
            obj.capAmount = message.capAmount;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.invoiceType = object.invoiceType ?? processing_fees_1.InvoiceType.TUITION;
        message.feeType = object.feeType ?? processing_fees_1.FeeType.CARD_FEE;
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.capAmount = object.capAmount ?? 0;
        return message;
    },
};
function createBaseArchiveProcessingFeeRequest() {
    return { context: undefined, id: undefined };
}
exports.ArchiveProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArchiveProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.ArchiveProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArchiveProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseUnarchiveProcessingFeeRequest() {
    return { context: undefined, id: undefined };
}
exports.UnarchiveProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnarchiveProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.UnarchiveProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnarchiveProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseGetActiveProcessingFeesRequest() {
    return { context: undefined, invoiceType: processing_fees_1.InvoiceType.TUITION };
}
exports.GetActiveProcessingFeesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceType !== processing_fees_1.InvoiceType.TUITION) {
            writer.uint32(16).int32((0, processing_fees_1.invoiceTypeToNumber)(message.invoiceType));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveProcessingFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.invoiceType = (0, processing_fees_1.invoiceTypeFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceType: isSet(object.invoiceType) ? (0, processing_fees_1.invoiceTypeFromJSON)(object.invoiceType) : processing_fees_1.InvoiceType.TUITION,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceType !== processing_fees_1.InvoiceType.TUITION) {
            obj.invoiceType = (0, processing_fees_1.invoiceTypeToJSON)(message.invoiceType);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveProcessingFeesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveProcessingFeesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceType = object.invoiceType ?? processing_fees_1.InvoiceType.TUITION;
        return message;
    },
};
function createBaseGetOrganizationProcessingFeeRequest() {
    return { context: undefined };
}
exports.GetOrganizationProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseUpdateOrganizationProcessingFeeRequest() {
    return { context: undefined, tuitionInvoiceFeesEnabled: false, nonTuitionInvoiceFeesEnabled: false };
}
exports.UpdateOrganizationProcessingFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.tuitionInvoiceFeesEnabled !== false) {
            writer.uint32(16).bool(message.tuitionInvoiceFeesEnabled);
        }
        if (message.nonTuitionInvoiceFeesEnabled !== false) {
            writer.uint32(24).bool(message.nonTuitionInvoiceFeesEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrganizationProcessingFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.tuitionInvoiceFeesEnabled = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nonTuitionInvoiceFeesEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            tuitionInvoiceFeesEnabled: isSet(object.tuitionInvoiceFeesEnabled)
                ? globalThis.Boolean(object.tuitionInvoiceFeesEnabled)
                : false,
            nonTuitionInvoiceFeesEnabled: isSet(object.nonTuitionInvoiceFeesEnabled)
                ? globalThis.Boolean(object.nonTuitionInvoiceFeesEnabled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.tuitionInvoiceFeesEnabled !== false) {
            obj.tuitionInvoiceFeesEnabled = message.tuitionInvoiceFeesEnabled;
        }
        if (message.nonTuitionInvoiceFeesEnabled !== false) {
            obj.nonTuitionInvoiceFeesEnabled = message.nonTuitionInvoiceFeesEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOrganizationProcessingFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOrganizationProcessingFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.tuitionInvoiceFeesEnabled = object.tuitionInvoiceFeesEnabled ?? false;
        message.nonTuitionInvoiceFeesEnabled = object.nonTuitionInvoiceFeesEnabled ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
