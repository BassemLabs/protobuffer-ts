"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/processing_fees.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProcessingFee = exports.ProcessingFee = exports.InvoiceType = exports.FeeType = exports.protobufPackage = void 0;
exports.feeTypeFromJSON = feeTypeFromJSON;
exports.feeTypeToJSON = feeTypeToJSON;
exports.feeTypeToNumber = feeTypeToNumber;
exports.invoiceTypeFromJSON = invoiceTypeFromJSON;
exports.invoiceTypeToJSON = invoiceTypeToJSON;
exports.invoiceTypeToNumber = invoiceTypeToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const tuition_1 = require("./tuition");
exports.protobufPackage = "payment_service";
var FeeType;
(function (FeeType) {
    FeeType["CARD_FEE"] = "CARD_FEE";
    FeeType["BANK_FEE"] = "BANK_FEE";
    FeeType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(FeeType || (exports.FeeType = FeeType = {}));
function feeTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "CARD_FEE":
            return FeeType.CARD_FEE;
        case 2:
        case "BANK_FEE":
            return FeeType.BANK_FEE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FeeType.UNRECOGNIZED;
    }
}
function feeTypeToJSON(object) {
    switch (object) {
        case FeeType.CARD_FEE:
            return "CARD_FEE";
        case FeeType.BANK_FEE:
            return "BANK_FEE";
        case FeeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function feeTypeToNumber(object) {
    switch (object) {
        case FeeType.CARD_FEE:
            return 1;
        case FeeType.BANK_FEE:
            return 2;
        case FeeType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var InvoiceType;
(function (InvoiceType) {
    InvoiceType["TUITION"] = "TUITION";
    InvoiceType["NON_TUITION"] = "NON_TUITION";
    InvoiceType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(InvoiceType || (exports.InvoiceType = InvoiceType = {}));
function invoiceTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "TUITION":
            return InvoiceType.TUITION;
        case 2:
        case "NON_TUITION":
            return InvoiceType.NON_TUITION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return InvoiceType.UNRECOGNIZED;
    }
}
function invoiceTypeToJSON(object) {
    switch (object) {
        case InvoiceType.TUITION:
            return "TUITION";
        case InvoiceType.NON_TUITION:
            return "NON_TUITION";
        case InvoiceType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function invoiceTypeToNumber(object) {
    switch (object) {
        case InvoiceType.TUITION:
            return 1;
        case InvoiceType.NON_TUITION:
            return 2;
        case InvoiceType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseProcessingFee() {
    return {
        id: undefined,
        organization: undefined,
        invoiceType: InvoiceType.TUITION,
        feeType: FeeType.CARD_FEE,
        valueType: tuition_1.DiscountValueType.AMOUNT,
        value: 0,
        capAmount: 0,
        archived: false,
    };
}
exports.ProcessingFee = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.invoiceType !== InvoiceType.TUITION) {
            writer.uint32(24).int32(invoiceTypeToNumber(message.invoiceType));
        }
        if (message.feeType !== FeeType.CARD_FEE) {
            writer.uint32(32).int32(feeTypeToNumber(message.feeType));
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(40).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(49).double(message.value);
        }
        if (message.capAmount !== undefined && message.capAmount !== 0) {
            writer.uint32(57).double(message.capAmount);
        }
        if (message.archived !== false) {
            writer.uint32(64).bool(message.archived);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProcessingFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.invoiceType = invoiceTypeFromJSON(reader.int32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.feeType = feeTypeFromJSON(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.capAmount = reader.double();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            invoiceType: isSet(object.invoiceType) ? invoiceTypeFromJSON(object.invoiceType) : InvoiceType.TUITION,
            feeType: isSet(object.feeType) ? feeTypeFromJSON(object.feeType) : FeeType.CARD_FEE,
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            capAmount: isSet(object.capAmount) ? globalThis.Number(object.capAmount) : 0,
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.invoiceType !== InvoiceType.TUITION) {
            obj.invoiceType = invoiceTypeToJSON(message.invoiceType);
        }
        if (message.feeType !== FeeType.CARD_FEE) {
            obj.feeType = feeTypeToJSON(message.feeType);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.capAmount !== undefined && message.capAmount !== 0) {
            obj.capAmount = message.capAmount;
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        return obj;
    },
    create(base) {
        return exports.ProcessingFee.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProcessingFee();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.invoiceType = object.invoiceType ?? InvoiceType.TUITION;
        message.feeType = object.feeType ?? FeeType.CARD_FEE;
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.capAmount = object.capAmount ?? 0;
        message.archived = object.archived ?? false;
        return message;
    },
};
function createBaseOrganizationProcessingFee() {
    return {
        id: undefined,
        organization: undefined,
        tuitionInvoiceFeesEnabled: false,
        nonTuitionInvoiceFeesEnabled: false,
    };
}
exports.OrganizationProcessingFee = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.tuitionInvoiceFeesEnabled !== false) {
            writer.uint32(24).bool(message.tuitionInvoiceFeesEnabled);
        }
        if (message.nonTuitionInvoiceFeesEnabled !== false) {
            writer.uint32(32).bool(message.nonTuitionInvoiceFeesEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganizationProcessingFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tuitionInvoiceFeesEnabled = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.nonTuitionInvoiceFeesEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            tuitionInvoiceFeesEnabled: isSet(object.tuitionInvoiceFeesEnabled)
                ? globalThis.Boolean(object.tuitionInvoiceFeesEnabled)
                : false,
            nonTuitionInvoiceFeesEnabled: isSet(object.nonTuitionInvoiceFeesEnabled)
                ? globalThis.Boolean(object.nonTuitionInvoiceFeesEnabled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.tuitionInvoiceFeesEnabled !== false) {
            obj.tuitionInvoiceFeesEnabled = message.tuitionInvoiceFeesEnabled;
        }
        if (message.nonTuitionInvoiceFeesEnabled !== false) {
            obj.nonTuitionInvoiceFeesEnabled = message.nonTuitionInvoiceFeesEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.OrganizationProcessingFee.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganizationProcessingFee();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.tuitionInvoiceFeesEnabled = object.tuitionInvoiceFeesEnabled ?? false;
        message.nonTuitionInvoiceFeesEnabled = object.nonTuitionInvoiceFeesEnabled ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
