"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/invoice.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceFilter = exports.InvoiceResponse = exports.Invoice = exports.Coupon = exports.InvoiceItem = exports.AutoPaymentStatus = exports.StudentStatus = exports.InvoiceStatus = exports.protobufPackage = void 0;
exports.invoiceStatusFromJSON = invoiceStatusFromJSON;
exports.invoiceStatusToJSON = invoiceStatusToJSON;
exports.invoiceStatusToNumber = invoiceStatusToNumber;
exports.studentStatusFromJSON = studentStatusFromJSON;
exports.studentStatusToJSON = studentStatusToJSON;
exports.studentStatusToNumber = studentStatusToNumber;
exports.autoPaymentStatusFromJSON = autoPaymentStatusFromJSON;
exports.autoPaymentStatusToJSON = autoPaymentStatusToJSON;
exports.autoPaymentStatusToNumber = autoPaymentStatusToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const transaction_1 = require("./transaction");
const tuition_1 = require("./tuition");
exports.protobufPackage = "payment_service";
var InvoiceStatus;
(function (InvoiceStatus) {
    InvoiceStatus["Paid"] = "Paid";
    InvoiceStatus["NotPaid"] = "NotPaid";
    InvoiceStatus["Overdue"] = "Overdue";
    InvoiceStatus["Refunded"] = "Refunded";
    InvoiceStatus["Processing"] = "Processing";
    InvoiceStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(InvoiceStatus || (exports.InvoiceStatus = InvoiceStatus = {}));
function invoiceStatusFromJSON(object) {
    switch (object) {
        case 1:
        case "Paid":
            return InvoiceStatus.Paid;
        case 2:
        case "NotPaid":
            return InvoiceStatus.NotPaid;
        case 3:
        case "Overdue":
            return InvoiceStatus.Overdue;
        case 4:
        case "Refunded":
            return InvoiceStatus.Refunded;
        case 5:
        case "Processing":
            return InvoiceStatus.Processing;
        case -1:
        case "UNRECOGNIZED":
        default:
            return InvoiceStatus.UNRECOGNIZED;
    }
}
function invoiceStatusToJSON(object) {
    switch (object) {
        case InvoiceStatus.Paid:
            return "Paid";
        case InvoiceStatus.NotPaid:
            return "NotPaid";
        case InvoiceStatus.Overdue:
            return "Overdue";
        case InvoiceStatus.Refunded:
            return "Refunded";
        case InvoiceStatus.Processing:
            return "Processing";
        case InvoiceStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function invoiceStatusToNumber(object) {
    switch (object) {
        case InvoiceStatus.Paid:
            return 1;
        case InvoiceStatus.NotPaid:
            return 2;
        case InvoiceStatus.Overdue:
            return 3;
        case InvoiceStatus.Refunded:
            return 4;
        case InvoiceStatus.Processing:
            return 5;
        case InvoiceStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
/** TODO: this is was fetched automatically from user-service */
var StudentStatus;
(function (StudentStatus) {
    StudentStatus["Waitlist"] = "Waitlist";
    StudentStatus["Interview"] = "Interview";
    StudentStatus["Applicant"] = "Applicant";
    StudentStatus["Rejected"] = "Rejected";
    StudentStatus["Enrolled"] = "Enrolled";
    StudentStatus["ReRegistration"] = "ReRegistration";
    StudentStatus["Withdrawn"] = "Withdrawn";
    StudentStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(StudentStatus || (exports.StudentStatus = StudentStatus = {}));
function studentStatusFromJSON(object) {
    switch (object) {
        case 1:
        case "Waitlist":
            return StudentStatus.Waitlist;
        case 2:
        case "Interview":
            return StudentStatus.Interview;
        case 3:
        case "Applicant":
            return StudentStatus.Applicant;
        case 4:
        case "Rejected":
            return StudentStatus.Rejected;
        case 5:
        case "Enrolled":
            return StudentStatus.Enrolled;
        case 6:
        case "ReRegistration":
            return StudentStatus.ReRegistration;
        case 7:
        case "Withdrawn":
            return StudentStatus.Withdrawn;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StudentStatus.UNRECOGNIZED;
    }
}
function studentStatusToJSON(object) {
    switch (object) {
        case StudentStatus.Waitlist:
            return "Waitlist";
        case StudentStatus.Interview:
            return "Interview";
        case StudentStatus.Applicant:
            return "Applicant";
        case StudentStatus.Rejected:
            return "Rejected";
        case StudentStatus.Enrolled:
            return "Enrolled";
        case StudentStatus.ReRegistration:
            return "ReRegistration";
        case StudentStatus.Withdrawn:
            return "Withdrawn";
        case StudentStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function studentStatusToNumber(object) {
    switch (object) {
        case StudentStatus.Waitlist:
            return 1;
        case StudentStatus.Interview:
            return 2;
        case StudentStatus.Applicant:
            return 3;
        case StudentStatus.Rejected:
            return 4;
        case StudentStatus.Enrolled:
            return 5;
        case StudentStatus.ReRegistration:
            return 6;
        case StudentStatus.Withdrawn:
            return 7;
        case StudentStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
var AutoPaymentStatus;
(function (AutoPaymentStatus) {
    /** AutoPayPending - Pending to be paid, not yet queued */
    AutoPaymentStatus["AutoPayPending"] = "AutoPayPending";
    /** AutoPayQueued - Queued to be charged by the payment consumer */
    AutoPaymentStatus["AutoPayQueued"] = "AutoPayQueued";
    /** AutoPayQueueFailed - Failed to queue */
    AutoPaymentStatus["AutoPayQueueFailed"] = "AutoPayQueueFailed";
    /** AutoPayProcessing - The auto payment is processing */
    AutoPaymentStatus["AutoPayProcessing"] = "AutoPayProcessing";
    /** AutoPaySucceeded - The auto payment succeeded */
    AutoPaymentStatus["AutoPaySucceeded"] = "AutoPaySucceeded";
    /** AutoPayFailed - The auto payment failed */
    AutoPaymentStatus["AutoPayFailed"] = "AutoPayFailed";
    AutoPaymentStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(AutoPaymentStatus || (exports.AutoPaymentStatus = AutoPaymentStatus = {}));
function autoPaymentStatusFromJSON(object) {
    switch (object) {
        case 1:
        case "AutoPayPending":
            return AutoPaymentStatus.AutoPayPending;
        case 2:
        case "AutoPayQueued":
            return AutoPaymentStatus.AutoPayQueued;
        case 3:
        case "AutoPayQueueFailed":
            return AutoPaymentStatus.AutoPayQueueFailed;
        case 4:
        case "AutoPayProcessing":
            return AutoPaymentStatus.AutoPayProcessing;
        case 5:
        case "AutoPaySucceeded":
            return AutoPaymentStatus.AutoPaySucceeded;
        case 6:
        case "AutoPayFailed":
            return AutoPaymentStatus.AutoPayFailed;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AutoPaymentStatus.UNRECOGNIZED;
    }
}
function autoPaymentStatusToJSON(object) {
    switch (object) {
        case AutoPaymentStatus.AutoPayPending:
            return "AutoPayPending";
        case AutoPaymentStatus.AutoPayQueued:
            return "AutoPayQueued";
        case AutoPaymentStatus.AutoPayQueueFailed:
            return "AutoPayQueueFailed";
        case AutoPaymentStatus.AutoPayProcessing:
            return "AutoPayProcessing";
        case AutoPaymentStatus.AutoPaySucceeded:
            return "AutoPaySucceeded";
        case AutoPaymentStatus.AutoPayFailed:
            return "AutoPayFailed";
        case AutoPaymentStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function autoPaymentStatusToNumber(object) {
    switch (object) {
        case AutoPaymentStatus.AutoPayPending:
            return 1;
        case AutoPaymentStatus.AutoPayQueued:
            return 2;
        case AutoPaymentStatus.AutoPayQueueFailed:
            return 3;
        case AutoPaymentStatus.AutoPayProcessing:
            return 4;
        case AutoPaymentStatus.AutoPaySucceeded:
            return 5;
        case AutoPaymentStatus.AutoPayFailed:
            return 6;
        case AutoPaymentStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseInvoiceItem() {
    return { title: "", description: "", price: 0, quantity: 0, isBassemLabsFee: false };
}
exports.InvoiceItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.price !== 0) {
            writer.uint32(25).double(message.price);
        }
        if (message.quantity !== 0) {
            writer.uint32(32).int32(message.quantity);
        }
        if (message.isBassemLabsFee !== undefined && message.isBassemLabsFee !== false) {
            writer.uint32(40).bool(message.isBassemLabsFee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvoiceItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 25) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isBassemLabsFee = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
            isBassemLabsFee: isSet(object.isBassemLabsFee) ? globalThis.Boolean(object.isBassemLabsFee) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.isBassemLabsFee !== undefined && message.isBassemLabsFee !== false) {
            obj.isBassemLabsFee = message.isBassemLabsFee;
        }
        return obj;
    },
    create(base) {
        return exports.InvoiceItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvoiceItem();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.price = object.price ?? 0;
        message.quantity = object.quantity ?? 0;
        message.isBassemLabsFee = object.isBassemLabsFee ?? false;
        return message;
    },
};
function createBaseCoupon() {
    return { title: "", valueType: tuition_1.DiscountValueType.AMOUNT, value: 0 };
}
exports.Coupon = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(16).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(25).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCoupon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 25) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Coupon.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCoupon();
        message.title = object.title ?? "";
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        return message;
    },
};
function createBaseInvoice() {
    return {
        id: undefined,
        organization: undefined,
        invoiceNumber: 0,
        title: "",
        description: "",
        showHst: false,
        disableTax: false,
        archived: false,
        user: undefined,
        family: undefined,
        items: [],
        coupons: [],
        dueDate: undefined,
        invoiceStudentRegistrationPipelineStatus: StudentStatus.Waitlist,
        schoolYear: undefined,
        autoPayEnabled: false,
        chargeOnDate: undefined,
        autoPaymentStatus: AutoPaymentStatus.AutoPayPending,
    };
}
exports.Invoice = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.invoiceNumber !== 0) {
            writer.uint32(24).int32(message.invoiceNumber);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.showHst !== false) {
            writer.uint32(48).bool(message.showHst);
        }
        if (message.disableTax !== false) {
            writer.uint32(56).bool(message.disableTax);
        }
        if (message.archived !== false) {
            writer.uint32(64).bool(message.archived);
        }
        if (message.user !== undefined) {
            object_id_1.ObjectId.encode(message.user, writer.uint32(74).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(82).fork()).join();
        }
        for (const v of message.items) {
            exports.InvoiceItem.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.coupons) {
            exports.Coupon.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(106).fork()).join();
        }
        if (message.invoiceStudentRegistrationPipelineStatus !== undefined &&
            message.invoiceStudentRegistrationPipelineStatus !== StudentStatus.Waitlist) {
            writer.uint32(112).int32(studentStatusToNumber(message.invoiceStudentRegistrationPipelineStatus));
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(122).fork()).join();
        }
        if (message.autoPayEnabled !== undefined && message.autoPayEnabled !== false) {
            writer.uint32(128).bool(message.autoPayEnabled);
        }
        if (message.chargeOnDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.chargeOnDate), writer.uint32(138).fork()).join();
        }
        if (message.autoPaymentStatus !== undefined && message.autoPaymentStatus !== AutoPaymentStatus.AutoPayPending) {
            writer.uint32(144).int32(autoPaymentStatusToNumber(message.autoPaymentStatus));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvoice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.invoiceNumber = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.showHst = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.disableTax = reader.bool();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.user = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.items.push(exports.InvoiceItem.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.coupons.push(exports.Coupon.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.invoiceStudentRegistrationPipelineStatus = studentStatusFromJSON(reader.int32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.autoPayEnabled = reader.bool();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.chargeOnDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 18:
                    if (tag !== 144) {
                        break;
                    }
                    message.autoPaymentStatus = autoPaymentStatusFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            invoiceNumber: isSet(object.invoiceNumber) ? globalThis.Number(object.invoiceNumber) : 0,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            showHst: isSet(object.showHst) ? globalThis.Boolean(object.showHst) : false,
            disableTax: isSet(object.disableTax) ? globalThis.Boolean(object.disableTax) : false,
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
            user: isSet(object.user) ? object_id_1.ObjectId.fromJSON(object.user) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            items: globalThis.Array.isArray(object?.items) ? object.items.map((e) => exports.InvoiceItem.fromJSON(e)) : [],
            coupons: globalThis.Array.isArray(object?.coupons) ? object.coupons.map((e) => exports.Coupon.fromJSON(e)) : [],
            dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
            invoiceStudentRegistrationPipelineStatus: isSet(object.invoiceStudentRegistrationPipelineStatus)
                ? studentStatusFromJSON(object.invoiceStudentRegistrationPipelineStatus)
                : StudentStatus.Waitlist,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            autoPayEnabled: isSet(object.autoPayEnabled) ? globalThis.Boolean(object.autoPayEnabled) : false,
            chargeOnDate: isSet(object.chargeOnDate) ? fromJsonTimestamp(object.chargeOnDate) : undefined,
            autoPaymentStatus: isSet(object.autoPaymentStatus)
                ? autoPaymentStatusFromJSON(object.autoPaymentStatus)
                : AutoPaymentStatus.AutoPayPending,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.invoiceNumber !== 0) {
            obj.invoiceNumber = Math.round(message.invoiceNumber);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.showHst !== false) {
            obj.showHst = message.showHst;
        }
        if (message.disableTax !== false) {
            obj.disableTax = message.disableTax;
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        if (message.user !== undefined) {
            obj.user = object_id_1.ObjectId.toJSON(message.user);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.items?.length) {
            obj.items = message.items.map((e) => exports.InvoiceItem.toJSON(e));
        }
        if (message.coupons?.length) {
            obj.coupons = message.coupons.map((e) => exports.Coupon.toJSON(e));
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        if (message.invoiceStudentRegistrationPipelineStatus !== undefined &&
            message.invoiceStudentRegistrationPipelineStatus !== StudentStatus.Waitlist) {
            obj.invoiceStudentRegistrationPipelineStatus = studentStatusToJSON(message.invoiceStudentRegistrationPipelineStatus);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.autoPayEnabled !== undefined && message.autoPayEnabled !== false) {
            obj.autoPayEnabled = message.autoPayEnabled;
        }
        if (message.chargeOnDate !== undefined) {
            obj.chargeOnDate = message.chargeOnDate.toISOString();
        }
        if (message.autoPaymentStatus !== undefined && message.autoPaymentStatus !== AutoPaymentStatus.AutoPayPending) {
            obj.autoPaymentStatus = autoPaymentStatusToJSON(message.autoPaymentStatus);
        }
        return obj;
    },
    create(base) {
        return exports.Invoice.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvoice();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.invoiceNumber = object.invoiceNumber ?? 0;
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.showHst = object.showHst ?? false;
        message.disableTax = object.disableTax ?? false;
        message.archived = object.archived ?? false;
        message.user = (object.user !== undefined && object.user !== null) ? object_id_1.ObjectId.fromPartial(object.user) : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.items = object.items?.map((e) => exports.InvoiceItem.fromPartial(e)) || [];
        message.coupons = object.coupons?.map((e) => exports.Coupon.fromPartial(e)) || [];
        message.dueDate = object.dueDate ?? undefined;
        message.invoiceStudentRegistrationPipelineStatus = object.invoiceStudentRegistrationPipelineStatus ??
            StudentStatus.Waitlist;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.autoPayEnabled = object.autoPayEnabled ?? false;
        message.chargeOnDate = object.chargeOnDate ?? undefined;
        message.autoPaymentStatus = object.autoPaymentStatus ?? AutoPaymentStatus.AutoPayPending;
        return message;
    },
};
function createBaseInvoiceResponse() {
    return {
        invoice: undefined,
        transactions: [],
        totalAmount: 0,
        totalAmountPaid: 0,
        status: InvoiceStatus.Paid,
        billToName: "",
    };
}
exports.InvoiceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invoice !== undefined) {
            exports.Invoice.encode(message.invoice, writer.uint32(10).fork()).join();
        }
        for (const v of message.transactions) {
            transaction_1.Transaction.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.totalAmount !== 0) {
            writer.uint32(25).double(message.totalAmount);
        }
        if (message.totalAmountPaid !== 0) {
            writer.uint32(33).double(message.totalAmountPaid);
        }
        if (message.status !== InvoiceStatus.Paid) {
            writer.uint32(40).int32(invoiceStatusToNumber(message.status));
        }
        if (message.billToName !== undefined && message.billToName !== "") {
            writer.uint32(50).string(message.billToName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvoiceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoice = exports.Invoice.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.transactions.push(transaction_1.Transaction.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 25) {
                        break;
                    }
                    message.totalAmount = reader.double();
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.totalAmountPaid = reader.double();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = invoiceStatusFromJSON(reader.int32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.billToName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoice: isSet(object.invoice) ? exports.Invoice.fromJSON(object.invoice) : undefined,
            transactions: globalThis.Array.isArray(object?.transactions)
                ? object.transactions.map((e) => transaction_1.Transaction.fromJSON(e))
                : [],
            totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : 0,
            totalAmountPaid: isSet(object.totalAmountPaid) ? globalThis.Number(object.totalAmountPaid) : 0,
            status: isSet(object.status) ? invoiceStatusFromJSON(object.status) : InvoiceStatus.Paid,
            billToName: isSet(object.billToName) ? globalThis.String(object.billToName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoice !== undefined) {
            obj.invoice = exports.Invoice.toJSON(message.invoice);
        }
        if (message.transactions?.length) {
            obj.transactions = message.transactions.map((e) => transaction_1.Transaction.toJSON(e));
        }
        if (message.totalAmount !== 0) {
            obj.totalAmount = message.totalAmount;
        }
        if (message.totalAmountPaid !== 0) {
            obj.totalAmountPaid = message.totalAmountPaid;
        }
        if (message.status !== InvoiceStatus.Paid) {
            obj.status = invoiceStatusToJSON(message.status);
        }
        if (message.billToName !== undefined && message.billToName !== "") {
            obj.billToName = message.billToName;
        }
        return obj;
    },
    create(base) {
        return exports.InvoiceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvoiceResponse();
        message.invoice = (object.invoice !== undefined && object.invoice !== null)
            ? exports.Invoice.fromPartial(object.invoice)
            : undefined;
        message.transactions = object.transactions?.map((e) => transaction_1.Transaction.fromPartial(e)) || [];
        message.totalAmount = object.totalAmount ?? 0;
        message.totalAmountPaid = object.totalAmountPaid ?? 0;
        message.status = object.status ?? InvoiceStatus.Paid;
        message.billToName = object.billToName ?? "";
        return message;
    },
};
function createBaseInvoiceFilter() {
    return { perPage: 0, page: 0, title: "", status: InvoiceStatus.Paid, archived: false };
}
exports.InvoiceFilter = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.perPage !== undefined && message.perPage !== 0) {
            writer.uint32(8).int32(message.perPage);
        }
        if (message.page !== undefined && message.page !== 0) {
            writer.uint32(16).int32(message.page);
        }
        if (message.title !== undefined && message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.status !== undefined && message.status !== InvoiceStatus.Paid) {
            writer.uint32(32).int32(invoiceStatusToNumber(message.status));
        }
        if (message.archived !== undefined && message.archived !== false) {
            writer.uint32(40).bool(message.archived);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvoiceFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.perPage = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.page = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.status = invoiceStatusFromJSON(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
            page: isSet(object.page) ? globalThis.Number(object.page) : 0,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            status: isSet(object.status) ? invoiceStatusFromJSON(object.status) : InvoiceStatus.Paid,
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.perPage !== undefined && message.perPage !== 0) {
            obj.perPage = Math.round(message.perPage);
        }
        if (message.page !== undefined && message.page !== 0) {
            obj.page = Math.round(message.page);
        }
        if (message.title !== undefined && message.title !== "") {
            obj.title = message.title;
        }
        if (message.status !== undefined && message.status !== InvoiceStatus.Paid) {
            obj.status = invoiceStatusToJSON(message.status);
        }
        if (message.archived !== undefined && message.archived !== false) {
            obj.archived = message.archived;
        }
        return obj;
    },
    create(base) {
        return exports.InvoiceFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvoiceFilter();
        message.perPage = object.perPage ?? 0;
        message.page = object.page ?? 0;
        message.title = object.title ?? "";
        message.status = object.status ?? InvoiceStatus.Paid;
        message.archived = object.archived ?? false;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
