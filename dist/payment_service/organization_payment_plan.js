"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/organization_payment_plan.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationPaymentPlanWithInfo = exports.OrganizationPaymentPlanInformation = exports.OrganizationPlanAccess = exports.OrganizationPaymentPlan = exports.PaymentInterval = exports.protobufPackage = void 0;
exports.paymentIntervalFromJSON = paymentIntervalFromJSON;
exports.paymentIntervalToJSON = paymentIntervalToJSON;
exports.paymentIntervalToNumber = paymentIntervalToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const organization_1 = require("../organization_service/organization");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "payment_service";
var PaymentInterval;
(function (PaymentInterval) {
    PaymentInterval["Monthly"] = "Monthly";
    PaymentInterval["Quarterly"] = "Quarterly";
    PaymentInterval["SemiAnnually"] = "SemiAnnually";
    PaymentInterval["Annually"] = "Annually";
    PaymentInterval["UNRECOGNIZED"] = "UNRECOGNIZED";
})(PaymentInterval || (exports.PaymentInterval = PaymentInterval = {}));
function paymentIntervalFromJSON(object) {
    switch (object) {
        case 1:
        case "Monthly":
            return PaymentInterval.Monthly;
        case 2:
        case "Quarterly":
            return PaymentInterval.Quarterly;
        case 3:
        case "SemiAnnually":
            return PaymentInterval.SemiAnnually;
        case 4:
        case "Annually":
            return PaymentInterval.Annually;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PaymentInterval.UNRECOGNIZED;
    }
}
function paymentIntervalToJSON(object) {
    switch (object) {
        case PaymentInterval.Monthly:
            return "Monthly";
        case PaymentInterval.Quarterly:
            return "Quarterly";
        case PaymentInterval.SemiAnnually:
            return "SemiAnnually";
        case PaymentInterval.Annually:
            return "Annually";
        case PaymentInterval.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function paymentIntervalToNumber(object) {
    switch (object) {
        case PaymentInterval.Monthly:
            return 1;
        case PaymentInterval.Quarterly:
            return 2;
        case PaymentInterval.SemiAnnually:
            return 3;
        case PaymentInterval.Annually:
            return 4;
        case PaymentInterval.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseOrganizationPaymentPlan() {
    return {
        id: undefined,
        name: "",
        description: "",
        currency: organization_1.Currency.USD,
        isPublic: false,
        isActive: false,
        upfrontCost: 0,
        upfrontCostPaymentInterval: PaymentInterval.Monthly,
        perStudentCost: 0,
        paymentProcessingPercentage: 0,
    };
}
exports.OrganizationPaymentPlan = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.currency !== organization_1.Currency.USD) {
            writer.uint32(32).int32((0, organization_1.currencyToNumber)(message.currency));
        }
        if (message.isPublic !== false) {
            writer.uint32(40).bool(message.isPublic);
        }
        if (message.isActive !== false) {
            writer.uint32(48).bool(message.isActive);
        }
        if (message.upfrontCost !== 0) {
            writer.uint32(57).double(message.upfrontCost);
        }
        if (message.upfrontCostPaymentInterval !== PaymentInterval.Monthly) {
            writer.uint32(64).int32(paymentIntervalToNumber(message.upfrontCostPaymentInterval));
        }
        if (message.perStudentCost !== 0) {
            writer.uint32(73).double(message.perStudentCost);
        }
        if (message.paymentProcessingPercentage !== 0) {
            writer.uint32(81).double(message.paymentProcessingPercentage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganizationPaymentPlan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.currency = (0, organization_1.currencyFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isPublic = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.isActive = reader.bool();
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.upfrontCost = reader.double();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.upfrontCostPaymentInterval = paymentIntervalFromJSON(reader.int32());
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.perStudentCost = reader.double();
                    continue;
                case 10:
                    if (tag !== 81) {
                        break;
                    }
                    message.paymentProcessingPercentage = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            currency: isSet(object.currency) ? (0, organization_1.currencyFromJSON)(object.currency) : organization_1.Currency.USD,
            isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
            isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
            upfrontCost: isSet(object.upfrontCost) ? globalThis.Number(object.upfrontCost) : 0,
            upfrontCostPaymentInterval: isSet(object.upfrontCostPaymentInterval)
                ? paymentIntervalFromJSON(object.upfrontCostPaymentInterval)
                : PaymentInterval.Monthly,
            perStudentCost: isSet(object.perStudentCost) ? globalThis.Number(object.perStudentCost) : 0,
            paymentProcessingPercentage: isSet(object.paymentProcessingPercentage)
                ? globalThis.Number(object.paymentProcessingPercentage)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.currency !== organization_1.Currency.USD) {
            obj.currency = (0, organization_1.currencyToJSON)(message.currency);
        }
        if (message.isPublic !== false) {
            obj.isPublic = message.isPublic;
        }
        if (message.isActive !== false) {
            obj.isActive = message.isActive;
        }
        if (message.upfrontCost !== 0) {
            obj.upfrontCost = message.upfrontCost;
        }
        if (message.upfrontCostPaymentInterval !== PaymentInterval.Monthly) {
            obj.upfrontCostPaymentInterval = paymentIntervalToJSON(message.upfrontCostPaymentInterval);
        }
        if (message.perStudentCost !== 0) {
            obj.perStudentCost = message.perStudentCost;
        }
        if (message.paymentProcessingPercentage !== 0) {
            obj.paymentProcessingPercentage = message.paymentProcessingPercentage;
        }
        return obj;
    },
    create(base) {
        return exports.OrganizationPaymentPlan.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganizationPaymentPlan();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.currency = object.currency ?? organization_1.Currency.USD;
        message.isPublic = object.isPublic ?? false;
        message.isActive = object.isActive ?? false;
        message.upfrontCost = object.upfrontCost ?? 0;
        message.upfrontCostPaymentInterval = object.upfrontCostPaymentInterval ?? PaymentInterval.Monthly;
        message.perStudentCost = object.perStudentCost ?? 0;
        message.paymentProcessingPercentage = object.paymentProcessingPercentage ?? 0;
        return message;
    },
};
function createBaseOrganizationPlanAccess() {
    return { organizationId: undefined, paymentPlanId: undefined };
}
exports.OrganizationPlanAccess = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(10).fork()).join();
        }
        if (message.paymentPlanId !== undefined) {
            object_id_1.ObjectId.encode(message.paymentPlanId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganizationPlanAccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.paymentPlanId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            paymentPlanId: isSet(object.paymentPlanId) ? object_id_1.ObjectId.fromJSON(object.paymentPlanId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.paymentPlanId !== undefined) {
            obj.paymentPlanId = object_id_1.ObjectId.toJSON(message.paymentPlanId);
        }
        return obj;
    },
    create(base) {
        return exports.OrganizationPlanAccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganizationPlanAccess();
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.paymentPlanId = (object.paymentPlanId !== undefined && object.paymentPlanId !== null)
            ? object_id_1.ObjectId.fromPartial(object.paymentPlanId)
            : undefined;
        return message;
    },
};
function createBaseOrganizationPaymentPlanInformation() {
    return {
        id: undefined,
        organizationId: undefined,
        paymentPlan: undefined,
        deferPerStudentCostToParent: false,
        startDate: undefined,
        endDate: undefined,
    };
}
exports.OrganizationPaymentPlanInformation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.paymentPlan !== undefined) {
            object_id_1.ObjectId.encode(message.paymentPlan, writer.uint32(26).fork()).join();
        }
        if (message.deferPerStudentCostToParent !== false) {
            writer.uint32(32).bool(message.deferPerStudentCostToParent);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(42).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganizationPaymentPlanInformation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.paymentPlan = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.deferPerStudentCostToParent = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            paymentPlan: isSet(object.paymentPlan) ? object_id_1.ObjectId.fromJSON(object.paymentPlan) : undefined,
            deferPerStudentCostToParent: isSet(object.deferPerStudentCostToParent)
                ? globalThis.Boolean(object.deferPerStudentCostToParent)
                : false,
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.paymentPlan !== undefined) {
            obj.paymentPlan = object_id_1.ObjectId.toJSON(message.paymentPlan);
        }
        if (message.deferPerStudentCostToParent !== false) {
            obj.deferPerStudentCostToParent = message.deferPerStudentCostToParent;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.OrganizationPaymentPlanInformation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganizationPaymentPlanInformation();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.paymentPlan = (object.paymentPlan !== undefined && object.paymentPlan !== null)
            ? object_id_1.ObjectId.fromPartial(object.paymentPlan)
            : undefined;
        message.deferPerStudentCostToParent = object.deferPerStudentCostToParent ?? false;
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        return message;
    },
};
function createBaseOrganizationPaymentPlanWithInfo() {
    return { paymentPlan: undefined, paymentPlanInfo: undefined };
}
exports.OrganizationPaymentPlanWithInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.paymentPlan !== undefined) {
            exports.OrganizationPaymentPlan.encode(message.paymentPlan, writer.uint32(10).fork()).join();
        }
        if (message.paymentPlanInfo !== undefined) {
            exports.OrganizationPaymentPlanInformation.encode(message.paymentPlanInfo, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganizationPaymentPlanWithInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.paymentPlan = exports.OrganizationPaymentPlan.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.paymentPlanInfo = exports.OrganizationPaymentPlanInformation.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentPlan: isSet(object.paymentPlan) ? exports.OrganizationPaymentPlan.fromJSON(object.paymentPlan) : undefined,
            paymentPlanInfo: isSet(object.paymentPlanInfo)
                ? exports.OrganizationPaymentPlanInformation.fromJSON(object.paymentPlanInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentPlan !== undefined) {
            obj.paymentPlan = exports.OrganizationPaymentPlan.toJSON(message.paymentPlan);
        }
        if (message.paymentPlanInfo !== undefined) {
            obj.paymentPlanInfo = exports.OrganizationPaymentPlanInformation.toJSON(message.paymentPlanInfo);
        }
        return obj;
    },
    create(base) {
        return exports.OrganizationPaymentPlanWithInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganizationPaymentPlanWithInfo();
        message.paymentPlan = (object.paymentPlan !== undefined && object.paymentPlan !== null)
            ? exports.OrganizationPaymentPlan.fromPartial(object.paymentPlan)
            : undefined;
        message.paymentPlanInfo = (object.paymentPlanInfo !== undefined && object.paymentPlanInfo !== null)
            ? exports.OrganizationPaymentPlanInformation.fromPartial(object.paymentPlanInfo)
            : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
