"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/transaction.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefundTransaction = exports.Transaction = exports.RefundTransactionStatus = exports.PaymentType = exports.TransactionStatus = exports.protobufPackage = void 0;
exports.transactionStatusFromJSON = transactionStatusFromJSON;
exports.transactionStatusToJSON = transactionStatusToJSON;
exports.transactionStatusToNumber = transactionStatusToNumber;
exports.paymentTypeFromJSON = paymentTypeFromJSON;
exports.paymentTypeToJSON = paymentTypeToJSON;
exports.paymentTypeToNumber = paymentTypeToNumber;
exports.refundTransactionStatusFromJSON = refundTransactionStatusFromJSON;
exports.refundTransactionStatusToJSON = refundTransactionStatusToJSON;
exports.refundTransactionStatusToNumber = refundTransactionStatusToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const organization_1 = require("../organization_service/organization");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "payment_service_transaction";
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["Created"] = "Created";
    TransactionStatus["Declined"] = "Declined";
    TransactionStatus["RefundedDoNotUseAnymore"] = "RefundedDoNotUseAnymore";
    TransactionStatus["Processing"] = "Processing";
    TransactionStatus["Paid"] = "Paid";
    TransactionStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(TransactionStatus || (exports.TransactionStatus = TransactionStatus = {}));
function transactionStatusFromJSON(object) {
    switch (object) {
        case 1:
        case "Created":
            return TransactionStatus.Created;
        case 2:
        case "Declined":
            return TransactionStatus.Declined;
        case 3:
        case "RefundedDoNotUseAnymore":
            return TransactionStatus.RefundedDoNotUseAnymore;
        case 4:
        case "Processing":
            return TransactionStatus.Processing;
        case 5:
        case "Paid":
            return TransactionStatus.Paid;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TransactionStatus.UNRECOGNIZED;
    }
}
function transactionStatusToJSON(object) {
    switch (object) {
        case TransactionStatus.Created:
            return "Created";
        case TransactionStatus.Declined:
            return "Declined";
        case TransactionStatus.RefundedDoNotUseAnymore:
            return "RefundedDoNotUseAnymore";
        case TransactionStatus.Processing:
            return "Processing";
        case TransactionStatus.Paid:
            return "Paid";
        case TransactionStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function transactionStatusToNumber(object) {
    switch (object) {
        case TransactionStatus.Created:
            return 1;
        case TransactionStatus.Declined:
            return 2;
        case TransactionStatus.RefundedDoNotUseAnymore:
            return 3;
        case TransactionStatus.Processing:
            return 4;
        case TransactionStatus.Paid:
            return 5;
        case TransactionStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
var PaymentType;
(function (PaymentType) {
    PaymentType["Stripe"] = "Stripe";
    PaymentType["Cash"] = "Cash";
    PaymentType["Cheque"] = "Cheque";
    PaymentType["Card"] = "Card";
    /** ORGANIZATION_INVOICE - application fee from non-tuition invoice transactions (deferred bassemlabs fee) */
    PaymentType["ORGANIZATION_INVOICE"] = "ORGANIZATION_INVOICE";
    PaymentType["Other"] = "Other";
    PaymentType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(PaymentType || (exports.PaymentType = PaymentType = {}));
function paymentTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "Stripe":
            return PaymentType.Stripe;
        case 2:
        case "Cash":
            return PaymentType.Cash;
        case 3:
        case "Cheque":
            return PaymentType.Cheque;
        case 4:
        case "Card":
            return PaymentType.Card;
        case 5:
        case "ORGANIZATION_INVOICE":
            return PaymentType.ORGANIZATION_INVOICE;
        case 6:
        case "Other":
            return PaymentType.Other;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PaymentType.UNRECOGNIZED;
    }
}
function paymentTypeToJSON(object) {
    switch (object) {
        case PaymentType.Stripe:
            return "Stripe";
        case PaymentType.Cash:
            return "Cash";
        case PaymentType.Cheque:
            return "Cheque";
        case PaymentType.Card:
            return "Card";
        case PaymentType.ORGANIZATION_INVOICE:
            return "ORGANIZATION_INVOICE";
        case PaymentType.Other:
            return "Other";
        case PaymentType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function paymentTypeToNumber(object) {
    switch (object) {
        case PaymentType.Stripe:
            return 1;
        case PaymentType.Cash:
            return 2;
        case PaymentType.Cheque:
            return 3;
        case PaymentType.Card:
            return 4;
        case PaymentType.ORGANIZATION_INVOICE:
            return 5;
        case PaymentType.Other:
            return 6;
        case PaymentType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var RefundTransactionStatus;
(function (RefundTransactionStatus) {
    RefundTransactionStatus["Pending"] = "Pending";
    RefundTransactionStatus["Succeeded"] = "Succeeded";
    RefundTransactionStatus["Failed"] = "Failed";
    RefundTransactionStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(RefundTransactionStatus || (exports.RefundTransactionStatus = RefundTransactionStatus = {}));
function refundTransactionStatusFromJSON(object) {
    switch (object) {
        case 1:
        case "Pending":
            return RefundTransactionStatus.Pending;
        case 2:
        case "Succeeded":
            return RefundTransactionStatus.Succeeded;
        case 3:
        case "Failed":
            return RefundTransactionStatus.Failed;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RefundTransactionStatus.UNRECOGNIZED;
    }
}
function refundTransactionStatusToJSON(object) {
    switch (object) {
        case RefundTransactionStatus.Pending:
            return "Pending";
        case RefundTransactionStatus.Succeeded:
            return "Succeeded";
        case RefundTransactionStatus.Failed:
            return "Failed";
        case RefundTransactionStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function refundTransactionStatusToNumber(object) {
    switch (object) {
        case RefundTransactionStatus.Pending:
            return 1;
        case RefundTransactionStatus.Succeeded:
            return 2;
        case RefundTransactionStatus.Failed:
            return 3;
        case RefundTransactionStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseTransaction() {
    return {
        id: undefined,
        organization: undefined,
        stripePaymentIntentId: "",
        currency: organization_1.Currency.USD,
        status: TransactionStatus.Created,
        paymentType: PaymentType.Stripe,
        date: undefined,
        invoice: undefined,
        amount: 0,
        declinedReason: "",
        processingFeeAmount: 0,
        bassemLabsFee: 0,
        invoiceSurcharge: 0,
    };
}
exports.Transaction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.stripePaymentIntentId !== "") {
            writer.uint32(26).string(message.stripePaymentIntentId);
        }
        if (message.currency !== organization_1.Currency.USD) {
            writer.uint32(32).int32((0, organization_1.currencyToNumber)(message.currency));
        }
        if (message.status !== TransactionStatus.Created) {
            writer.uint32(40).int32(transactionStatusToNumber(message.status));
        }
        if (message.paymentType !== PaymentType.Stripe) {
            writer.uint32(48).int32(paymentTypeToNumber(message.paymentType));
        }
        if (message.date !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.date), writer.uint32(58).fork()).join();
        }
        if (message.invoice !== undefined) {
            object_id_1.ObjectId.encode(message.invoice, writer.uint32(66).fork()).join();
        }
        if (message.amount !== 0) {
            writer.uint32(73).double(message.amount);
        }
        if (message.declinedReason !== undefined && message.declinedReason !== "") {
            writer.uint32(82).string(message.declinedReason);
        }
        if (message.processingFeeAmount !== undefined && message.processingFeeAmount !== 0) {
            writer.uint32(89).double(message.processingFeeAmount);
        }
        if (message.bassemLabsFee !== undefined && message.bassemLabsFee !== 0) {
            writer.uint32(97).double(message.bassemLabsFee);
        }
        if (message.invoiceSurcharge !== undefined && message.invoiceSurcharge !== 0) {
            writer.uint32(105).double(message.invoiceSurcharge);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransaction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stripePaymentIntentId = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.currency = (0, organization_1.currencyFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = transactionStatusFromJSON(reader.int32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.paymentType = paymentTypeFromJSON(reader.int32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.date = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.invoice = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.declinedReason = reader.string();
                    continue;
                case 11:
                    if (tag !== 89) {
                        break;
                    }
                    message.processingFeeAmount = reader.double();
                    continue;
                case 12:
                    if (tag !== 97) {
                        break;
                    }
                    message.bassemLabsFee = reader.double();
                    continue;
                case 13:
                    if (tag !== 105) {
                        break;
                    }
                    message.invoiceSurcharge = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            stripePaymentIntentId: isSet(object.stripePaymentIntentId) ? globalThis.String(object.stripePaymentIntentId) : "",
            currency: isSet(object.currency) ? (0, organization_1.currencyFromJSON)(object.currency) : organization_1.Currency.USD,
            status: isSet(object.status) ? transactionStatusFromJSON(object.status) : TransactionStatus.Created,
            paymentType: isSet(object.paymentType) ? paymentTypeFromJSON(object.paymentType) : PaymentType.Stripe,
            date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
            invoice: isSet(object.invoice) ? object_id_1.ObjectId.fromJSON(object.invoice) : undefined,
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            declinedReason: isSet(object.declinedReason) ? globalThis.String(object.declinedReason) : "",
            processingFeeAmount: isSet(object.processingFeeAmount) ? globalThis.Number(object.processingFeeAmount) : 0,
            bassemLabsFee: isSet(object.bassemLabsFee) ? globalThis.Number(object.bassemLabsFee) : 0,
            invoiceSurcharge: isSet(object.invoiceSurcharge) ? globalThis.Number(object.invoiceSurcharge) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.stripePaymentIntentId !== "") {
            obj.stripePaymentIntentId = message.stripePaymentIntentId;
        }
        if (message.currency !== organization_1.Currency.USD) {
            obj.currency = (0, organization_1.currencyToJSON)(message.currency);
        }
        if (message.status !== TransactionStatus.Created) {
            obj.status = transactionStatusToJSON(message.status);
        }
        if (message.paymentType !== PaymentType.Stripe) {
            obj.paymentType = paymentTypeToJSON(message.paymentType);
        }
        if (message.date !== undefined) {
            obj.date = message.date.toISOString();
        }
        if (message.invoice !== undefined) {
            obj.invoice = object_id_1.ObjectId.toJSON(message.invoice);
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.declinedReason !== undefined && message.declinedReason !== "") {
            obj.declinedReason = message.declinedReason;
        }
        if (message.processingFeeAmount !== undefined && message.processingFeeAmount !== 0) {
            obj.processingFeeAmount = message.processingFeeAmount;
        }
        if (message.bassemLabsFee !== undefined && message.bassemLabsFee !== 0) {
            obj.bassemLabsFee = message.bassemLabsFee;
        }
        if (message.invoiceSurcharge !== undefined && message.invoiceSurcharge !== 0) {
            obj.invoiceSurcharge = message.invoiceSurcharge;
        }
        return obj;
    },
    create(base) {
        return exports.Transaction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTransaction();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.stripePaymentIntentId = object.stripePaymentIntentId ?? "";
        message.currency = object.currency ?? organization_1.Currency.USD;
        message.status = object.status ?? TransactionStatus.Created;
        message.paymentType = object.paymentType ?? PaymentType.Stripe;
        message.date = object.date ?? undefined;
        message.invoice = (object.invoice !== undefined && object.invoice !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoice)
            : undefined;
        message.amount = object.amount ?? 0;
        message.declinedReason = object.declinedReason ?? "";
        message.processingFeeAmount = object.processingFeeAmount ?? 0;
        message.bassemLabsFee = object.bassemLabsFee ?? 0;
        message.invoiceSurcharge = object.invoiceSurcharge ?? 0;
        return message;
    },
};
function createBaseRefundTransaction() {
    return {
        id: undefined,
        organization: undefined,
        transactionId: undefined,
        stripeRefundId: "",
        status: RefundTransactionStatus.Pending,
        paymentType: PaymentType.Stripe,
        date: undefined,
        amount: 0,
        reason: "",
    };
}
exports.RefundTransaction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.transactionId !== undefined) {
            object_id_1.ObjectId.encode(message.transactionId, writer.uint32(26).fork()).join();
        }
        if (message.stripeRefundId !== undefined && message.stripeRefundId !== "") {
            writer.uint32(34).string(message.stripeRefundId);
        }
        if (message.status !== RefundTransactionStatus.Pending) {
            writer.uint32(40).int32(refundTransactionStatusToNumber(message.status));
        }
        if (message.paymentType !== PaymentType.Stripe) {
            writer.uint32(48).int32(paymentTypeToNumber(message.paymentType));
        }
        if (message.date !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.date), writer.uint32(58).fork()).join();
        }
        if (message.amount !== 0) {
            writer.uint32(65).double(message.amount);
        }
        if (message.reason !== undefined && message.reason !== "") {
            writer.uint32(74).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefundTransaction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.transactionId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.stripeRefundId = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = refundTransactionStatusFromJSON(reader.int32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.paymentType = paymentTypeFromJSON(reader.int32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.date = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 65) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            transactionId: isSet(object.transactionId) ? object_id_1.ObjectId.fromJSON(object.transactionId) : undefined,
            stripeRefundId: isSet(object.stripeRefundId) ? globalThis.String(object.stripeRefundId) : "",
            status: isSet(object.status) ? refundTransactionStatusFromJSON(object.status) : RefundTransactionStatus.Pending,
            paymentType: isSet(object.paymentType) ? paymentTypeFromJSON(object.paymentType) : PaymentType.Stripe,
            date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.transactionId !== undefined) {
            obj.transactionId = object_id_1.ObjectId.toJSON(message.transactionId);
        }
        if (message.stripeRefundId !== undefined && message.stripeRefundId !== "") {
            obj.stripeRefundId = message.stripeRefundId;
        }
        if (message.status !== RefundTransactionStatus.Pending) {
            obj.status = refundTransactionStatusToJSON(message.status);
        }
        if (message.paymentType !== PaymentType.Stripe) {
            obj.paymentType = paymentTypeToJSON(message.paymentType);
        }
        if (message.date !== undefined) {
            obj.date = message.date.toISOString();
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.reason !== undefined && message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.RefundTransaction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRefundTransaction();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)
            ? object_id_1.ObjectId.fromPartial(object.transactionId)
            : undefined;
        message.stripeRefundId = object.stripeRefundId ?? "";
        message.status = object.status ?? RefundTransactionStatus.Pending;
        message.paymentType = object.paymentType ?? PaymentType.Stripe;
        message.date = object.date ?? undefined;
        message.amount = object.amount ?? 0;
        message.reason = object.reason ?? "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
