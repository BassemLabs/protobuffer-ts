"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/payment_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnboardOrganizationStripeAccountResponse = exports.OnboardOrganizationStripeAccountRequest = exports.CreatePaymentIntentResponse = exports.CreatePaymentIntentRequest = exports.VerifyMicroDepositsResponse = exports.VerifyMicroDepositsRequest = exports.GetSetupAutoIntentResponse = exports.GetSetupAutoIntentRequest = exports.HandleWebhookResponse = exports.HandleWebhookRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const transaction_1 = require("./transaction");
exports.protobufPackage = "payment_service";
function createBaseHandleWebhookRequest() {
    return { payload: "", stripeSignature: "" };
}
exports.HandleWebhookRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.payload !== "") {
            writer.uint32(10).string(message.payload);
        }
        if (message.stripeSignature !== "") {
            writer.uint32(18).string(message.stripeSignature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandleWebhookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.payload = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stripeSignature = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
            stripeSignature: isSet(object.stripeSignature) ? globalThis.String(object.stripeSignature) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.payload !== "") {
            obj.payload = message.payload;
        }
        if (message.stripeSignature !== "") {
            obj.stripeSignature = message.stripeSignature;
        }
        return obj;
    },
    create(base) {
        return exports.HandleWebhookRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHandleWebhookRequest();
        message.payload = object.payload ?? "";
        message.stripeSignature = object.stripeSignature ?? "";
        return message;
    },
};
function createBaseHandleWebhookResponse() {
    return { success: false };
}
exports.HandleWebhookResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandleWebhookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.HandleWebhookResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHandleWebhookResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseGetSetupAutoIntentRequest() {
    return { context: undefined };
}
exports.GetSetupAutoIntentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSetupAutoIntentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetSetupAutoIntentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSetupAutoIntentRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetSetupAutoIntentResponse() {
    return { setupAutoIntentSecret: "" };
}
exports.GetSetupAutoIntentResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.setupAutoIntentSecret !== "") {
            writer.uint32(10).string(message.setupAutoIntentSecret);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSetupAutoIntentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.setupAutoIntentSecret = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            setupAutoIntentSecret: isSet(object.setupAutoIntentSecret) ? globalThis.String(object.setupAutoIntentSecret) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.setupAutoIntentSecret !== "") {
            obj.setupAutoIntentSecret = message.setupAutoIntentSecret;
        }
        return obj;
    },
    create(base) {
        return exports.GetSetupAutoIntentResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSetupAutoIntentResponse();
        message.setupAutoIntentSecret = object.setupAutoIntentSecret ?? "";
        return message;
    },
};
function createBaseVerifyMicroDepositsRequest() {
    return { context: undefined, first: 0, second: 0 };
}
exports.VerifyMicroDepositsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.first !== 0) {
            writer.uint32(16).uint32(message.first);
        }
        if (message.second !== 0) {
            writer.uint32(24).uint32(message.second);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMicroDepositsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.first = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.second = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            first: isSet(object.first) ? globalThis.Number(object.first) : 0,
            second: isSet(object.second) ? globalThis.Number(object.second) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.first !== 0) {
            obj.first = Math.round(message.first);
        }
        if (message.second !== 0) {
            obj.second = Math.round(message.second);
        }
        return obj;
    },
    create(base) {
        return exports.VerifyMicroDepositsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMicroDepositsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.first = object.first ?? 0;
        message.second = object.second ?? 0;
        return message;
    },
};
function createBaseVerifyMicroDepositsResponse() {
    return { success: false };
}
exports.VerifyMicroDepositsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMicroDepositsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.VerifyMicroDepositsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMicroDepositsResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseCreatePaymentIntentRequest() {
    return { context: undefined, paymentType: transaction_1.PaymentType.Stripe, invoiceId: undefined, amount: 0 };
}
exports.CreatePaymentIntentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.paymentType !== transaction_1.PaymentType.Stripe) {
            writer.uint32(16).int32((0, transaction_1.paymentTypeToNumber)(message.paymentType));
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(26).fork()).join();
        }
        if (message.amount !== 0) {
            writer.uint32(33).double(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePaymentIntentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.paymentType = (0, transaction_1.paymentTypeFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            paymentType: isSet(object.paymentType) ? (0, transaction_1.paymentTypeFromJSON)(object.paymentType) : transaction_1.PaymentType.Stripe,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.paymentType !== transaction_1.PaymentType.Stripe) {
            obj.paymentType = (0, transaction_1.paymentTypeToJSON)(message.paymentType);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePaymentIntentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePaymentIntentRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.paymentType = object.paymentType ?? transaction_1.PaymentType.Stripe;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        message.amount = object.amount ?? 0;
        return message;
    },
};
function createBaseCreatePaymentIntentResponse() {
    return { clientSecret: "" };
}
exports.CreatePaymentIntentResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientSecret !== "") {
            writer.uint32(10).string(message.clientSecret);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePaymentIntentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePaymentIntentResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePaymentIntentResponse();
        message.clientSecret = object.clientSecret ?? "";
        return message;
    },
};
function createBaseOnboardOrganizationStripeAccountRequest() {
    return { context: undefined, frontendUrl: "" };
}
exports.OnboardOrganizationStripeAccountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.frontendUrl !== "") {
            writer.uint32(18).string(message.frontendUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardOrganizationStripeAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.frontendUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            frontendUrl: isSet(object.frontendUrl) ? globalThis.String(object.frontendUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.frontendUrl !== "") {
            obj.frontendUrl = message.frontendUrl;
        }
        return obj;
    },
    create(base) {
        return exports.OnboardOrganizationStripeAccountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOnboardOrganizationStripeAccountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.frontendUrl = object.frontendUrl ?? "";
        return message;
    },
};
function createBaseOnboardOrganizationStripeAccountResponse() {
    return { accountLinkUrl: "" };
}
exports.OnboardOrganizationStripeAccountResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountLinkUrl !== "") {
            writer.uint32(10).string(message.accountLinkUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardOrganizationStripeAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accountLinkUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountLinkUrl: isSet(object.accountLinkUrl) ? globalThis.String(object.accountLinkUrl) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountLinkUrl !== "") {
            obj.accountLinkUrl = message.accountLinkUrl;
        }
        return obj;
    },
    create(base) {
        return exports.OnboardOrganizationStripeAccountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOnboardOrganizationStripeAccountResponse();
        message.accountLinkUrl = object.accountLinkUrl ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
