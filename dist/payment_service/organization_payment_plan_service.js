"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/organization_payment_plan_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOrgActivePaymentPlanWithInfoRequest = exports.GetOrgsPaymentPlanInfoResponse = exports.GetOrgsPaymentPlanInfoRequest = exports.GetOrganizationActiveOrgPaymentPlanInfoRequest = exports.AssignPaymentPlanToOrganizationRequest = exports.MakePaymentPlanAccessibleForOrganizationRequest = exports.GetAllPaymentPlanAccessResponse = exports.GetAllPaymentPlanAccessRequest = exports.GetOrganizationVisiblePlansRequest = exports.CreatePaymentPlanRequest = exports.GetPaymentPlansResponse = exports.GetAllPaymentPlansRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const organization_1 = require("../organization_service/organization");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const organization_payment_plan_1 = require("./organization_payment_plan");
exports.protobufPackage = "payment_service";
function createBaseGetAllPaymentPlansRequest() {
    return { context: undefined };
}
exports.GetAllPaymentPlansRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllPaymentPlansRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetAllPaymentPlansRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllPaymentPlansRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetPaymentPlansResponse() {
    return { paymentPlans: [] };
}
exports.GetPaymentPlansResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.paymentPlans) {
            organization_payment_plan_1.OrganizationPaymentPlan.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPaymentPlansResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.paymentPlans.push(organization_payment_plan_1.OrganizationPaymentPlan.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentPlans: globalThis.Array.isArray(object?.paymentPlans)
                ? object.paymentPlans.map((e) => organization_payment_plan_1.OrganizationPaymentPlan.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentPlans?.length) {
            obj.paymentPlans = message.paymentPlans.map((e) => organization_payment_plan_1.OrganizationPaymentPlan.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetPaymentPlansResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPaymentPlansResponse();
        message.paymentPlans = object.paymentPlans?.map((e) => organization_payment_plan_1.OrganizationPaymentPlan.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreatePaymentPlanRequest() {
    return {
        context: undefined,
        name: "",
        description: "",
        currency: organization_1.Currency.USD,
        isPublic: false,
        upfrontCost: 0,
        upfrontCostPaymentInterval: organization_payment_plan_1.PaymentInterval.Monthly,
        perStudentCost: 0,
        paymentProcessingPercentage: 0,
    };
}
exports.CreatePaymentPlanRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.currency !== organization_1.Currency.USD) {
            writer.uint32(32).int32((0, organization_1.currencyToNumber)(message.currency));
        }
        if (message.isPublic !== false) {
            writer.uint32(40).bool(message.isPublic);
        }
        if (message.upfrontCost !== 0) {
            writer.uint32(49).double(message.upfrontCost);
        }
        if (message.upfrontCostPaymentInterval !== organization_payment_plan_1.PaymentInterval.Monthly) {
            writer.uint32(56).int32((0, organization_payment_plan_1.paymentIntervalToNumber)(message.upfrontCostPaymentInterval));
        }
        if (message.perStudentCost !== 0) {
            writer.uint32(65).double(message.perStudentCost);
        }
        if (message.paymentProcessingPercentage !== 0) {
            writer.uint32(73).double(message.paymentProcessingPercentage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePaymentPlanRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.currency = (0, organization_1.currencyFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isPublic = reader.bool();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.upfrontCost = reader.double();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.upfrontCostPaymentInterval = (0, organization_payment_plan_1.paymentIntervalFromJSON)(reader.int32());
                    continue;
                case 8:
                    if (tag !== 65) {
                        break;
                    }
                    message.perStudentCost = reader.double();
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.paymentProcessingPercentage = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            currency: isSet(object.currency) ? (0, organization_1.currencyFromJSON)(object.currency) : organization_1.Currency.USD,
            isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
            upfrontCost: isSet(object.upfrontCost) ? globalThis.Number(object.upfrontCost) : 0,
            upfrontCostPaymentInterval: isSet(object.upfrontCostPaymentInterval)
                ? (0, organization_payment_plan_1.paymentIntervalFromJSON)(object.upfrontCostPaymentInterval)
                : organization_payment_plan_1.PaymentInterval.Monthly,
            perStudentCost: isSet(object.perStudentCost) ? globalThis.Number(object.perStudentCost) : 0,
            paymentProcessingPercentage: isSet(object.paymentProcessingPercentage)
                ? globalThis.Number(object.paymentProcessingPercentage)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.currency !== organization_1.Currency.USD) {
            obj.currency = (0, organization_1.currencyToJSON)(message.currency);
        }
        if (message.isPublic !== false) {
            obj.isPublic = message.isPublic;
        }
        if (message.upfrontCost !== 0) {
            obj.upfrontCost = message.upfrontCost;
        }
        if (message.upfrontCostPaymentInterval !== organization_payment_plan_1.PaymentInterval.Monthly) {
            obj.upfrontCostPaymentInterval = (0, organization_payment_plan_1.paymentIntervalToJSON)(message.upfrontCostPaymentInterval);
        }
        if (message.perStudentCost !== 0) {
            obj.perStudentCost = message.perStudentCost;
        }
        if (message.paymentProcessingPercentage !== 0) {
            obj.paymentProcessingPercentage = message.paymentProcessingPercentage;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePaymentPlanRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePaymentPlanRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.currency = object.currency ?? organization_1.Currency.USD;
        message.isPublic = object.isPublic ?? false;
        message.upfrontCost = object.upfrontCost ?? 0;
        message.upfrontCostPaymentInterval = object.upfrontCostPaymentInterval ?? organization_payment_plan_1.PaymentInterval.Monthly;
        message.perStudentCost = object.perStudentCost ?? 0;
        message.paymentProcessingPercentage = object.paymentProcessingPercentage ?? 0;
        return message;
    },
};
function createBaseGetOrganizationVisiblePlansRequest() {
    return { context: undefined };
}
exports.GetOrganizationVisiblePlansRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationVisiblePlansRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationVisiblePlansRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationVisiblePlansRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetAllPaymentPlanAccessRequest() {
    return { context: undefined };
}
exports.GetAllPaymentPlanAccessRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllPaymentPlanAccessRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetAllPaymentPlanAccessRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllPaymentPlanAccessRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetAllPaymentPlanAccessResponse() {
    return { organizationPlanAccess: [] };
}
exports.GetAllPaymentPlanAccessResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.organizationPlanAccess) {
            organization_payment_plan_1.OrganizationPlanAccess.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllPaymentPlanAccessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationPlanAccess.push(organization_payment_plan_1.OrganizationPlanAccess.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizationPlanAccess: globalThis.Array.isArray(object?.organizationPlanAccess)
                ? object.organizationPlanAccess.map((e) => organization_payment_plan_1.OrganizationPlanAccess.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationPlanAccess?.length) {
            obj.organizationPlanAccess = message.organizationPlanAccess.map((e) => organization_payment_plan_1.OrganizationPlanAccess.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetAllPaymentPlanAccessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllPaymentPlanAccessResponse();
        message.organizationPlanAccess = object.organizationPlanAccess?.map((e) => organization_payment_plan_1.OrganizationPlanAccess.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseMakePaymentPlanAccessibleForOrganizationRequest() {
    return { context: undefined, organizationId: undefined, paymentPlanId: undefined };
}
exports.MakePaymentPlanAccessibleForOrganizationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.paymentPlanId !== undefined) {
            object_id_1.ObjectId.encode(message.paymentPlanId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMakePaymentPlanAccessibleForOrganizationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.paymentPlanId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            paymentPlanId: isSet(object.paymentPlanId) ? object_id_1.ObjectId.fromJSON(object.paymentPlanId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.paymentPlanId !== undefined) {
            obj.paymentPlanId = object_id_1.ObjectId.toJSON(message.paymentPlanId);
        }
        return obj;
    },
    create(base) {
        return exports.MakePaymentPlanAccessibleForOrganizationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMakePaymentPlanAccessibleForOrganizationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.paymentPlanId = (object.paymentPlanId !== undefined && object.paymentPlanId !== null)
            ? object_id_1.ObjectId.fromPartial(object.paymentPlanId)
            : undefined;
        return message;
    },
};
function createBaseAssignPaymentPlanToOrganizationRequest() {
    return { context: undefined, paymentPlanId: undefined, deferPerStudentCostToParent: false };
}
exports.AssignPaymentPlanToOrganizationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.paymentPlanId !== undefined) {
            object_id_1.ObjectId.encode(message.paymentPlanId, writer.uint32(18).fork()).join();
        }
        if (message.deferPerStudentCostToParent !== false) {
            writer.uint32(24).bool(message.deferPerStudentCostToParent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAssignPaymentPlanToOrganizationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.paymentPlanId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.deferPerStudentCostToParent = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            paymentPlanId: isSet(object.paymentPlanId) ? object_id_1.ObjectId.fromJSON(object.paymentPlanId) : undefined,
            deferPerStudentCostToParent: isSet(object.deferPerStudentCostToParent)
                ? globalThis.Boolean(object.deferPerStudentCostToParent)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.paymentPlanId !== undefined) {
            obj.paymentPlanId = object_id_1.ObjectId.toJSON(message.paymentPlanId);
        }
        if (message.deferPerStudentCostToParent !== false) {
            obj.deferPerStudentCostToParent = message.deferPerStudentCostToParent;
        }
        return obj;
    },
    create(base) {
        return exports.AssignPaymentPlanToOrganizationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAssignPaymentPlanToOrganizationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.paymentPlanId = (object.paymentPlanId !== undefined && object.paymentPlanId !== null)
            ? object_id_1.ObjectId.fromPartial(object.paymentPlanId)
            : undefined;
        message.deferPerStudentCostToParent = object.deferPerStudentCostToParent ?? false;
        return message;
    },
};
function createBaseGetOrganizationActiveOrgPaymentPlanInfoRequest() {
    return { context: undefined };
}
exports.GetOrganizationActiveOrgPaymentPlanInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationActiveOrgPaymentPlanInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationActiveOrgPaymentPlanInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationActiveOrgPaymentPlanInfoRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetOrgsPaymentPlanInfoRequest() {
    return { context: undefined };
}
exports.GetOrgsPaymentPlanInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgsPaymentPlanInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrgsPaymentPlanInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgsPaymentPlanInfoRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetOrgsPaymentPlanInfoResponse() {
    return { orgPaymentPlanInfo: [] };
}
exports.GetOrgsPaymentPlanInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.orgPaymentPlanInfo) {
            organization_payment_plan_1.OrganizationPaymentPlanInformation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgsPaymentPlanInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgPaymentPlanInfo.push(organization_payment_plan_1.OrganizationPaymentPlanInformation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgPaymentPlanInfo: globalThis.Array.isArray(object?.orgPaymentPlanInfo)
                ? object.orgPaymentPlanInfo.map((e) => organization_payment_plan_1.OrganizationPaymentPlanInformation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgPaymentPlanInfo?.length) {
            obj.orgPaymentPlanInfo = message.orgPaymentPlanInfo.map((e) => organization_payment_plan_1.OrganizationPaymentPlanInformation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetOrgsPaymentPlanInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgsPaymentPlanInfoResponse();
        message.orgPaymentPlanInfo =
            object.orgPaymentPlanInfo?.map((e) => organization_payment_plan_1.OrganizationPaymentPlanInformation.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetOrgActivePaymentPlanWithInfoRequest() {
    return { context: undefined, organizationId: undefined };
}
exports.GetOrgActivePaymentPlanWithInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgActivePaymentPlanWithInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrgActivePaymentPlanWithInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgActivePaymentPlanWithInfoRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
