"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/tuition_invoice.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.TuitionInvoice = exports.TuitionInvoiceLineItem = exports.TuitionPlanSnapshot = exports.LineType = exports.protobufPackage = void 0;
exports.lineTypeFromJSON = lineTypeFromJSON;
exports.lineTypeToJSON = lineTypeToJSON;
exports.lineTypeToNumber = lineTypeToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const tuition_1 = require("./tuition");
exports.protobufPackage = "payment_service";
var LineType;
(function (LineType) {
    LineType["BASE_RATE"] = "BASE_RATE";
    LineType["ADD_FEE"] = "ADD_FEE";
    LineType["DISCOUNT"] = "DISCOUNT";
    LineType["BASSEM_LABS_FEE"] = "BASSEM_LABS_FEE";
    LineType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LineType || (exports.LineType = LineType = {}));
function lineTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "BASE_RATE":
            return LineType.BASE_RATE;
        case 2:
        case "ADD_FEE":
            return LineType.ADD_FEE;
        case 3:
        case "DISCOUNT":
            return LineType.DISCOUNT;
        case 4:
        case "BASSEM_LABS_FEE":
            return LineType.BASSEM_LABS_FEE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LineType.UNRECOGNIZED;
    }
}
function lineTypeToJSON(object) {
    switch (object) {
        case LineType.BASE_RATE:
            return "BASE_RATE";
        case LineType.ADD_FEE:
            return "ADD_FEE";
        case LineType.DISCOUNT:
            return "DISCOUNT";
        case LineType.BASSEM_LABS_FEE:
            return "BASSEM_LABS_FEE";
        case LineType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function lineTypeToNumber(object) {
    switch (object) {
        case LineType.BASE_RATE:
            return 1;
        case LineType.ADD_FEE:
            return 2;
        case LineType.DISCOUNT:
            return 3;
        case LineType.BASSEM_LABS_FEE:
            return 4;
        case LineType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseTuitionPlanSnapshot() {
    return { name: "", scheduleType: tuition_1.PaymentScheduleType.ONE_TIME, numberOfMonths: 0, installments: [] };
}
exports.TuitionPlanSnapshot = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.scheduleType !== tuition_1.PaymentScheduleType.ONE_TIME) {
            writer.uint32(16).int32((0, tuition_1.paymentScheduleTypeToNumber)(message.scheduleType));
        }
        if (message.numberOfMonths !== undefined && message.numberOfMonths !== 0) {
            writer.uint32(24).int32(message.numberOfMonths);
        }
        for (const v of message.installments) {
            tuition_1.PaymentInstallment.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionPlanSnapshot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.scheduleType = (0, tuition_1.paymentScheduleTypeFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.numberOfMonths = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.installments.push(tuition_1.PaymentInstallment.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            scheduleType: isSet(object.scheduleType)
                ? (0, tuition_1.paymentScheduleTypeFromJSON)(object.scheduleType)
                : tuition_1.PaymentScheduleType.ONE_TIME,
            numberOfMonths: isSet(object.numberOfMonths) ? globalThis.Number(object.numberOfMonths) : 0,
            installments: globalThis.Array.isArray(object?.installments)
                ? object.installments.map((e) => tuition_1.PaymentInstallment.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.scheduleType !== tuition_1.PaymentScheduleType.ONE_TIME) {
            obj.scheduleType = (0, tuition_1.paymentScheduleTypeToJSON)(message.scheduleType);
        }
        if (message.numberOfMonths !== undefined && message.numberOfMonths !== 0) {
            obj.numberOfMonths = Math.round(message.numberOfMonths);
        }
        if (message.installments?.length) {
            obj.installments = message.installments.map((e) => tuition_1.PaymentInstallment.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TuitionPlanSnapshot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionPlanSnapshot();
        message.name = object.name ?? "";
        message.scheduleType = object.scheduleType ?? tuition_1.PaymentScheduleType.ONE_TIME;
        message.numberOfMonths = object.numberOfMonths ?? 0;
        message.installments = object.installments?.map((e) => tuition_1.PaymentInstallment.fromPartial(e)) || [];
        return message;
    },
};
function createBaseTuitionInvoiceLineItem() {
    return {
        id: undefined,
        lineType: LineType.BASE_RATE,
        scope: tuition_1.Scope.STUDENT_SCOPE,
        student: undefined,
        name: "",
        valueType: tuition_1.DiscountValueType.AMOUNT,
        amount: 0,
    };
}
exports.TuitionInvoiceLineItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.lineType !== LineType.BASE_RATE) {
            writer.uint32(16).int32(lineTypeToNumber(message.lineType));
        }
        if (message.scope !== tuition_1.Scope.STUDENT_SCOPE) {
            writer.uint32(24).int32((0, tuition_1.scopeToNumber)(message.scope));
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(34).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(42).string(message.name);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(48).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.amount !== 0) {
            writer.uint32(57).double(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionInvoiceLineItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.lineType = lineTypeFromJSON(reader.int32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.scope = (0, tuition_1.scopeFromJSON)(reader.int32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            lineType: isSet(object.lineType) ? lineTypeFromJSON(object.lineType) : LineType.BASE_RATE,
            scope: isSet(object.scope) ? (0, tuition_1.scopeFromJSON)(object.scope) : tuition_1.Scope.STUDENT_SCOPE,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.lineType !== LineType.BASE_RATE) {
            obj.lineType = lineTypeToJSON(message.lineType);
        }
        if (message.scope !== tuition_1.Scope.STUDENT_SCOPE) {
            obj.scope = (0, tuition_1.scopeToJSON)(message.scope);
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.TuitionInvoiceLineItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionInvoiceLineItem();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.lineType = object.lineType ?? LineType.BASE_RATE;
        message.scope = object.scope ?? tuition_1.Scope.STUDENT_SCOPE;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.name = object.name ?? "";
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.amount = object.amount ?? 0;
        return message;
    },
};
function createBaseTuitionInvoice() {
    return {
        id: undefined,
        organization: undefined,
        schoolYear: undefined,
        family: undefined,
        tuitionPlan: undefined,
        lineItems: [],
        totalGross: 0,
        totalDiscounts: 0,
        totalNet: 0,
    };
}
exports.TuitionInvoice = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(34).fork()).join();
        }
        if (message.tuitionPlan !== undefined) {
            exports.TuitionPlanSnapshot.encode(message.tuitionPlan, writer.uint32(42).fork()).join();
        }
        for (const v of message.lineItems) {
            exports.TuitionInvoiceLineItem.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.totalGross !== 0) {
            writer.uint32(57).double(message.totalGross);
        }
        if (message.totalDiscounts !== 0) {
            writer.uint32(65).double(message.totalDiscounts);
        }
        if (message.totalNet !== 0) {
            writer.uint32(73).double(message.totalNet);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionInvoice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tuitionPlan = exports.TuitionPlanSnapshot.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.lineItems.push(exports.TuitionInvoiceLineItem.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.totalGross = reader.double();
                    continue;
                case 8:
                    if (tag !== 65) {
                        break;
                    }
                    message.totalDiscounts = reader.double();
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.totalNet = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            tuitionPlan: isSet(object.tuitionPlan) ? exports.TuitionPlanSnapshot.fromJSON(object.tuitionPlan) : undefined,
            lineItems: globalThis.Array.isArray(object?.lineItems)
                ? object.lineItems.map((e) => exports.TuitionInvoiceLineItem.fromJSON(e))
                : [],
            totalGross: isSet(object.totalGross) ? globalThis.Number(object.totalGross) : 0,
            totalDiscounts: isSet(object.totalDiscounts) ? globalThis.Number(object.totalDiscounts) : 0,
            totalNet: isSet(object.totalNet) ? globalThis.Number(object.totalNet) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.tuitionPlan !== undefined) {
            obj.tuitionPlan = exports.TuitionPlanSnapshot.toJSON(message.tuitionPlan);
        }
        if (message.lineItems?.length) {
            obj.lineItems = message.lineItems.map((e) => exports.TuitionInvoiceLineItem.toJSON(e));
        }
        if (message.totalGross !== 0) {
            obj.totalGross = message.totalGross;
        }
        if (message.totalDiscounts !== 0) {
            obj.totalDiscounts = message.totalDiscounts;
        }
        if (message.totalNet !== 0) {
            obj.totalNet = message.totalNet;
        }
        return obj;
    },
    create(base) {
        return exports.TuitionInvoice.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionInvoice();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.tuitionPlan = (object.tuitionPlan !== undefined && object.tuitionPlan !== null)
            ? exports.TuitionPlanSnapshot.fromPartial(object.tuitionPlan)
            : undefined;
        message.lineItems = object.lineItems?.map((e) => exports.TuitionInvoiceLineItem.fromPartial(e)) || [];
        message.totalGross = object.totalGross ?? 0;
        message.totalDiscounts = object.totalDiscounts ?? 0;
        message.totalNet = object.totalNet ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
