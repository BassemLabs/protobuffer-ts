"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/tuition_invoice_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.FamilyWithTuitionInvoice = exports.ListFamiliesWithTuitionInvoicesResponse = exports.ListFamiliesWithTuitionInvoicesRequest = exports.ModifyTuitionInvoiceRequest = exports.GenerateTuitionInvoiceRequest = exports.GetFamilyTuitionInvoiceRequest = exports.StudentObj = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const family_1 = require("../user_service/family");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const tuition_invoice_1 = require("./tuition_invoice");
exports.protobufPackage = "payment_service";
function createBaseStudentObj() {
    return { id: undefined, name: "", grade: "" };
}
exports.StudentObj = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.grade !== "") {
            writer.uint32(26).string(message.grade);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentObj();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        return obj;
    },
    create(base) {
        return exports.StudentObj.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentObj();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.grade = object.grade ?? "";
        return message;
    },
};
function createBaseGetFamilyTuitionInvoiceRequest() {
    return { context: undefined, family: undefined, schoolYear: undefined };
}
exports.GetFamilyTuitionInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFamilyTuitionInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.GetFamilyTuitionInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFamilyTuitionInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseGenerateTuitionInvoiceRequest() {
    return { context: undefined, family: undefined, schoolYear: undefined, tuitionPlan: undefined };
}
exports.GenerateTuitionInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.tuitionPlan !== undefined) {
            object_id_1.ObjectId.encode(message.tuitionPlan, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateTuitionInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.tuitionPlan = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            tuitionPlan: isSet(object.tuitionPlan) ? object_id_1.ObjectId.fromJSON(object.tuitionPlan) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.tuitionPlan !== undefined) {
            obj.tuitionPlan = object_id_1.ObjectId.toJSON(message.tuitionPlan);
        }
        return obj;
    },
    create(base) {
        return exports.GenerateTuitionInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateTuitionInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.tuitionPlan = (object.tuitionPlan !== undefined && object.tuitionPlan !== null)
            ? object_id_1.ObjectId.fromPartial(object.tuitionPlan)
            : undefined;
        return message;
    },
};
function createBaseModifyTuitionInvoiceRequest() {
    return { context: undefined, tuitionInvoice: undefined, tuitionPlan: undefined };
}
exports.ModifyTuitionInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.tuitionInvoice !== undefined) {
            object_id_1.ObjectId.encode(message.tuitionInvoice, writer.uint32(18).fork()).join();
        }
        if (message.tuitionPlan !== undefined) {
            object_id_1.ObjectId.encode(message.tuitionPlan, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModifyTuitionInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tuitionInvoice = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.tuitionPlan = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            tuitionInvoice: isSet(object.tuitionInvoice) ? object_id_1.ObjectId.fromJSON(object.tuitionInvoice) : undefined,
            tuitionPlan: isSet(object.tuitionPlan) ? object_id_1.ObjectId.fromJSON(object.tuitionPlan) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.tuitionInvoice !== undefined) {
            obj.tuitionInvoice = object_id_1.ObjectId.toJSON(message.tuitionInvoice);
        }
        if (message.tuitionPlan !== undefined) {
            obj.tuitionPlan = object_id_1.ObjectId.toJSON(message.tuitionPlan);
        }
        return obj;
    },
    create(base) {
        return exports.ModifyTuitionInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModifyTuitionInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.tuitionInvoice = (object.tuitionInvoice !== undefined && object.tuitionInvoice !== null)
            ? object_id_1.ObjectId.fromPartial(object.tuitionInvoice)
            : undefined;
        message.tuitionPlan = (object.tuitionPlan !== undefined && object.tuitionPlan !== null)
            ? object_id_1.ObjectId.fromPartial(object.tuitionPlan)
            : undefined;
        return message;
    },
};
function createBaseListFamiliesWithTuitionInvoicesRequest() {
    return { context: undefined, schoolYear: undefined, startDate: undefined, endDate: undefined };
}
exports.ListFamiliesWithTuitionInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFamiliesWithTuitionInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.ListFamiliesWithTuitionInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFamiliesWithTuitionInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        return message;
    },
};
function createBaseListFamiliesWithTuitionInvoicesResponse() {
    return { familyWithTuitionInvoice: [] };
}
exports.ListFamiliesWithTuitionInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.familyWithTuitionInvoice) {
            exports.FamilyWithTuitionInvoice.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFamiliesWithTuitionInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.familyWithTuitionInvoice.push(exports.FamilyWithTuitionInvoice.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            familyWithTuitionInvoice: globalThis.Array.isArray(object?.familyWithTuitionInvoice)
                ? object.familyWithTuitionInvoice.map((e) => exports.FamilyWithTuitionInvoice.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.familyWithTuitionInvoice?.length) {
            obj.familyWithTuitionInvoice = message.familyWithTuitionInvoice.map((e) => exports.FamilyWithTuitionInvoice.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListFamiliesWithTuitionInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFamiliesWithTuitionInvoicesResponse();
        message.familyWithTuitionInvoice =
            object.familyWithTuitionInvoice?.map((e) => exports.FamilyWithTuitionInvoice.fromPartial(e)) || [];
        return message;
    },
};
function createBaseFamilyWithTuitionInvoice() {
    return {
        family: undefined,
        tuitionInvoice: undefined,
        studentCount: 0,
        totalPaid: 0,
        status: tuition_invoice_1.TuitionInvoiceStatus.NOT_GENERATED,
        totalInvoicesAmount: 0,
    };
}
exports.FamilyWithTuitionInvoice = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.family !== undefined) {
            family_1.Family.encode(message.family, writer.uint32(10).fork()).join();
        }
        if (message.tuitionInvoice !== undefined) {
            tuition_invoice_1.TuitionInvoice.encode(message.tuitionInvoice, writer.uint32(18).fork()).join();
        }
        if (message.studentCount !== 0) {
            writer.uint32(24).int32(message.studentCount);
        }
        if (message.totalPaid !== 0) {
            writer.uint32(33).double(message.totalPaid);
        }
        if (message.status !== tuition_invoice_1.TuitionInvoiceStatus.NOT_GENERATED) {
            writer.uint32(40).int32((0, tuition_invoice_1.tuitionInvoiceStatusToNumber)(message.status));
        }
        if (message.totalInvoicesAmount !== 0) {
            writer.uint32(49).double(message.totalInvoicesAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFamilyWithTuitionInvoice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.family = family_1.Family.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tuitionInvoice = tuition_invoice_1.TuitionInvoice.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.studentCount = reader.int32();
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.totalPaid = reader.double();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = (0, tuition_invoice_1.tuitionInvoiceStatusFromJSON)(reader.int32());
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.totalInvoicesAmount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            family: isSet(object.family) ? family_1.Family.fromJSON(object.family) : undefined,
            tuitionInvoice: isSet(object.tuitionInvoice) ? tuition_invoice_1.TuitionInvoice.fromJSON(object.tuitionInvoice) : undefined,
            studentCount: isSet(object.studentCount) ? globalThis.Number(object.studentCount) : 0,
            totalPaid: isSet(object.totalPaid) ? globalThis.Number(object.totalPaid) : 0,
            status: isSet(object.status) ? (0, tuition_invoice_1.tuitionInvoiceStatusFromJSON)(object.status) : tuition_invoice_1.TuitionInvoiceStatus.NOT_GENERATED,
            totalInvoicesAmount: isSet(object.totalInvoicesAmount) ? globalThis.Number(object.totalInvoicesAmount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.family !== undefined) {
            obj.family = family_1.Family.toJSON(message.family);
        }
        if (message.tuitionInvoice !== undefined) {
            obj.tuitionInvoice = tuition_invoice_1.TuitionInvoice.toJSON(message.tuitionInvoice);
        }
        if (message.studentCount !== 0) {
            obj.studentCount = Math.round(message.studentCount);
        }
        if (message.totalPaid !== 0) {
            obj.totalPaid = message.totalPaid;
        }
        if (message.status !== tuition_invoice_1.TuitionInvoiceStatus.NOT_GENERATED) {
            obj.status = (0, tuition_invoice_1.tuitionInvoiceStatusToJSON)(message.status);
        }
        if (message.totalInvoicesAmount !== 0) {
            obj.totalInvoicesAmount = message.totalInvoicesAmount;
        }
        return obj;
    },
    create(base) {
        return exports.FamilyWithTuitionInvoice.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFamilyWithTuitionInvoice();
        message.family = (object.family !== undefined && object.family !== null)
            ? family_1.Family.fromPartial(object.family)
            : undefined;
        message.tuitionInvoice = (object.tuitionInvoice !== undefined && object.tuitionInvoice !== null)
            ? tuition_invoice_1.TuitionInvoice.fromPartial(object.tuitionInvoice)
            : undefined;
        message.studentCount = object.studentCount ?? 0;
        message.totalPaid = object.totalPaid ?? 0;
        message.status = object.status ?? tuition_invoice_1.TuitionInvoiceStatus.NOT_GENERATED;
        message.totalInvoicesAmount = object.totalInvoicesAmount ?? 0;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
