"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: payment_service/invoice_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStudentsWithReregistrationInvoicesResponse = exports.GetStudentsWithReregistrationInvoicesRequest = exports.GetStudentsWithUnpaidInvoicesResponse = exports.GetStudentsWithUnpaidInvoicesRequest = exports.GetFamilyTuitionInvoicesRequest = exports.SetAutoPayInvoiceStatusRequest = exports.GetAutoPayInvoicesReadyToChargeRequest = exports.UnarchiveInvoiceRequest = exports.ArchiveInvoiceRequest = exports.UpdateInvoiceAutoPaymentRequest = exports.UpdateInvoiceRequest = exports.CreateInvoiceForClassResponse = exports.GenerateRegistrationFeesInvoiceRequest = exports.GenerateWaitlistFeeInvoiceRequest = exports.GenerateInterviewFeeInvoiceRequest = exports.CreateInvoiceForClassRequest = exports.CreateInvoiceRequest = exports.IsInvoicePaidResponse = exports.IsInvoicePaidRequest = exports.ListInvoicesResponse = exports.PaginatedListInvoicesResponse = exports.AggregationResponse = exports.ListInvoicesRequest = exports.StudentHasNoUnpaidInvoicesResponse = exports.StudentHasNoUnpaidInvoicesRequest = exports.GetActionsRequiredByParentsResponse = exports.GetActionsRequiredByParentsRequest = exports.GetParentInvoicesRequest = exports.GetFamilyInvoicesRequest = exports.GetUserInvoicesResponse = exports.GetUserInvoicesRequest = exports.GetInvoiceByNumberRequest = exports.GetInvoiceRequest = exports.Invoices = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const action_required_by_parents_1 = require("../user_service/action_required_by_parents");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const invoice_1 = require("./invoice");
exports.protobufPackage = "payment_service";
function createBaseInvoices() {
    return { invoices: [] };
}
exports.Invoices = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invoices) {
            invoice_1.Invoice.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvoices();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoices.push(invoice_1.Invoice.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoices: globalThis.Array.isArray(object?.invoices) ? object.invoices.map((e) => invoice_1.Invoice.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoices?.length) {
            obj.invoices = message.invoices.map((e) => invoice_1.Invoice.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Invoices.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvoices();
        message.invoices = object.invoices?.map((e) => invoice_1.Invoice.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetInvoiceRequest() {
    return { context: undefined, invoiceId: undefined };
}
exports.GetInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        return obj;
    },
    create(base) {
        return exports.GetInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        return message;
    },
};
function createBaseGetInvoiceByNumberRequest() {
    return { context: undefined, invoiceNumber: 0 };
}
exports.GetInvoiceByNumberRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceNumber !== 0) {
            writer.uint32(16).int32(message.invoiceNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInvoiceByNumberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.invoiceNumber = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceNumber: isSet(object.invoiceNumber) ? globalThis.Number(object.invoiceNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceNumber !== 0) {
            obj.invoiceNumber = Math.round(message.invoiceNumber);
        }
        return obj;
    },
    create(base) {
        return exports.GetInvoiceByNumberRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetInvoiceByNumberRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceNumber = object.invoiceNumber ?? 0;
        return message;
    },
};
function createBaseGetUserInvoicesRequest() {
    return { context: undefined, userId: undefined };
}
exports.GetUserInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.userId !== undefined) {
            object_id_1.ObjectId.encode(message.userId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            userId: isSet(object.userId) ? object_id_1.ObjectId.fromJSON(object.userId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.userId !== undefined) {
            obj.userId = object_id_1.ObjectId.toJSON(message.userId);
        }
        return obj;
    },
    create(base) {
        return exports.GetUserInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.userId = (object.userId !== undefined && object.userId !== null)
            ? object_id_1.ObjectId.fromPartial(object.userId)
            : undefined;
        return message;
    },
};
function createBaseGetUserInvoicesResponse() {
    return { invoices: [] };
}
exports.GetUserInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invoices) {
            invoice_1.InvoiceResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoices.push(invoice_1.InvoiceResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoices: globalThis.Array.isArray(object?.invoices)
                ? object.invoices.map((e) => invoice_1.InvoiceResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoices?.length) {
            obj.invoices = message.invoices.map((e) => invoice_1.InvoiceResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetUserInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserInvoicesResponse();
        message.invoices = object.invoices?.map((e) => invoice_1.InvoiceResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetFamilyInvoicesRequest() {
    return { context: undefined, familyId: undefined };
}
exports.GetFamilyInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.familyId !== undefined) {
            object_id_1.ObjectId.encode(message.familyId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFamilyInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.familyId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            familyId: isSet(object.familyId) ? object_id_1.ObjectId.fromJSON(object.familyId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.familyId !== undefined) {
            obj.familyId = object_id_1.ObjectId.toJSON(message.familyId);
        }
        return obj;
    },
    create(base) {
        return exports.GetFamilyInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFamilyInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.familyId = (object.familyId !== undefined && object.familyId !== null)
            ? object_id_1.ObjectId.fromPartial(object.familyId)
            : undefined;
        return message;
    },
};
function createBaseGetParentInvoicesRequest() {
    return { context: undefined, parentId: undefined };
}
exports.GetParentInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.parentId !== undefined) {
            object_id_1.ObjectId.encode(message.parentId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetParentInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.parentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            parentId: isSet(object.parentId) ? object_id_1.ObjectId.fromJSON(object.parentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.parentId !== undefined) {
            obj.parentId = object_id_1.ObjectId.toJSON(message.parentId);
        }
        return obj;
    },
    create(base) {
        return exports.GetParentInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetParentInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.parentId = (object.parentId !== undefined && object.parentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.parentId)
            : undefined;
        return message;
    },
};
function createBaseGetActionsRequiredByParentsRequest() {
    return { context: undefined, studentId: undefined };
}
exports.GetActionsRequiredByParentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActionsRequiredByParentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        return obj;
    },
    create(base) {
        return exports.GetActionsRequiredByParentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActionsRequiredByParentsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        return message;
    },
};
function createBaseGetActionsRequiredByParentsResponse() {
    return { actions: [] };
}
exports.GetActionsRequiredByParentsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.actions) {
            action_required_by_parents_1.ActionRequiredByParents.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActionsRequiredByParentsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actions.push(action_required_by_parents_1.ActionRequiredByParents.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actions: globalThis.Array.isArray(object?.actions)
                ? object.actions.map((e) => action_required_by_parents_1.ActionRequiredByParents.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actions?.length) {
            obj.actions = message.actions.map((e) => action_required_by_parents_1.ActionRequiredByParents.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetActionsRequiredByParentsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActionsRequiredByParentsResponse();
        message.actions = object.actions?.map((e) => action_required_by_parents_1.ActionRequiredByParents.fromPartial(e)) || [];
        return message;
    },
};
function createBaseStudentHasNoUnpaidInvoicesRequest() {
    return { context: undefined, studentId: undefined };
}
exports.StudentHasNoUnpaidInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentHasNoUnpaidInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        return obj;
    },
    create(base) {
        return exports.StudentHasNoUnpaidInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentHasNoUnpaidInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        return message;
    },
};
function createBaseStudentHasNoUnpaidInvoicesResponse() {
    return { hasNoUnpaidInvoices: false };
}
exports.StudentHasNoUnpaidInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.hasNoUnpaidInvoices !== false) {
            writer.uint32(8).bool(message.hasNoUnpaidInvoices);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentHasNoUnpaidInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.hasNoUnpaidInvoices = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hasNoUnpaidInvoices: isSet(object.hasNoUnpaidInvoices) ? globalThis.Boolean(object.hasNoUnpaidInvoices) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hasNoUnpaidInvoices !== false) {
            obj.hasNoUnpaidInvoices = message.hasNoUnpaidInvoices;
        }
        return obj;
    },
    create(base) {
        return exports.StudentHasNoUnpaidInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentHasNoUnpaidInvoicesResponse();
        message.hasNoUnpaidInvoices = object.hasNoUnpaidInvoices ?? false;
        return message;
    },
};
function createBaseListInvoicesRequest() {
    return { context: undefined, filter: undefined };
}
exports.ListInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.filter !== undefined) {
            invoice_1.InvoiceFilter.encode(message.filter, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.filter = invoice_1.InvoiceFilter.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            filter: isSet(object.filter) ? invoice_1.InvoiceFilter.fromJSON(object.filter) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.filter !== undefined) {
            obj.filter = invoice_1.InvoiceFilter.toJSON(message.filter);
        }
        return obj;
    },
    create(base) {
        return exports.ListInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.filter = (object.filter !== undefined && object.filter !== null)
            ? invoice_1.InvoiceFilter.fromPartial(object.filter)
            : undefined;
        return message;
    },
};
function createBaseAggregationResponse() {
    return { invoices: [], invoicesCount: 0 };
}
exports.AggregationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invoices) {
            invoice_1.Invoice.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.invoicesCount !== 0) {
            writer.uint32(16).int32(message.invoicesCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoices.push(invoice_1.Invoice.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.invoicesCount = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoices: globalThis.Array.isArray(object?.invoices) ? object.invoices.map((e) => invoice_1.Invoice.fromJSON(e)) : [],
            invoicesCount: isSet(object.invoicesCount) ? globalThis.Number(object.invoicesCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoices?.length) {
            obj.invoices = message.invoices.map((e) => invoice_1.Invoice.toJSON(e));
        }
        if (message.invoicesCount !== 0) {
            obj.invoicesCount = Math.round(message.invoicesCount);
        }
        return obj;
    },
    create(base) {
        return exports.AggregationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregationResponse();
        message.invoices = object.invoices?.map((e) => invoice_1.Invoice.fromPartial(e)) || [];
        message.invoicesCount = object.invoicesCount ?? 0;
        return message;
    },
};
function createBasePaginatedListInvoicesResponse() {
    return { invoices: [], invoicesCount: 0 };
}
exports.PaginatedListInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invoices) {
            invoice_1.InvoiceResponse.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.invoicesCount !== 0) {
            writer.uint32(16).int32(message.invoicesCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaginatedListInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoices.push(invoice_1.InvoiceResponse.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.invoicesCount = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoices: globalThis.Array.isArray(object?.invoices)
                ? object.invoices.map((e) => invoice_1.InvoiceResponse.fromJSON(e))
                : [],
            invoicesCount: isSet(object.invoicesCount) ? globalThis.Number(object.invoicesCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoices?.length) {
            obj.invoices = message.invoices.map((e) => invoice_1.InvoiceResponse.toJSON(e));
        }
        if (message.invoicesCount !== 0) {
            obj.invoicesCount = Math.round(message.invoicesCount);
        }
        return obj;
    },
    create(base) {
        return exports.PaginatedListInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaginatedListInvoicesResponse();
        message.invoices = object.invoices?.map((e) => invoice_1.InvoiceResponse.fromPartial(e)) || [];
        message.invoicesCount = object.invoicesCount ?? 0;
        return message;
    },
};
function createBaseListInvoicesResponse() {
    return { invoices: [] };
}
exports.ListInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invoices) {
            invoice_1.InvoiceResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoices.push(invoice_1.InvoiceResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoices: globalThis.Array.isArray(object?.invoices)
                ? object.invoices.map((e) => invoice_1.InvoiceResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoices?.length) {
            obj.invoices = message.invoices.map((e) => invoice_1.InvoiceResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListInvoicesResponse();
        message.invoices = object.invoices?.map((e) => invoice_1.InvoiceResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseIsInvoicePaidRequest() {
    return { context: undefined, invoiceId: undefined };
}
exports.IsInvoicePaidRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsInvoicePaidRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        return obj;
    },
    create(base) {
        return exports.IsInvoicePaidRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIsInvoicePaidRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        return message;
    },
};
function createBaseIsInvoicePaidResponse() {
    return { isPaid: false };
}
exports.IsInvoicePaidResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isPaid !== false) {
            writer.uint32(8).bool(message.isPaid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsInvoicePaidResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.isPaid = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isPaid: isSet(object.isPaid) ? globalThis.Boolean(object.isPaid) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isPaid !== false) {
            obj.isPaid = message.isPaid;
        }
        return obj;
    },
    create(base) {
        return exports.IsInvoicePaidResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIsInvoicePaidResponse();
        message.isPaid = object.isPaid ?? false;
        return message;
    },
};
function createBaseCreateInvoiceRequest() {
    return {
        context: undefined,
        title: "",
        description: "",
        showHst: false,
        disableTax: false,
        user: undefined,
        family: undefined,
        items: [],
        coupons: [],
        dueDate: undefined,
        schoolYear: undefined,
        autoPayEnabled: false,
        chargeOnDate: undefined,
        autoPaymentStatus: invoice_1.AutoPaymentStatus.AutoPayPending,
        isTuition: false,
    };
}
exports.CreateInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.showHst !== false) {
            writer.uint32(32).bool(message.showHst);
        }
        if (message.disableTax !== false) {
            writer.uint32(40).bool(message.disableTax);
        }
        if (message.user !== undefined) {
            object_id_1.ObjectId.encode(message.user, writer.uint32(50).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(58).fork()).join();
        }
        for (const v of message.items) {
            invoice_1.InvoiceItem.encode(v, writer.uint32(66).fork()).join();
        }
        for (const v of message.coupons) {
            invoice_1.Coupon.encode(v, writer.uint32(74).fork()).join();
        }
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(82).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(90).fork()).join();
        }
        if (message.autoPayEnabled !== undefined && message.autoPayEnabled !== false) {
            writer.uint32(96).bool(message.autoPayEnabled);
        }
        if (message.chargeOnDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.chargeOnDate), writer.uint32(106).fork()).join();
        }
        if (message.autoPaymentStatus !== undefined && message.autoPaymentStatus !== invoice_1.AutoPaymentStatus.AutoPayPending) {
            writer.uint32(112).int32((0, invoice_1.autoPaymentStatusToNumber)(message.autoPaymentStatus));
        }
        if (message.isTuition !== undefined && message.isTuition !== false) {
            writer.uint32(120).bool(message.isTuition);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.showHst = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.disableTax = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.user = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.items.push(invoice_1.InvoiceItem.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.coupons.push(invoice_1.Coupon.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.autoPayEnabled = reader.bool();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.chargeOnDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.autoPaymentStatus = (0, invoice_1.autoPaymentStatusFromJSON)(reader.int32());
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.isTuition = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            showHst: isSet(object.showHst) ? globalThis.Boolean(object.showHst) : false,
            disableTax: isSet(object.disableTax) ? globalThis.Boolean(object.disableTax) : false,
            user: isSet(object.user) ? object_id_1.ObjectId.fromJSON(object.user) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            items: globalThis.Array.isArray(object?.items) ? object.items.map((e) => invoice_1.InvoiceItem.fromJSON(e)) : [],
            coupons: globalThis.Array.isArray(object?.coupons) ? object.coupons.map((e) => invoice_1.Coupon.fromJSON(e)) : [],
            dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            autoPayEnabled: isSet(object.autoPayEnabled) ? globalThis.Boolean(object.autoPayEnabled) : false,
            chargeOnDate: isSet(object.chargeOnDate) ? fromJsonTimestamp(object.chargeOnDate) : undefined,
            autoPaymentStatus: isSet(object.autoPaymentStatus)
                ? (0, invoice_1.autoPaymentStatusFromJSON)(object.autoPaymentStatus)
                : invoice_1.AutoPaymentStatus.AutoPayPending,
            isTuition: isSet(object.isTuition) ? globalThis.Boolean(object.isTuition) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.showHst !== false) {
            obj.showHst = message.showHst;
        }
        if (message.disableTax !== false) {
            obj.disableTax = message.disableTax;
        }
        if (message.user !== undefined) {
            obj.user = object_id_1.ObjectId.toJSON(message.user);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.items?.length) {
            obj.items = message.items.map((e) => invoice_1.InvoiceItem.toJSON(e));
        }
        if (message.coupons?.length) {
            obj.coupons = message.coupons.map((e) => invoice_1.Coupon.toJSON(e));
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.autoPayEnabled !== undefined && message.autoPayEnabled !== false) {
            obj.autoPayEnabled = message.autoPayEnabled;
        }
        if (message.chargeOnDate !== undefined) {
            obj.chargeOnDate = message.chargeOnDate.toISOString();
        }
        if (message.autoPaymentStatus !== undefined && message.autoPaymentStatus !== invoice_1.AutoPaymentStatus.AutoPayPending) {
            obj.autoPaymentStatus = (0, invoice_1.autoPaymentStatusToJSON)(message.autoPaymentStatus);
        }
        if (message.isTuition !== undefined && message.isTuition !== false) {
            obj.isTuition = message.isTuition;
        }
        return obj;
    },
    create(base) {
        return exports.CreateInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.showHst = object.showHst ?? false;
        message.disableTax = object.disableTax ?? false;
        message.user = (object.user !== undefined && object.user !== null) ? object_id_1.ObjectId.fromPartial(object.user) : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.items = object.items?.map((e) => invoice_1.InvoiceItem.fromPartial(e)) || [];
        message.coupons = object.coupons?.map((e) => invoice_1.Coupon.fromPartial(e)) || [];
        message.dueDate = object.dueDate ?? undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.autoPayEnabled = object.autoPayEnabled ?? false;
        message.chargeOnDate = object.chargeOnDate ?? undefined;
        message.autoPaymentStatus = object.autoPaymentStatus ?? invoice_1.AutoPaymentStatus.AutoPayPending;
        message.isTuition = object.isTuition ?? false;
        return message;
    },
};
function createBaseCreateInvoiceForClassRequest() {
    return {
        context: undefined,
        title: "",
        description: "",
        showHst: false,
        disableTax: false,
        homeroom: undefined,
        course: undefined,
        items: [],
        coupons: [],
        dueDate: undefined,
        schoolYear: undefined,
        autoPayEnabled: false,
        chargeOnDate: undefined,
        autoPaymentStatus: invoice_1.AutoPaymentStatus.AutoPayPending,
    };
}
exports.CreateInvoiceForClassRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.showHst !== false) {
            writer.uint32(32).bool(message.showHst);
        }
        if (message.disableTax !== false) {
            writer.uint32(40).bool(message.disableTax);
        }
        if (message.homeroom !== undefined) {
            object_id_1.ObjectId.encode(message.homeroom, writer.uint32(50).fork()).join();
        }
        if (message.course !== undefined) {
            object_id_1.ObjectId.encode(message.course, writer.uint32(58).fork()).join();
        }
        for (const v of message.items) {
            invoice_1.InvoiceItem.encode(v, writer.uint32(66).fork()).join();
        }
        for (const v of message.coupons) {
            invoice_1.Coupon.encode(v, writer.uint32(74).fork()).join();
        }
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(82).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(90).fork()).join();
        }
        if (message.autoPayEnabled !== undefined && message.autoPayEnabled !== false) {
            writer.uint32(96).bool(message.autoPayEnabled);
        }
        if (message.chargeOnDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.chargeOnDate), writer.uint32(106).fork()).join();
        }
        if (message.autoPaymentStatus !== undefined && message.autoPaymentStatus !== invoice_1.AutoPaymentStatus.AutoPayPending) {
            writer.uint32(112).int32((0, invoice_1.autoPaymentStatusToNumber)(message.autoPaymentStatus));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateInvoiceForClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.showHst = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.disableTax = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.homeroom = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.course = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.items.push(invoice_1.InvoiceItem.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.coupons.push(invoice_1.Coupon.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.autoPayEnabled = reader.bool();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.chargeOnDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.autoPaymentStatus = (0, invoice_1.autoPaymentStatusFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            showHst: isSet(object.showHst) ? globalThis.Boolean(object.showHst) : false,
            disableTax: isSet(object.disableTax) ? globalThis.Boolean(object.disableTax) : false,
            homeroom: isSet(object.homeroom) ? object_id_1.ObjectId.fromJSON(object.homeroom) : undefined,
            course: isSet(object.course) ? object_id_1.ObjectId.fromJSON(object.course) : undefined,
            items: globalThis.Array.isArray(object?.items) ? object.items.map((e) => invoice_1.InvoiceItem.fromJSON(e)) : [],
            coupons: globalThis.Array.isArray(object?.coupons) ? object.coupons.map((e) => invoice_1.Coupon.fromJSON(e)) : [],
            dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            autoPayEnabled: isSet(object.autoPayEnabled) ? globalThis.Boolean(object.autoPayEnabled) : false,
            chargeOnDate: isSet(object.chargeOnDate) ? fromJsonTimestamp(object.chargeOnDate) : undefined,
            autoPaymentStatus: isSet(object.autoPaymentStatus)
                ? (0, invoice_1.autoPaymentStatusFromJSON)(object.autoPaymentStatus)
                : invoice_1.AutoPaymentStatus.AutoPayPending,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.showHst !== false) {
            obj.showHst = message.showHst;
        }
        if (message.disableTax !== false) {
            obj.disableTax = message.disableTax;
        }
        if (message.homeroom !== undefined) {
            obj.homeroom = object_id_1.ObjectId.toJSON(message.homeroom);
        }
        if (message.course !== undefined) {
            obj.course = object_id_1.ObjectId.toJSON(message.course);
        }
        if (message.items?.length) {
            obj.items = message.items.map((e) => invoice_1.InvoiceItem.toJSON(e));
        }
        if (message.coupons?.length) {
            obj.coupons = message.coupons.map((e) => invoice_1.Coupon.toJSON(e));
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.autoPayEnabled !== undefined && message.autoPayEnabled !== false) {
            obj.autoPayEnabled = message.autoPayEnabled;
        }
        if (message.chargeOnDate !== undefined) {
            obj.chargeOnDate = message.chargeOnDate.toISOString();
        }
        if (message.autoPaymentStatus !== undefined && message.autoPaymentStatus !== invoice_1.AutoPaymentStatus.AutoPayPending) {
            obj.autoPaymentStatus = (0, invoice_1.autoPaymentStatusToJSON)(message.autoPaymentStatus);
        }
        return obj;
    },
    create(base) {
        return exports.CreateInvoiceForClassRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateInvoiceForClassRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.showHst = object.showHst ?? false;
        message.disableTax = object.disableTax ?? false;
        message.homeroom = (object.homeroom !== undefined && object.homeroom !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroom)
            : undefined;
        message.course = (object.course !== undefined && object.course !== null)
            ? object_id_1.ObjectId.fromPartial(object.course)
            : undefined;
        message.items = object.items?.map((e) => invoice_1.InvoiceItem.fromPartial(e)) || [];
        message.coupons = object.coupons?.map((e) => invoice_1.Coupon.fromPartial(e)) || [];
        message.dueDate = object.dueDate ?? undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.autoPayEnabled = object.autoPayEnabled ?? false;
        message.chargeOnDate = object.chargeOnDate ?? undefined;
        message.autoPaymentStatus = object.autoPaymentStatus ?? invoice_1.AutoPaymentStatus.AutoPayPending;
        return message;
    },
};
function createBaseGenerateInterviewFeeInvoiceRequest() {
    return { context: undefined, studentId: undefined };
}
exports.GenerateInterviewFeeInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateInterviewFeeInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        return obj;
    },
    create(base) {
        return exports.GenerateInterviewFeeInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateInterviewFeeInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        return message;
    },
};
function createBaseGenerateWaitlistFeeInvoiceRequest() {
    return { context: undefined, studentId: undefined };
}
exports.GenerateWaitlistFeeInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateWaitlistFeeInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        return obj;
    },
    create(base) {
        return exports.GenerateWaitlistFeeInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateWaitlistFeeInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        return message;
    },
};
function createBaseGenerateRegistrationFeesInvoiceRequest() {
    return { context: undefined, studentId: undefined, schoolYear: undefined };
}
exports.GenerateRegistrationFeesInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateRegistrationFeesInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.GenerateRegistrationFeesInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateRegistrationFeesInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseCreateInvoiceForClassResponse() {
    return { invoices: [] };
}
exports.CreateInvoiceForClassResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invoices) {
            invoice_1.InvoiceResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateInvoiceForClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invoices.push(invoice_1.InvoiceResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invoices: globalThis.Array.isArray(object?.invoices)
                ? object.invoices.map((e) => invoice_1.InvoiceResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invoices?.length) {
            obj.invoices = message.invoices.map((e) => invoice_1.InvoiceResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateInvoiceForClassResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateInvoiceForClassResponse();
        message.invoices = object.invoices?.map((e) => invoice_1.InvoiceResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUpdateInvoiceRequest() {
    return {
        context: undefined,
        id: undefined,
        title: "",
        description: "",
        showHst: false,
        disableTax: false,
        items: [],
        coupons: [],
        dueDate: undefined,
    };
}
exports.UpdateInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.showHst !== false) {
            writer.uint32(40).bool(message.showHst);
        }
        if (message.disableTax !== false) {
            writer.uint32(48).bool(message.disableTax);
        }
        for (const v of message.items) {
            invoice_1.InvoiceItem.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.coupons) {
            invoice_1.Coupon.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.showHst = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.disableTax = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.items.push(invoice_1.InvoiceItem.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.coupons.push(invoice_1.Coupon.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            showHst: isSet(object.showHst) ? globalThis.Boolean(object.showHst) : false,
            disableTax: isSet(object.disableTax) ? globalThis.Boolean(object.disableTax) : false,
            items: globalThis.Array.isArray(object?.items) ? object.items.map((e) => invoice_1.InvoiceItem.fromJSON(e)) : [],
            coupons: globalThis.Array.isArray(object?.coupons) ? object.coupons.map((e) => invoice_1.Coupon.fromJSON(e)) : [],
            dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.showHst !== false) {
            obj.showHst = message.showHst;
        }
        if (message.disableTax !== false) {
            obj.disableTax = message.disableTax;
        }
        if (message.items?.length) {
            obj.items = message.items.map((e) => invoice_1.InvoiceItem.toJSON(e));
        }
        if (message.coupons?.length) {
            obj.coupons = message.coupons.map((e) => invoice_1.Coupon.toJSON(e));
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.UpdateInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.showHst = object.showHst ?? false;
        message.disableTax = object.disableTax ?? false;
        message.items = object.items?.map((e) => invoice_1.InvoiceItem.fromPartial(e)) || [];
        message.coupons = object.coupons?.map((e) => invoice_1.Coupon.fromPartial(e)) || [];
        message.dueDate = object.dueDate ?? undefined;
        return message;
    },
};
function createBaseUpdateInvoiceAutoPaymentRequest() {
    return { context: undefined, id: undefined, autoPayEnabled: false, chargeOnDate: undefined };
}
exports.UpdateInvoiceAutoPaymentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.autoPayEnabled !== false) {
            writer.uint32(24).bool(message.autoPayEnabled);
        }
        if (message.chargeOnDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.chargeOnDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateInvoiceAutoPaymentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.autoPayEnabled = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.chargeOnDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            autoPayEnabled: isSet(object.autoPayEnabled) ? globalThis.Boolean(object.autoPayEnabled) : false,
            chargeOnDate: isSet(object.chargeOnDate) ? fromJsonTimestamp(object.chargeOnDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.autoPayEnabled !== false) {
            obj.autoPayEnabled = message.autoPayEnabled;
        }
        if (message.chargeOnDate !== undefined) {
            obj.chargeOnDate = message.chargeOnDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.UpdateInvoiceAutoPaymentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateInvoiceAutoPaymentRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.autoPayEnabled = object.autoPayEnabled ?? false;
        message.chargeOnDate = object.chargeOnDate ?? undefined;
        return message;
    },
};
function createBaseArchiveInvoiceRequest() {
    return { context: undefined, invoiceId: undefined };
}
exports.ArchiveInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArchiveInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        return obj;
    },
    create(base) {
        return exports.ArchiveInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArchiveInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        return message;
    },
};
function createBaseUnarchiveInvoiceRequest() {
    return { context: undefined, invoiceId: undefined };
}
exports.UnarchiveInvoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnarchiveInvoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        return obj;
    },
    create(base) {
        return exports.UnarchiveInvoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnarchiveInvoiceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        return message;
    },
};
function createBaseGetAutoPayInvoicesReadyToChargeRequest() {
    return { context: undefined };
}
exports.GetAutoPayInvoicesReadyToChargeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAutoPayInvoicesReadyToChargeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetAutoPayInvoicesReadyToChargeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAutoPayInvoicesReadyToChargeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseSetAutoPayInvoiceStatusRequest() {
    return { context: undefined, invoiceId: undefined, autoPaymentStatus: invoice_1.AutoPaymentStatus.AutoPayPending };
}
exports.SetAutoPayInvoiceStatusRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.invoiceId !== undefined) {
            object_id_1.ObjectId.encode(message.invoiceId, writer.uint32(18).fork()).join();
        }
        if (message.autoPaymentStatus !== invoice_1.AutoPaymentStatus.AutoPayPending) {
            writer.uint32(24).int32((0, invoice_1.autoPaymentStatusToNumber)(message.autoPaymentStatus));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetAutoPayInvoiceStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.invoiceId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.autoPaymentStatus = (0, invoice_1.autoPaymentStatusFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            invoiceId: isSet(object.invoiceId) ? object_id_1.ObjectId.fromJSON(object.invoiceId) : undefined,
            autoPaymentStatus: isSet(object.autoPaymentStatus)
                ? (0, invoice_1.autoPaymentStatusFromJSON)(object.autoPaymentStatus)
                : invoice_1.AutoPaymentStatus.AutoPayPending,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.invoiceId !== undefined) {
            obj.invoiceId = object_id_1.ObjectId.toJSON(message.invoiceId);
        }
        if (message.autoPaymentStatus !== invoice_1.AutoPaymentStatus.AutoPayPending) {
            obj.autoPaymentStatus = (0, invoice_1.autoPaymentStatusToJSON)(message.autoPaymentStatus);
        }
        return obj;
    },
    create(base) {
        return exports.SetAutoPayInvoiceStatusRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetAutoPayInvoiceStatusRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.invoiceId = (object.invoiceId !== undefined && object.invoiceId !== null)
            ? object_id_1.ObjectId.fromPartial(object.invoiceId)
            : undefined;
        message.autoPaymentStatus = object.autoPaymentStatus ?? invoice_1.AutoPaymentStatus.AutoPayPending;
        return message;
    },
};
function createBaseGetFamilyTuitionInvoicesRequest() {
    return { context: undefined, familyId: undefined, schoolYear: undefined };
}
exports.GetFamilyTuitionInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.familyId !== undefined) {
            object_id_1.ObjectId.encode(message.familyId, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFamilyTuitionInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.familyId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            familyId: isSet(object.familyId) ? object_id_1.ObjectId.fromJSON(object.familyId) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.familyId !== undefined) {
            obj.familyId = object_id_1.ObjectId.toJSON(message.familyId);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.GetFamilyTuitionInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFamilyTuitionInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.familyId = (object.familyId !== undefined && object.familyId !== null)
            ? object_id_1.ObjectId.fromPartial(object.familyId)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseGetStudentsWithUnpaidInvoicesRequest() {
    return { context: undefined, studentStatuses: [], schoolYear: undefined };
}
exports.GetStudentsWithUnpaidInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.studentStatuses) {
            writer.int32((0, invoice_1.studentStatusToNumber)(v));
        }
        writer.join();
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsWithUnpaidInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag === 16) {
                        message.studentStatuses.push((0, invoice_1.studentStatusFromJSON)(reader.int32()));
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.studentStatuses.push((0, invoice_1.studentStatusFromJSON)(reader.int32()));
                        }
                        continue;
                    }
                    break;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentStatuses: globalThis.Array.isArray(object?.studentStatuses)
                ? object.studentStatuses.map((e) => (0, invoice_1.studentStatusFromJSON)(e))
                : [],
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentStatuses?.length) {
            obj.studentStatuses = message.studentStatuses.map((e) => (0, invoice_1.studentStatusToJSON)(e));
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsWithUnpaidInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsWithUnpaidInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentStatuses = object.studentStatuses?.map((e) => e) || [];
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseGetStudentsWithUnpaidInvoicesResponse() {
    return { studentIds: [] };
}
exports.GetStudentsWithUnpaidInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsWithUnpaidInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsWithUnpaidInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsWithUnpaidInvoicesResponse();
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetStudentsWithReregistrationInvoicesRequest() {
    return { context: undefined, schoolYear: undefined };
}
exports.GetStudentsWithReregistrationInvoicesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsWithReregistrationInvoicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsWithReregistrationInvoicesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsWithReregistrationInvoicesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseGetStudentsWithReregistrationInvoicesResponse() {
    return { studentIds: [] };
}
exports.GetStudentsWithReregistrationInvoicesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsWithReregistrationInvoicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsWithReregistrationInvoicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsWithReregistrationInvoicesResponse();
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
