"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/gclass.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTubeVideo = exports.Link = exports.Form = exports.DriveFile = exports.Attachment = exports.MultipleChoiceSubmission = exports.ShortAnswerSubmission = exports.AssignmentSubmission = exports.StateHistoryData = exports.GradeHistory = exports.SubmissionHistory = exports.GClassCourseWork = exports.GClassStudentSubmission = exports.StateHistory = exports.GradeChangeType = exports.WorkType = exports.States = exports.protobufPackage = void 0;
exports.statesFromJSON = statesFromJSON;
exports.statesToJSON = statesToJSON;
exports.workTypeFromJSON = workTypeFromJSON;
exports.workTypeToJSON = workTypeToJSON;
exports.gradeChangeTypeFromJSON = gradeChangeTypeFromJSON;
exports.gradeChangeTypeToJSON = gradeChangeTypeToJSON;
exports.stateHistoryFromJSON = stateHistoryFromJSON;
exports.stateHistoryToJSON = stateHistoryToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const datetime_1 = require("../utils/datetime");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
var States;
(function (States) {
    States[States["STATES_CREATED"] = 0] = "STATES_CREATED";
    States[States["STATES_NEW"] = 1] = "STATES_NEW";
    States[States["STATES_RECLAIMED_BY_STUDENT"] = 2] = "STATES_RECLAIMED_BY_STUDENT";
    States[States["STATES_RETURNED"] = 3] = "STATES_RETURNED";
    States[States["STATES_SUBMISSION_STATE_UNSPECIFIED"] = 4] = "STATES_SUBMISSION_STATE_UNSPECIFIED";
    States[States["STATES_TURNED_IN"] = 5] = "STATES_TURNED_IN";
    States[States["STATES_NOOP"] = 6] = "STATES_NOOP";
    States[States["STATES_FALLTHROUGH_STRING"] = 7] = "STATES_FALLTHROUGH_STRING";
    States[States["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(States || (exports.States = States = {}));
function statesFromJSON(object) {
    switch (object) {
        case 0:
        case "STATES_CREATED":
            return States.STATES_CREATED;
        case 1:
        case "STATES_NEW":
            return States.STATES_NEW;
        case 2:
        case "STATES_RECLAIMED_BY_STUDENT":
            return States.STATES_RECLAIMED_BY_STUDENT;
        case 3:
        case "STATES_RETURNED":
            return States.STATES_RETURNED;
        case 4:
        case "STATES_SUBMISSION_STATE_UNSPECIFIED":
            return States.STATES_SUBMISSION_STATE_UNSPECIFIED;
        case 5:
        case "STATES_TURNED_IN":
            return States.STATES_TURNED_IN;
        case 6:
        case "STATES_NOOP":
            return States.STATES_NOOP;
        case 7:
        case "STATES_FALLTHROUGH_STRING":
            return States.STATES_FALLTHROUGH_STRING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return States.UNRECOGNIZED;
    }
}
function statesToJSON(object) {
    switch (object) {
        case States.STATES_CREATED:
            return "STATES_CREATED";
        case States.STATES_NEW:
            return "STATES_NEW";
        case States.STATES_RECLAIMED_BY_STUDENT:
            return "STATES_RECLAIMED_BY_STUDENT";
        case States.STATES_RETURNED:
            return "STATES_RETURNED";
        case States.STATES_SUBMISSION_STATE_UNSPECIFIED:
            return "STATES_SUBMISSION_STATE_UNSPECIFIED";
        case States.STATES_TURNED_IN:
            return "STATES_TURNED_IN";
        case States.STATES_NOOP:
            return "STATES_NOOP";
        case States.STATES_FALLTHROUGH_STRING:
            return "STATES_FALLTHROUGH_STRING";
        case States.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var WorkType;
(function (WorkType) {
    WorkType[WorkType["WORKTYPE_ASSIGNMENT"] = 0] = "WORKTYPE_ASSIGNMENT";
    WorkType[WorkType["WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED"] = 1] = "WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED";
    WorkType[WorkType["WORKTYPE_MULTIPLE_CHOICE_QUESTION"] = 2] = "WORKTYPE_MULTIPLE_CHOICE_QUESTION";
    WorkType[WorkType["WORKTYPE_SHORT_ANSWER_QUESTION"] = 3] = "WORKTYPE_SHORT_ANSWER_QUESTION";
    WorkType[WorkType["WORKTYPE_NOOP"] = 4] = "WORKTYPE_NOOP";
    WorkType[WorkType["WORKTYPE_FALLTHROUGH_STRING"] = 5] = "WORKTYPE_FALLTHROUGH_STRING";
    WorkType[WorkType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WorkType || (exports.WorkType = WorkType = {}));
function workTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "WORKTYPE_ASSIGNMENT":
            return WorkType.WORKTYPE_ASSIGNMENT;
        case 1:
        case "WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED":
            return WorkType.WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED;
        case 2:
        case "WORKTYPE_MULTIPLE_CHOICE_QUESTION":
            return WorkType.WORKTYPE_MULTIPLE_CHOICE_QUESTION;
        case 3:
        case "WORKTYPE_SHORT_ANSWER_QUESTION":
            return WorkType.WORKTYPE_SHORT_ANSWER_QUESTION;
        case 4:
        case "WORKTYPE_NOOP":
            return WorkType.WORKTYPE_NOOP;
        case 5:
        case "WORKTYPE_FALLTHROUGH_STRING":
            return WorkType.WORKTYPE_FALLTHROUGH_STRING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return WorkType.UNRECOGNIZED;
    }
}
function workTypeToJSON(object) {
    switch (object) {
        case WorkType.WORKTYPE_ASSIGNMENT:
            return "WORKTYPE_ASSIGNMENT";
        case WorkType.WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED:
            return "WORKTYPE_COURSE_WORK_TYPE_UNSPECIFIED";
        case WorkType.WORKTYPE_MULTIPLE_CHOICE_QUESTION:
            return "WORKTYPE_MULTIPLE_CHOICE_QUESTION";
        case WorkType.WORKTYPE_SHORT_ANSWER_QUESTION:
            return "WORKTYPE_SHORT_ANSWER_QUESTION";
        case WorkType.WORKTYPE_NOOP:
            return "WORKTYPE_NOOP";
        case WorkType.WORKTYPE_FALLTHROUGH_STRING:
            return "WORKTYPE_FALLTHROUGH_STRING";
        case WorkType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var GradeChangeType;
(function (GradeChangeType) {
    GradeChangeType[GradeChangeType["GRADE_CHANGE_ASSIGNED_GRADE_POINTS_EARNED"] = 0] = "GRADE_CHANGE_ASSIGNED_GRADE_POINTS_EARNED";
    GradeChangeType[GradeChangeType["GRADE_CHANGE_DRAFT_GRADE_POINTS_EARNED"] = 1] = "GRADE_CHANGE_DRAFT_GRADE_POINTS_EARNED";
    GradeChangeType[GradeChangeType["GRADE_CHANGE_MAX_POINTS"] = 2] = "GRADE_CHANGE_MAX_POINTS";
    GradeChangeType[GradeChangeType["GRADE_CHANGE_UNKNOWN"] = 3] = "GRADE_CHANGE_UNKNOWN";
    GradeChangeType[GradeChangeType["GRADE_CHANGE_NOOP"] = 4] = "GRADE_CHANGE_NOOP";
    GradeChangeType[GradeChangeType["GRADE_CHANGE_FALLTHROUGH_STRING"] = 5] = "GRADE_CHANGE_FALLTHROUGH_STRING";
    GradeChangeType[GradeChangeType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GradeChangeType || (exports.GradeChangeType = GradeChangeType = {}));
function gradeChangeTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "GRADE_CHANGE_ASSIGNED_GRADE_POINTS_EARNED":
            return GradeChangeType.GRADE_CHANGE_ASSIGNED_GRADE_POINTS_EARNED;
        case 1:
        case "GRADE_CHANGE_DRAFT_GRADE_POINTS_EARNED":
            return GradeChangeType.GRADE_CHANGE_DRAFT_GRADE_POINTS_EARNED;
        case 2:
        case "GRADE_CHANGE_MAX_POINTS":
            return GradeChangeType.GRADE_CHANGE_MAX_POINTS;
        case 3:
        case "GRADE_CHANGE_UNKNOWN":
            return GradeChangeType.GRADE_CHANGE_UNKNOWN;
        case 4:
        case "GRADE_CHANGE_NOOP":
            return GradeChangeType.GRADE_CHANGE_NOOP;
        case 5:
        case "GRADE_CHANGE_FALLTHROUGH_STRING":
            return GradeChangeType.GRADE_CHANGE_FALLTHROUGH_STRING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GradeChangeType.UNRECOGNIZED;
    }
}
function gradeChangeTypeToJSON(object) {
    switch (object) {
        case GradeChangeType.GRADE_CHANGE_ASSIGNED_GRADE_POINTS_EARNED:
            return "GRADE_CHANGE_ASSIGNED_GRADE_POINTS_EARNED";
        case GradeChangeType.GRADE_CHANGE_DRAFT_GRADE_POINTS_EARNED:
            return "GRADE_CHANGE_DRAFT_GRADE_POINTS_EARNED";
        case GradeChangeType.GRADE_CHANGE_MAX_POINTS:
            return "GRADE_CHANGE_MAX_POINTS";
        case GradeChangeType.GRADE_CHANGE_UNKNOWN:
            return "GRADE_CHANGE_UNKNOWN";
        case GradeChangeType.GRADE_CHANGE_NOOP:
            return "GRADE_CHANGE_NOOP";
        case GradeChangeType.GRADE_CHANGE_FALLTHROUGH_STRING:
            return "GRADE_CHANGE_FALLTHROUGH_STRING";
        case GradeChangeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var StateHistory;
(function (StateHistory) {
    StateHistory[StateHistory["HISTORY_CREATED"] = 0] = "HISTORY_CREATED";
    StateHistory[StateHistory["HISTORY_RECLAIMED_BY_STUDENT"] = 1] = "HISTORY_RECLAIMED_BY_STUDENT";
    StateHistory[StateHistory["HISTORY_RETURNED"] = 2] = "HISTORY_RETURNED";
    StateHistory[StateHistory["HISTORY_UNSPECIFIED"] = 3] = "HISTORY_UNSPECIFIED";
    StateHistory[StateHistory["HISTORY_STUDENT_EDITED_AFTER_TURN_IN"] = 4] = "HISTORY_STUDENT_EDITED_AFTER_TURN_IN";
    StateHistory[StateHistory["HISTORY_TURNED_IN"] = 5] = "HISTORY_TURNED_IN";
    StateHistory[StateHistory["HISTORY_NOOP"] = 6] = "HISTORY_NOOP";
    StateHistory[StateHistory["HISTORY_FALLTHROUGH_STRING"] = 7] = "HISTORY_FALLTHROUGH_STRING";
    StateHistory[StateHistory["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StateHistory || (exports.StateHistory = StateHistory = {}));
function stateHistoryFromJSON(object) {
    switch (object) {
        case 0:
        case "HISTORY_CREATED":
            return StateHistory.HISTORY_CREATED;
        case 1:
        case "HISTORY_RECLAIMED_BY_STUDENT":
            return StateHistory.HISTORY_RECLAIMED_BY_STUDENT;
        case 2:
        case "HISTORY_RETURNED":
            return StateHistory.HISTORY_RETURNED;
        case 3:
        case "HISTORY_UNSPECIFIED":
            return StateHistory.HISTORY_UNSPECIFIED;
        case 4:
        case "HISTORY_STUDENT_EDITED_AFTER_TURN_IN":
            return StateHistory.HISTORY_STUDENT_EDITED_AFTER_TURN_IN;
        case 5:
        case "HISTORY_TURNED_IN":
            return StateHistory.HISTORY_TURNED_IN;
        case 6:
        case "HISTORY_NOOP":
            return StateHistory.HISTORY_NOOP;
        case 7:
        case "HISTORY_FALLTHROUGH_STRING":
            return StateHistory.HISTORY_FALLTHROUGH_STRING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StateHistory.UNRECOGNIZED;
    }
}
function stateHistoryToJSON(object) {
    switch (object) {
        case StateHistory.HISTORY_CREATED:
            return "HISTORY_CREATED";
        case StateHistory.HISTORY_RECLAIMED_BY_STUDENT:
            return "HISTORY_RECLAIMED_BY_STUDENT";
        case StateHistory.HISTORY_RETURNED:
            return "HISTORY_RETURNED";
        case StateHistory.HISTORY_UNSPECIFIED:
            return "HISTORY_UNSPECIFIED";
        case StateHistory.HISTORY_STUDENT_EDITED_AFTER_TURN_IN:
            return "HISTORY_STUDENT_EDITED_AFTER_TURN_IN";
        case StateHistory.HISTORY_TURNED_IN:
            return "HISTORY_TURNED_IN";
        case StateHistory.HISTORY_NOOP:
            return "HISTORY_NOOP";
        case StateHistory.HISTORY_FALLTHROUGH_STRING:
            return "HISTORY_FALLTHROUGH_STRING";
        case StateHistory.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseGClassStudentSubmission() {
    return {
        gclassStudentSubmissionId: "",
        gclassCourseId: "",
        gclassCourseWorkId: "",
        gclassUserId: "",
        gclassLink: "",
        studentId: undefined,
        homeroomId: undefined,
        courseId: undefined,
        submissionState: 0,
        workNotSubmittedAndLate: false,
        assignedGrade: 0,
        workType: 0,
        submissionHistory: [],
        assignmentSubmission: undefined,
        shortAnswerSubmission: undefined,
        multipleChoiceSubmission: undefined,
        rawJsonData: "",
    };
}
exports.GClassStudentSubmission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gclassStudentSubmissionId !== "") {
            writer.uint32(10).string(message.gclassStudentSubmissionId);
        }
        if (message.gclassCourseId !== "") {
            writer.uint32(18).string(message.gclassCourseId);
        }
        if (message.gclassCourseWorkId !== "") {
            writer.uint32(26).string(message.gclassCourseWorkId);
        }
        if (message.gclassUserId !== "") {
            writer.uint32(34).string(message.gclassUserId);
        }
        if (message.gclassLink !== "") {
            writer.uint32(42).string(message.gclassLink);
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(50).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(58).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(66).fork()).join();
        }
        if (message.submissionState !== 0) {
            writer.uint32(72).int32(message.submissionState);
        }
        if (message.workNotSubmittedAndLate !== false) {
            writer.uint32(80).bool(message.workNotSubmittedAndLate);
        }
        if (message.assignedGrade !== 0) {
            writer.uint32(89).double(message.assignedGrade);
        }
        if (message.workType !== 0) {
            writer.uint32(96).int32(message.workType);
        }
        for (const v of message.submissionHistory) {
            exports.SubmissionHistory.encode(v, writer.uint32(106).fork()).join();
        }
        if (message.assignmentSubmission !== undefined) {
            exports.AssignmentSubmission.encode(message.assignmentSubmission, writer.uint32(114).fork()).join();
        }
        if (message.shortAnswerSubmission !== undefined) {
            exports.ShortAnswerSubmission.encode(message.shortAnswerSubmission, writer.uint32(122).fork()).join();
        }
        if (message.multipleChoiceSubmission !== undefined) {
            exports.MultipleChoiceSubmission.encode(message.multipleChoiceSubmission, writer.uint32(130).fork()).join();
        }
        if (message.rawJsonData !== "") {
            writer.uint32(138).string(message.rawJsonData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGClassStudentSubmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gclassStudentSubmissionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.gclassCourseId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.gclassCourseWorkId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.gclassUserId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.gclassLink = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.submissionState = reader.int32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.workNotSubmittedAndLate = reader.bool();
                    continue;
                case 11:
                    if (tag !== 89) {
                        break;
                    }
                    message.assignedGrade = reader.double();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.workType = reader.int32();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.submissionHistory.push(exports.SubmissionHistory.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.assignmentSubmission = exports.AssignmentSubmission.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.shortAnswerSubmission = exports.ShortAnswerSubmission.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.multipleChoiceSubmission = exports.MultipleChoiceSubmission.decode(reader, reader.uint32());
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.rawJsonData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gclassStudentSubmissionId: isSet(object.gclassStudentSubmissionId)
                ? globalThis.String(object.gclassStudentSubmissionId)
                : "",
            gclassCourseId: isSet(object.gclassCourseId) ? globalThis.String(object.gclassCourseId) : "",
            gclassCourseWorkId: isSet(object.gclassCourseWorkId) ? globalThis.String(object.gclassCourseWorkId) : "",
            gclassUserId: isSet(object.gclassUserId) ? globalThis.String(object.gclassUserId) : "",
            gclassLink: isSet(object.gclassLink) ? globalThis.String(object.gclassLink) : "",
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            submissionState: isSet(object.submissionState) ? statesFromJSON(object.submissionState) : 0,
            workNotSubmittedAndLate: isSet(object.workNotSubmittedAndLate)
                ? globalThis.Boolean(object.workNotSubmittedAndLate)
                : false,
            assignedGrade: isSet(object.assignedGrade) ? globalThis.Number(object.assignedGrade) : 0,
            workType: isSet(object.workType) ? workTypeFromJSON(object.workType) : 0,
            submissionHistory: globalThis.Array.isArray(object?.submissionHistory)
                ? object.submissionHistory.map((e) => exports.SubmissionHistory.fromJSON(e))
                : [],
            assignmentSubmission: isSet(object.assignmentSubmission)
                ? exports.AssignmentSubmission.fromJSON(object.assignmentSubmission)
                : undefined,
            shortAnswerSubmission: isSet(object.shortAnswerSubmission)
                ? exports.ShortAnswerSubmission.fromJSON(object.shortAnswerSubmission)
                : undefined,
            multipleChoiceSubmission: isSet(object.multipleChoiceSubmission)
                ? exports.MultipleChoiceSubmission.fromJSON(object.multipleChoiceSubmission)
                : undefined,
            rawJsonData: isSet(object.rawJsonData) ? globalThis.String(object.rawJsonData) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gclassStudentSubmissionId !== "") {
            obj.gclassStudentSubmissionId = message.gclassStudentSubmissionId;
        }
        if (message.gclassCourseId !== "") {
            obj.gclassCourseId = message.gclassCourseId;
        }
        if (message.gclassCourseWorkId !== "") {
            obj.gclassCourseWorkId = message.gclassCourseWorkId;
        }
        if (message.gclassUserId !== "") {
            obj.gclassUserId = message.gclassUserId;
        }
        if (message.gclassLink !== "") {
            obj.gclassLink = message.gclassLink;
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.submissionState !== 0) {
            obj.submissionState = statesToJSON(message.submissionState);
        }
        if (message.workNotSubmittedAndLate !== false) {
            obj.workNotSubmittedAndLate = message.workNotSubmittedAndLate;
        }
        if (message.assignedGrade !== 0) {
            obj.assignedGrade = message.assignedGrade;
        }
        if (message.workType !== 0) {
            obj.workType = workTypeToJSON(message.workType);
        }
        if (message.submissionHistory?.length) {
            obj.submissionHistory = message.submissionHistory.map((e) => exports.SubmissionHistory.toJSON(e));
        }
        if (message.assignmentSubmission !== undefined) {
            obj.assignmentSubmission = exports.AssignmentSubmission.toJSON(message.assignmentSubmission);
        }
        if (message.shortAnswerSubmission !== undefined) {
            obj.shortAnswerSubmission = exports.ShortAnswerSubmission.toJSON(message.shortAnswerSubmission);
        }
        if (message.multipleChoiceSubmission !== undefined) {
            obj.multipleChoiceSubmission = exports.MultipleChoiceSubmission.toJSON(message.multipleChoiceSubmission);
        }
        if (message.rawJsonData !== "") {
            obj.rawJsonData = message.rawJsonData;
        }
        return obj;
    },
    create(base) {
        return exports.GClassStudentSubmission.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGClassStudentSubmission();
        message.gclassStudentSubmissionId = object.gclassStudentSubmissionId ?? "";
        message.gclassCourseId = object.gclassCourseId ?? "";
        message.gclassCourseWorkId = object.gclassCourseWorkId ?? "";
        message.gclassUserId = object.gclassUserId ?? "";
        message.gclassLink = object.gclassLink ?? "";
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.submissionState = object.submissionState ?? 0;
        message.workNotSubmittedAndLate = object.workNotSubmittedAndLate ?? false;
        message.assignedGrade = object.assignedGrade ?? 0;
        message.workType = object.workType ?? 0;
        message.submissionHistory = object.submissionHistory?.map((e) => exports.SubmissionHistory.fromPartial(e)) || [];
        message.assignmentSubmission = (object.assignmentSubmission !== undefined && object.assignmentSubmission !== null)
            ? exports.AssignmentSubmission.fromPartial(object.assignmentSubmission)
            : undefined;
        message.shortAnswerSubmission =
            (object.shortAnswerSubmission !== undefined && object.shortAnswerSubmission !== null)
                ? exports.ShortAnswerSubmission.fromPartial(object.shortAnswerSubmission)
                : undefined;
        message.multipleChoiceSubmission =
            (object.multipleChoiceSubmission !== undefined && object.multipleChoiceSubmission !== null)
                ? exports.MultipleChoiceSubmission.fromPartial(object.multipleChoiceSubmission)
                : undefined;
        message.rawJsonData = object.rawJsonData ?? "";
        return message;
    },
};
function createBaseGClassCourseWork() {
    return {
        gclassCourseWorkId: "",
        gclassCourseId: "",
        homeroomId: undefined,
        courseId: undefined,
        title: "",
        description: "",
        gclassLink: "",
        materials: [],
        creationTime: undefined,
        dueDate: undefined,
        workType: 0,
        rawJsonData: "",
    };
}
exports.GClassCourseWork = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gclassCourseWorkId !== "") {
            writer.uint32(10).string(message.gclassCourseWorkId);
        }
        if (message.gclassCourseId !== "") {
            writer.uint32(18).string(message.gclassCourseId);
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(26).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(34).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(42).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(50).string(message.description);
        }
        if (message.gclassLink !== "") {
            writer.uint32(58).string(message.gclassLink);
        }
        for (const v of message.materials) {
            exports.Attachment.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.creationTime !== undefined) {
            datetime_1.DateTime.encode(message.creationTime, writer.uint32(74).fork()).join();
        }
        if (message.dueDate !== undefined) {
            datetime_1.DateTime.encode(message.dueDate, writer.uint32(82).fork()).join();
        }
        if (message.workType !== 0) {
            writer.uint32(88).int32(message.workType);
        }
        if (message.rawJsonData !== "") {
            writer.uint32(98).string(message.rawJsonData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGClassCourseWork();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gclassCourseWorkId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.gclassCourseId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.gclassLink = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.materials.push(exports.Attachment.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.creationTime = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.dueDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.workType = reader.int32();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.rawJsonData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gclassCourseWorkId: isSet(object.gclassCourseWorkId) ? globalThis.String(object.gclassCourseWorkId) : "",
            gclassCourseId: isSet(object.gclassCourseId) ? globalThis.String(object.gclassCourseId) : "",
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            gclassLink: isSet(object.gclassLink) ? globalThis.String(object.gclassLink) : "",
            materials: globalThis.Array.isArray(object?.materials)
                ? object.materials.map((e) => exports.Attachment.fromJSON(e))
                : [],
            creationTime: isSet(object.creationTime) ? datetime_1.DateTime.fromJSON(object.creationTime) : undefined,
            dueDate: isSet(object.dueDate) ? datetime_1.DateTime.fromJSON(object.dueDate) : undefined,
            workType: isSet(object.workType) ? workTypeFromJSON(object.workType) : 0,
            rawJsonData: isSet(object.rawJsonData) ? globalThis.String(object.rawJsonData) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gclassCourseWorkId !== "") {
            obj.gclassCourseWorkId = message.gclassCourseWorkId;
        }
        if (message.gclassCourseId !== "") {
            obj.gclassCourseId = message.gclassCourseId;
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.gclassLink !== "") {
            obj.gclassLink = message.gclassLink;
        }
        if (message.materials?.length) {
            obj.materials = message.materials.map((e) => exports.Attachment.toJSON(e));
        }
        if (message.creationTime !== undefined) {
            obj.creationTime = datetime_1.DateTime.toJSON(message.creationTime);
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = datetime_1.DateTime.toJSON(message.dueDate);
        }
        if (message.workType !== 0) {
            obj.workType = workTypeToJSON(message.workType);
        }
        if (message.rawJsonData !== "") {
            obj.rawJsonData = message.rawJsonData;
        }
        return obj;
    },
    create(base) {
        return exports.GClassCourseWork.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGClassCourseWork();
        message.gclassCourseWorkId = object.gclassCourseWorkId ?? "";
        message.gclassCourseId = object.gclassCourseId ?? "";
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.gclassLink = object.gclassLink ?? "";
        message.materials = object.materials?.map((e) => exports.Attachment.fromPartial(e)) || [];
        message.creationTime = (object.creationTime !== undefined && object.creationTime !== null)
            ? datetime_1.DateTime.fromPartial(object.creationTime)
            : undefined;
        message.dueDate = (object.dueDate !== undefined && object.dueDate !== null)
            ? datetime_1.DateTime.fromPartial(object.dueDate)
            : undefined;
        message.workType = object.workType ?? 0;
        message.rawJsonData = object.rawJsonData ?? "";
        return message;
    },
};
function createBaseSubmissionHistory() {
    return { gradeHistory: undefined, stateHistory: undefined };
}
exports.SubmissionHistory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gradeHistory !== undefined) {
            exports.GradeHistory.encode(message.gradeHistory, writer.uint32(10).fork()).join();
        }
        if (message.stateHistory !== undefined) {
            exports.StateHistoryData.encode(message.stateHistory, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubmissionHistory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gradeHistory = exports.GradeHistory.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stateHistory = exports.StateHistoryData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gradeHistory: isSet(object.gradeHistory) ? exports.GradeHistory.fromJSON(object.gradeHistory) : undefined,
            stateHistory: isSet(object.stateHistory) ? exports.StateHistoryData.fromJSON(object.stateHistory) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gradeHistory !== undefined) {
            obj.gradeHistory = exports.GradeHistory.toJSON(message.gradeHistory);
        }
        if (message.stateHistory !== undefined) {
            obj.stateHistory = exports.StateHistoryData.toJSON(message.stateHistory);
        }
        return obj;
    },
    create(base) {
        return exports.SubmissionHistory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubmissionHistory();
        message.gradeHistory = (object.gradeHistory !== undefined && object.gradeHistory !== null)
            ? exports.GradeHistory.fromPartial(object.gradeHistory)
            : undefined;
        message.stateHistory = (object.stateHistory !== undefined && object.stateHistory !== null)
            ? exports.StateHistoryData.fromPartial(object.stateHistory)
            : undefined;
        return message;
    },
};
function createBaseGradeHistory() {
    return { actorUserId: "", gradeChangeType: 0, gradeTimestamp: undefined, maxPoints: 0, pointsEarned: 0 };
}
exports.GradeHistory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorUserId !== "") {
            writer.uint32(10).string(message.actorUserId);
        }
        if (message.gradeChangeType !== undefined && message.gradeChangeType !== 0) {
            writer.uint32(16).int32(message.gradeChangeType);
        }
        if (message.gradeTimestamp !== undefined) {
            datetime_1.DateTime.encode(message.gradeTimestamp, writer.uint32(26).fork()).join();
        }
        if (message.maxPoints !== 0) {
            writer.uint32(33).double(message.maxPoints);
        }
        if (message.pointsEarned !== 0) {
            writer.uint32(41).double(message.pointsEarned);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGradeHistory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actorUserId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.gradeChangeType = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.gradeTimestamp = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.maxPoints = reader.double();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.pointsEarned = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorUserId: isSet(object.actorUserId) ? globalThis.String(object.actorUserId) : "",
            gradeChangeType: isSet(object.gradeChangeType) ? gradeChangeTypeFromJSON(object.gradeChangeType) : 0,
            gradeTimestamp: isSet(object.gradeTimestamp) ? datetime_1.DateTime.fromJSON(object.gradeTimestamp) : undefined,
            maxPoints: isSet(object.maxPoints) ? globalThis.Number(object.maxPoints) : 0,
            pointsEarned: isSet(object.pointsEarned) ? globalThis.Number(object.pointsEarned) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorUserId !== "") {
            obj.actorUserId = message.actorUserId;
        }
        if (message.gradeChangeType !== undefined && message.gradeChangeType !== 0) {
            obj.gradeChangeType = gradeChangeTypeToJSON(message.gradeChangeType);
        }
        if (message.gradeTimestamp !== undefined) {
            obj.gradeTimestamp = datetime_1.DateTime.toJSON(message.gradeTimestamp);
        }
        if (message.maxPoints !== 0) {
            obj.maxPoints = message.maxPoints;
        }
        if (message.pointsEarned !== 0) {
            obj.pointsEarned = message.pointsEarned;
        }
        return obj;
    },
    create(base) {
        return exports.GradeHistory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGradeHistory();
        message.actorUserId = object.actorUserId ?? "";
        message.gradeChangeType = object.gradeChangeType ?? 0;
        message.gradeTimestamp = (object.gradeTimestamp !== undefined && object.gradeTimestamp !== null)
            ? datetime_1.DateTime.fromPartial(object.gradeTimestamp)
            : undefined;
        message.maxPoints = object.maxPoints ?? 0;
        message.pointsEarned = object.pointsEarned ?? 0;
        return message;
    },
};
function createBaseStateHistoryData() {
    return { actorUserId: "", state: 0, stateTimestamp: undefined };
}
exports.StateHistoryData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorUserId !== "") {
            writer.uint32(10).string(message.actorUserId);
        }
        if (message.state !== undefined && message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        if (message.stateTimestamp !== undefined) {
            datetime_1.DateTime.encode(message.stateTimestamp, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStateHistoryData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actorUserId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stateTimestamp = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorUserId: isSet(object.actorUserId) ? globalThis.String(object.actorUserId) : "",
            state: isSet(object.state) ? stateHistoryFromJSON(object.state) : 0,
            stateTimestamp: isSet(object.stateTimestamp) ? datetime_1.DateTime.fromJSON(object.stateTimestamp) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorUserId !== "") {
            obj.actorUserId = message.actorUserId;
        }
        if (message.state !== undefined && message.state !== 0) {
            obj.state = stateHistoryToJSON(message.state);
        }
        if (message.stateTimestamp !== undefined) {
            obj.stateTimestamp = datetime_1.DateTime.toJSON(message.stateTimestamp);
        }
        return obj;
    },
    create(base) {
        return exports.StateHistoryData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStateHistoryData();
        message.actorUserId = object.actorUserId ?? "";
        message.state = object.state ?? 0;
        message.stateTimestamp = (object.stateTimestamp !== undefined && object.stateTimestamp !== null)
            ? datetime_1.DateTime.fromPartial(object.stateTimestamp)
            : undefined;
        return message;
    },
};
function createBaseAssignmentSubmission() {
    return { attachments: [] };
}
exports.AssignmentSubmission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.attachments) {
            exports.Attachment.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAssignmentSubmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.attachments.push(exports.Attachment.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            attachments: globalThis.Array.isArray(object?.attachments)
                ? object.attachments.map((e) => exports.Attachment.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.attachments?.length) {
            obj.attachments = message.attachments.map((e) => exports.Attachment.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AssignmentSubmission.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAssignmentSubmission();
        message.attachments = object.attachments?.map((e) => exports.Attachment.fromPartial(e)) || [];
        return message;
    },
};
function createBaseShortAnswerSubmission() {
    return { answer: "" };
}
exports.ShortAnswerSubmission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.answer !== "") {
            writer.uint32(10).string(message.answer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShortAnswerSubmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.answer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { answer: isSet(object.answer) ? globalThis.String(object.answer) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.answer !== "") {
            obj.answer = message.answer;
        }
        return obj;
    },
    create(base) {
        return exports.ShortAnswerSubmission.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseShortAnswerSubmission();
        message.answer = object.answer ?? "";
        return message;
    },
};
function createBaseMultipleChoiceSubmission() {
    return { answer: "" };
}
exports.MultipleChoiceSubmission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.answer !== "") {
            writer.uint32(10).string(message.answer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultipleChoiceSubmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.answer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { answer: isSet(object.answer) ? globalThis.String(object.answer) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.answer !== "") {
            obj.answer = message.answer;
        }
        return obj;
    },
    create(base) {
        return exports.MultipleChoiceSubmission.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultipleChoiceSubmission();
        message.answer = object.answer ?? "";
        return message;
    },
};
function createBaseAttachment() {
    return { driveFile: undefined, form: undefined, link: undefined, youtubeVideo: undefined };
}
exports.Attachment = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.driveFile !== undefined) {
            exports.DriveFile.encode(message.driveFile, writer.uint32(10).fork()).join();
        }
        if (message.form !== undefined) {
            exports.Form.encode(message.form, writer.uint32(18).fork()).join();
        }
        if (message.link !== undefined) {
            exports.Link.encode(message.link, writer.uint32(26).fork()).join();
        }
        if (message.youtubeVideo !== undefined) {
            exports.YouTubeVideo.encode(message.youtubeVideo, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttachment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.driveFile = exports.DriveFile.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.form = exports.Form.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.link = exports.Link.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.youtubeVideo = exports.YouTubeVideo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            driveFile: isSet(object.driveFile) ? exports.DriveFile.fromJSON(object.driveFile) : undefined,
            form: isSet(object.form) ? exports.Form.fromJSON(object.form) : undefined,
            link: isSet(object.link) ? exports.Link.fromJSON(object.link) : undefined,
            youtubeVideo: isSet(object.youtubeVideo) ? exports.YouTubeVideo.fromJSON(object.youtubeVideo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.driveFile !== undefined) {
            obj.driveFile = exports.DriveFile.toJSON(message.driveFile);
        }
        if (message.form !== undefined) {
            obj.form = exports.Form.toJSON(message.form);
        }
        if (message.link !== undefined) {
            obj.link = exports.Link.toJSON(message.link);
        }
        if (message.youtubeVideo !== undefined) {
            obj.youtubeVideo = exports.YouTubeVideo.toJSON(message.youtubeVideo);
        }
        return obj;
    },
    create(base) {
        return exports.Attachment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttachment();
        message.driveFile = (object.driveFile !== undefined && object.driveFile !== null)
            ? exports.DriveFile.fromPartial(object.driveFile)
            : undefined;
        message.form = (object.form !== undefined && object.form !== null) ? exports.Form.fromPartial(object.form) : undefined;
        message.link = (object.link !== undefined && object.link !== null) ? exports.Link.fromPartial(object.link) : undefined;
        message.youtubeVideo = (object.youtubeVideo !== undefined && object.youtubeVideo !== null)
            ? exports.YouTubeVideo.fromPartial(object.youtubeVideo)
            : undefined;
        return message;
    },
};
function createBaseDriveFile() {
    return { alternateLink: "", id: "", thumbnailUrl: "", title: "" };
}
exports.DriveFile = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.alternateLink !== "") {
            writer.uint32(10).string(message.alternateLink);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.thumbnailUrl !== "") {
            writer.uint32(26).string(message.thumbnailUrl);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDriveFile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alternateLink = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.thumbnailUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alternateLink: isSet(object.alternateLink) ? globalThis.String(object.alternateLink) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alternateLink !== "") {
            obj.alternateLink = message.alternateLink;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.thumbnailUrl !== "") {
            obj.thumbnailUrl = message.thumbnailUrl;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        return obj;
    },
    create(base) {
        return exports.DriveFile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDriveFile();
        message.alternateLink = object.alternateLink ?? "";
        message.id = object.id ?? "";
        message.thumbnailUrl = object.thumbnailUrl ?? "";
        message.title = object.title ?? "";
        return message;
    },
};
function createBaseForm() {
    return { formUrl: "", responseUrl: "", thumbnailUrl: "", title: "" };
}
exports.Form = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.formUrl !== "") {
            writer.uint32(10).string(message.formUrl);
        }
        if (message.responseUrl !== "") {
            writer.uint32(18).string(message.responseUrl);
        }
        if (message.thumbnailUrl !== "") {
            writer.uint32(26).string(message.thumbnailUrl);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseForm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.formUrl = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.responseUrl = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.thumbnailUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            formUrl: isSet(object.formUrl) ? globalThis.String(object.formUrl) : "",
            responseUrl: isSet(object.responseUrl) ? globalThis.String(object.responseUrl) : "",
            thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.formUrl !== "") {
            obj.formUrl = message.formUrl;
        }
        if (message.responseUrl !== "") {
            obj.responseUrl = message.responseUrl;
        }
        if (message.thumbnailUrl !== "") {
            obj.thumbnailUrl = message.thumbnailUrl;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        return obj;
    },
    create(base) {
        return exports.Form.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseForm();
        message.formUrl = object.formUrl ?? "";
        message.responseUrl = object.responseUrl ?? "";
        message.thumbnailUrl = object.thumbnailUrl ?? "";
        message.title = object.title ?? "";
        return message;
    },
};
function createBaseLink() {
    return { thumbnailUrl: "", title: "", url: "" };
}
exports.Link = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.thumbnailUrl !== "") {
            writer.uint32(10).string(message.thumbnailUrl);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLink();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.thumbnailUrl = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.thumbnailUrl !== "") {
            obj.thumbnailUrl = message.thumbnailUrl;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.Link.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLink();
        message.thumbnailUrl = object.thumbnailUrl ?? "";
        message.title = object.title ?? "";
        message.url = object.url ?? "";
        return message;
    },
};
function createBaseYouTubeVideo() {
    return { alternateLink: "", id: "", thumbnailUrl: "", title: "" };
}
exports.YouTubeVideo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.alternateLink !== "") {
            writer.uint32(10).string(message.alternateLink);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.thumbnailUrl !== "") {
            writer.uint32(26).string(message.thumbnailUrl);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseYouTubeVideo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alternateLink = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.thumbnailUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alternateLink: isSet(object.alternateLink) ? globalThis.String(object.alternateLink) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alternateLink !== "") {
            obj.alternateLink = message.alternateLink;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.thumbnailUrl !== "") {
            obj.thumbnailUrl = message.thumbnailUrl;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        return obj;
    },
    create(base) {
        return exports.YouTubeVideo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseYouTubeVideo();
        message.alternateLink = object.alternateLink ?? "";
        message.id = object.id ?? "";
        message.thumbnailUrl = object.thumbnailUrl ?? "";
        message.title = object.title ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
