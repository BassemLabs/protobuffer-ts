"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/semester_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemesterResponse = exports.CreateRequest = exports.ArchiveRequest = exports.UpdateRequest = exports.HomeroomsResponse = exports.HomeroomsRequest = exports.CoursesResponse = exports.CoursesRequest = exports.GetActiveSemestersResponse = exports.GetActiveSemestersRequest = exports.AggregateSemesterResponse = exports.AggregateSemesterRequest = exports.GetSemesterRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const datetime_1 = require("../utils/datetime");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const course_1 = require("./course");
const homeroom_1 = require("./homeroom");
const semester_1 = require("./semester");
exports.protobufPackage = "class_service.semester_service";
function createBaseGetSemesterRequest() {
    return { context: undefined, semesterId: undefined };
}
exports.GetSemesterRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSemesterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        return obj;
    },
    create(base) {
        return exports.GetSemesterRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSemesterRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        return message;
    },
};
function createBaseAggregateSemesterRequest() {
    return { context: undefined, aggregationDocument: "" };
}
exports.AggregateSemesterRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.aggregationDocument !== "") {
            writer.uint32(18).string(message.aggregationDocument);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregateSemesterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.aggregationDocument = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            aggregationDocument: isSet(object.aggregationDocument) ? globalThis.String(object.aggregationDocument) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.aggregationDocument !== "") {
            obj.aggregationDocument = message.aggregationDocument;
        }
        return obj;
    },
    create(base) {
        return exports.AggregateSemesterRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregateSemesterRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.aggregationDocument = object.aggregationDocument ?? "";
        return message;
    },
};
function createBaseAggregateSemesterResponse() {
    return { result: "" };
}
exports.AggregateSemesterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregateSemesterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.AggregateSemesterResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregateSemesterResponse();
        message.result = object.result ?? "";
        return message;
    },
};
function createBaseGetActiveSemestersRequest() {
    return { context: undefined };
}
exports.GetActiveSemestersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveSemestersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveSemestersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveSemestersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetActiveSemestersResponse() {
    return { semesters: [] };
}
exports.GetActiveSemestersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.semesters) {
            semester_1.Semester.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetActiveSemestersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.semesters.push(semester_1.Semester.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            semesters: globalThis.Array.isArray(object?.semesters)
                ? object.semesters.map((e) => semester_1.Semester.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.semesters?.length) {
            obj.semesters = message.semesters.map((e) => semester_1.Semester.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetActiveSemestersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetActiveSemestersResponse();
        message.semesters = object.semesters?.map((e) => semester_1.Semester.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCoursesRequest() {
    return { context: undefined, semesterId: undefined };
}
exports.CoursesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCoursesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        return obj;
    },
    create(base) {
        return exports.CoursesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCoursesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        return message;
    },
};
function createBaseCoursesResponse() {
    return { courses: [] };
}
exports.CoursesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.courses) {
            course_1.Course.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCoursesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courses.push(course_1.Course.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e) => course_1.Course.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courses?.length) {
            obj.courses = message.courses.map((e) => course_1.Course.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CoursesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCoursesResponse();
        message.courses = object.courses?.map((e) => course_1.Course.fromPartial(e)) || [];
        return message;
    },
};
function createBaseHomeroomsRequest() {
    return { context: undefined, semesterId: undefined };
}
exports.HomeroomsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHomeroomsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        return obj;
    },
    create(base) {
        return exports.HomeroomsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHomeroomsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        return message;
    },
};
function createBaseHomeroomsResponse() {
    return { homerooms: [] };
}
exports.HomeroomsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.homerooms) {
            homeroom_1.Homeroom.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHomeroomsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homerooms.push(homeroom_1.Homeroom.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homerooms: globalThis.Array.isArray(object?.homerooms)
                ? object.homerooms.map((e) => homeroom_1.Homeroom.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homerooms?.length) {
            obj.homerooms = message.homerooms.map((e) => homeroom_1.Homeroom.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.HomeroomsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHomeroomsResponse();
        message.homerooms = object.homerooms?.map((e) => homeroom_1.Homeroom.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUpdateRequest() {
    return { context: undefined, semesterId: undefined, name: "", startDate: undefined, endDate: undefined };
}
exports.UpdateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.startDate !== undefined) {
            datetime_1.DateTime.encode(message.startDate, writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            datetime_1.DateTime.encode(message.endDate, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            startDate: isSet(object.startDate) ? datetime_1.DateTime.fromJSON(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? datetime_1.DateTime.fromJSON(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.startDate !== undefined) {
            obj.startDate = datetime_1.DateTime.toJSON(message.startDate);
        }
        if (message.endDate !== undefined) {
            obj.endDate = datetime_1.DateTime.toJSON(message.endDate);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.name = object.name ?? "";
        message.startDate = (object.startDate !== undefined && object.startDate !== null)
            ? datetime_1.DateTime.fromPartial(object.startDate)
            : undefined;
        message.endDate = (object.endDate !== undefined && object.endDate !== null)
            ? datetime_1.DateTime.fromPartial(object.endDate)
            : undefined;
        return message;
    },
};
function createBaseArchiveRequest() {
    return { context: undefined, semesterId: undefined };
}
exports.ArchiveRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArchiveRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        return obj;
    },
    create(base) {
        return exports.ArchiveRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArchiveRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        return message;
    },
};
function createBaseCreateRequest() {
    return { context: undefined, name: "", startDate: undefined, endDate: undefined };
}
exports.CreateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.startDate !== undefined) {
            datetime_1.DateTime.encode(message.startDate, writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            datetime_1.DateTime.encode(message.endDate, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.startDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.endDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            startDate: isSet(object.startDate) ? datetime_1.DateTime.fromJSON(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? datetime_1.DateTime.fromJSON(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.startDate !== undefined) {
            obj.startDate = datetime_1.DateTime.toJSON(message.startDate);
        }
        if (message.endDate !== undefined) {
            obj.endDate = datetime_1.DateTime.toJSON(message.endDate);
        }
        return obj;
    },
    create(base) {
        return exports.CreateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.name = object.name ?? "";
        message.startDate = (object.startDate !== undefined && object.startDate !== null)
            ? datetime_1.DateTime.fromPartial(object.startDate)
            : undefined;
        message.endDate = (object.endDate !== undefined && object.endDate !== null)
            ? datetime_1.DateTime.fromPartial(object.endDate)
            : undefined;
        return message;
    },
};
function createBaseSemesterResponse() {
    return { semester: undefined };
}
exports.SemesterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.semester !== undefined) {
            semester_1.Semester.encode(message.semester, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSemesterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.semester = semester_1.Semester.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { semester: isSet(object.semester) ? semester_1.Semester.fromJSON(object.semester) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.semester !== undefined) {
            obj.semester = semester_1.Semester.toJSON(message.semester);
        }
        return obj;
    },
    create(base) {
        return exports.SemesterResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSemesterResponse();
        message.semester = (object.semester !== undefined && object.semester !== null)
            ? semester_1.Semester.fromPartial(object.semester)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
