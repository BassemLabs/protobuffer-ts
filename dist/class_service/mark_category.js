"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/mark_category.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonalizedMarkCategory = exports.DetailedMarkCategory = exports.MarkCategory = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
function createBaseMarkCategory() {
    return { id: undefined, courseId: undefined, name: "", percentage: 0 };
}
exports.MarkCategory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.percentage !== 0) {
            writer.uint32(32).uint32(message.percentage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarkCategory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.percentage = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.percentage !== 0) {
            obj.percentage = Math.round(message.percentage);
        }
        return obj;
    },
    create(base) {
        return exports.MarkCategory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarkCategory();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.percentage = object.percentage ?? 0;
        return message;
    },
};
function createBaseDetailedMarkCategory() {
    return { id: undefined, courseId: undefined, name: "", percentage: 0, effectivePercentage: 0 };
}
exports.DetailedMarkCategory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.percentage !== 0) {
            writer.uint32(32).uint32(message.percentage);
        }
        if (message.effectivePercentage !== 0) {
            writer.uint32(41).double(message.effectivePercentage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDetailedMarkCategory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.percentage = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.effectivePercentage = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
            effectivePercentage: isSet(object.effectivePercentage) ? globalThis.Number(object.effectivePercentage) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.percentage !== 0) {
            obj.percentage = Math.round(message.percentage);
        }
        if (message.effectivePercentage !== 0) {
            obj.effectivePercentage = message.effectivePercentage;
        }
        return obj;
    },
    create(base) {
        return exports.DetailedMarkCategory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDetailedMarkCategory();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.percentage = object.percentage ?? 0;
        message.effectivePercentage = object.effectivePercentage ?? 0;
        return message;
    },
};
function createBasePersonalizedMarkCategory() {
    return {
        id: undefined,
        courseId: undefined,
        studentId: undefined,
        name: "",
        percentage: 0,
        effectivePercentageForStudent: 0,
    };
}
exports.PersonalizedMarkCategory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.percentage !== 0) {
            writer.uint32(40).uint32(message.percentage);
        }
        if (message.effectivePercentageForStudent !== 0) {
            writer.uint32(49).double(message.effectivePercentageForStudent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersonalizedMarkCategory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.percentage = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.effectivePercentageForStudent = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
            effectivePercentageForStudent: isSet(object.effectivePercentageForStudent)
                ? globalThis.Number(object.effectivePercentageForStudent)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.percentage !== 0) {
            obj.percentage = Math.round(message.percentage);
        }
        if (message.effectivePercentageForStudent !== 0) {
            obj.effectivePercentageForStudent = message.effectivePercentageForStudent;
        }
        return obj;
    },
    create(base) {
        return exports.PersonalizedMarkCategory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePersonalizedMarkCategory();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.name = object.name ?? "";
        message.percentage = object.percentage ?? 0;
        message.effectivePercentageForStudent = object.effectivePercentageForStudent ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
