"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/report_layout.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportCheckBoxLayout = exports.ReportLayoutSection = exports.ReportLayout = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
function createBaseReportLayout() {
    return {
        id: undefined,
        organizationId: undefined,
        courseId: undefined,
        commentCharLimit: 0,
        sections: [],
        checkBoxes: [],
        creditWeight: 0,
    };
}
exports.ReportLayout = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
        }
        if (message.commentCharLimit !== undefined && message.commentCharLimit !== 0) {
            writer.uint32(32).uint32(message.commentCharLimit);
        }
        for (const v of message.sections) {
            exports.ReportLayoutSection.encode(v, writer.uint32(42).fork()).join();
        }
        for (const v of message.checkBoxes) {
            exports.ReportCheckBoxLayout.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.creditWeight !== 0) {
            writer.uint32(61).float(message.creditWeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReportLayout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.commentCharLimit = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sections.push(exports.ReportLayoutSection.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.checkBoxes.push(exports.ReportCheckBoxLayout.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.creditWeight = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            commentCharLimit: isSet(object.commentCharLimit) ? globalThis.Number(object.commentCharLimit) : 0,
            sections: globalThis.Array.isArray(object?.sections)
                ? object.sections.map((e) => exports.ReportLayoutSection.fromJSON(e))
                : [],
            checkBoxes: globalThis.Array.isArray(object?.checkBoxes)
                ? object.checkBoxes.map((e) => exports.ReportCheckBoxLayout.fromJSON(e))
                : [],
            creditWeight: isSet(object.creditWeight) ? globalThis.Number(object.creditWeight) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.commentCharLimit !== undefined && message.commentCharLimit !== 0) {
            obj.commentCharLimit = Math.round(message.commentCharLimit);
        }
        if (message.sections?.length) {
            obj.sections = message.sections.map((e) => exports.ReportLayoutSection.toJSON(e));
        }
        if (message.checkBoxes?.length) {
            obj.checkBoxes = message.checkBoxes.map((e) => exports.ReportCheckBoxLayout.toJSON(e));
        }
        if (message.creditWeight !== 0) {
            obj.creditWeight = message.creditWeight;
        }
        return obj;
    },
    create(base) {
        return exports.ReportLayout.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReportLayout();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.commentCharLimit = object.commentCharLimit ?? 0;
        message.sections = object.sections?.map((e) => exports.ReportLayoutSection.fromPartial(e)) || [];
        message.checkBoxes = object.checkBoxes?.map((e) => exports.ReportCheckBoxLayout.fromPartial(e)) || [];
        message.creditWeight = object.creditWeight ?? 0;
        return message;
    },
};
function createBaseReportLayoutSection() {
    return { id: undefined, name: "" };
}
exports.ReportLayoutSection = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReportLayoutSection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.ReportLayoutSection.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReportLayoutSection();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        return message;
    },
};
function createBaseReportCheckBoxLayout() {
    return { id: undefined, name: "" };
}
exports.ReportCheckBoxLayout = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReportCheckBoxLayout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.ReportCheckBoxLayout.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReportCheckBoxLayout();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
