"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/course.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Course = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const homeroom_1 = require("./homeroom");
const report_layout_1 = require("./report_layout");
const semester_1 = require("./semester");
exports.protobufPackage = "class_service";
function createBaseCourse() {
    return {
        id: undefined,
        archived: false,
        semester: undefined,
        homeroom: undefined,
        name: "",
        courseCode: "",
        teacherIds: [],
        studentIds: [],
        gclassId: "",
        reportLayout: undefined,
    };
}
exports.Course = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.archived !== false) {
            writer.uint32(16).bool(message.archived);
        }
        if (message.semester !== undefined) {
            semester_1.Semester.encode(message.semester, writer.uint32(26).fork()).join();
        }
        if (message.homeroom !== undefined) {
            homeroom_1.Homeroom.encode(message.homeroom, writer.uint32(34).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(42).string(message.name);
        }
        if (message.courseCode !== "") {
            writer.uint32(50).string(message.courseCode);
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.gclassId !== undefined && message.gclassId !== "") {
            writer.uint32(74).string(message.gclassId);
        }
        if (message.reportLayout !== undefined) {
            report_layout_1.ReportLayout.encode(message.reportLayout, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.semester = semester_1.Semester.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.homeroom = homeroom_1.Homeroom.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.gclassId = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.reportLayout = report_layout_1.ReportLayout.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
            semester: isSet(object.semester) ? semester_1.Semester.fromJSON(object.semester) : undefined,
            homeroom: isSet(object.homeroom) ? homeroom_1.Homeroom.fromJSON(object.homeroom) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            gclassId: isSet(object.gclassId) ? globalThis.String(object.gclassId) : "",
            reportLayout: isSet(object.reportLayout) ? report_layout_1.ReportLayout.fromJSON(object.reportLayout) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        if (message.semester !== undefined) {
            obj.semester = semester_1.Semester.toJSON(message.semester);
        }
        if (message.homeroom !== undefined) {
            obj.homeroom = homeroom_1.Homeroom.toJSON(message.homeroom);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.gclassId !== undefined && message.gclassId !== "") {
            obj.gclassId = message.gclassId;
        }
        if (message.reportLayout !== undefined) {
            obj.reportLayout = report_layout_1.ReportLayout.toJSON(message.reportLayout);
        }
        return obj;
    },
    create(base) {
        return exports.Course.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourse();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.archived = object.archived ?? false;
        message.semester = (object.semester !== undefined && object.semester !== null)
            ? semester_1.Semester.fromPartial(object.semester)
            : undefined;
        message.homeroom = (object.homeroom !== undefined && object.homeroom !== null)
            ? homeroom_1.Homeroom.fromPartial(object.homeroom)
            : undefined;
        message.name = object.name ?? "";
        message.courseCode = object.courseCode ?? "";
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.gclassId = object.gclassId ?? "";
        message.reportLayout = (object.reportLayout !== undefined && object.reportLayout !== null)
            ? report_layout_1.ReportLayout.fromPartial(object.reportLayout)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
