"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/homeroom_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStudentGClassCourseWorkResponse = exports.GetStudentGClassCourseWorkRequest = exports.GetGClassCourseWorkResponse = exports.GetGClassCourseWorkRequest = exports.GetAllAttendanceClassesResponse = exports.GetAllAttendanceClassesRequest = exports.GetAttendanceClassesResponse = exports.GetAttendanceClassesRequest = exports.AddAttendanceTeachersRequest = exports.RemoveStudentsRequest = exports.AddStudentsRequest = exports.RemoveTeachersRequest = exports.AddTeachersRequest = exports.UpdateHomeroomRequest = exports.ArchiveHomeroomRequest = exports.GetStudentHomeroomsResponse = exports.GetStudentHomeroomsRequest = exports.GetHomeroomCoursesResponse = exports.GetHomeroomCoursesRequest = exports.CloneHomeroomRequest = exports.CreateHomeroomRequest = exports.AggregateHomeroomResponse = exports.AggregateHomeroomRequest = exports.GetHomeroomRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const course_1 = require("./course");
const gclass_1 = require("./gclass");
const homeroom_1 = require("./homeroom");
exports.protobufPackage = "class_service.homeroom_service";
function createBaseGetHomeroomRequest() {
    return { context: undefined, homeroomId: undefined };
}
exports.GetHomeroomRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        return message;
    },
};
function createBaseAggregateHomeroomRequest() {
    return { context: undefined, aggregationDocument: "" };
}
exports.AggregateHomeroomRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.aggregationDocument !== "") {
            writer.uint32(18).string(message.aggregationDocument);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregateHomeroomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.aggregationDocument = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            aggregationDocument: isSet(object.aggregationDocument) ? globalThis.String(object.aggregationDocument) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.aggregationDocument !== "") {
            obj.aggregationDocument = message.aggregationDocument;
        }
        return obj;
    },
    create(base) {
        return exports.AggregateHomeroomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregateHomeroomRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.aggregationDocument = object.aggregationDocument ?? "";
        return message;
    },
};
function createBaseAggregateHomeroomResponse() {
    return { result: "" };
}
exports.AggregateHomeroomResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregateHomeroomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.AggregateHomeroomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregateHomeroomResponse();
        message.result = object.result ?? "";
        return message;
    },
};
function createBaseCreateHomeroomRequest() {
    return { context: undefined, name: "", semesterId: undefined, teacherIds: [], grade: "" };
}
exports.CreateHomeroomRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(26).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.grade !== "") {
            writer.uint32(42).string(message.grade);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateHomeroomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        return obj;
    },
    create(base) {
        return exports.CreateHomeroomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateHomeroomRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.name = object.name ?? "";
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.grade = object.grade ?? "";
        return message;
    },
};
function createBaseCloneHomeroomRequest() {
    return {
        context: undefined,
        homeroomToCloneId: undefined,
        name: "",
        semesterId: undefined,
        teacherIds: [],
        grade: "",
    };
}
exports.CloneHomeroomRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomToCloneId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomToCloneId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.grade !== "") {
            writer.uint32(50).string(message.grade);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloneHomeroomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomToCloneId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomToCloneId: isSet(object.homeroomToCloneId) ? object_id_1.ObjectId.fromJSON(object.homeroomToCloneId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomToCloneId !== undefined) {
            obj.homeroomToCloneId = object_id_1.ObjectId.toJSON(message.homeroomToCloneId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        return obj;
    },
    create(base) {
        return exports.CloneHomeroomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCloneHomeroomRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomToCloneId = (object.homeroomToCloneId !== undefined && object.homeroomToCloneId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomToCloneId)
            : undefined;
        message.name = object.name ?? "";
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.grade = object.grade ?? "";
        return message;
    },
};
function createBaseGetHomeroomCoursesRequest() {
    return { context: undefined, homeroomId: undefined };
}
exports.GetHomeroomCoursesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomCoursesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomCoursesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomCoursesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        return message;
    },
};
function createBaseGetHomeroomCoursesResponse() {
    return { courses: [] };
}
exports.GetHomeroomCoursesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.courses) {
            course_1.Course.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomCoursesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courses.push(course_1.Course.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e) => course_1.Course.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courses?.length) {
            obj.courses = message.courses.map((e) => course_1.Course.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomCoursesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomCoursesResponse();
        message.courses = object.courses?.map((e) => course_1.Course.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetStudentHomeroomsRequest() {
    return { context: undefined, studentId: undefined, includeArchived: false };
}
exports.GetStudentHomeroomsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.includeArchived !== undefined && message.includeArchived !== false) {
            writer.uint32(24).bool(message.includeArchived);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentHomeroomsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.includeArchived = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            includeArchived: isSet(object.includeArchived) ? globalThis.Boolean(object.includeArchived) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.includeArchived !== undefined && message.includeArchived !== false) {
            obj.includeArchived = message.includeArchived;
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentHomeroomsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentHomeroomsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.includeArchived = object.includeArchived ?? false;
        return message;
    },
};
function createBaseGetStudentHomeroomsResponse() {
    return { homerooms: [] };
}
exports.GetStudentHomeroomsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.homerooms) {
            homeroom_1.Homeroom.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentHomeroomsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homerooms.push(homeroom_1.Homeroom.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homerooms: globalThis.Array.isArray(object?.homerooms)
                ? object.homerooms.map((e) => homeroom_1.Homeroom.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homerooms?.length) {
            obj.homerooms = message.homerooms.map((e) => homeroom_1.Homeroom.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentHomeroomsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentHomeroomsResponse();
        message.homerooms = object.homerooms?.map((e) => homeroom_1.Homeroom.fromPartial(e)) || [];
        return message;
    },
};
function createBaseArchiveHomeroomRequest() {
    return { context: undefined, homeroomId: undefined };
}
exports.ArchiveHomeroomRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArchiveHomeroomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        return obj;
    },
    create(base) {
        return exports.ArchiveHomeroomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArchiveHomeroomRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        return message;
    },
};
function createBaseUpdateHomeroomRequest() {
    return { context: undefined, homeroomId: undefined, semesterId: undefined, name: "", grade: "" };
}
exports.UpdateHomeroomRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.grade !== "") {
            writer.uint32(42).string(message.grade);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateHomeroomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateHomeroomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateHomeroomRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.name = object.name ?? "";
        message.grade = object.grade ?? "";
        return message;
    },
};
function createBaseAddTeachersRequest() {
    return { context: undefined, homeroomId: undefined, teacherIds: [] };
}
exports.AddTeachersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddTeachersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AddTeachersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddTeachersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveTeachersRequest() {
    return { context: undefined, homeroomId: undefined, teacherIds: [] };
}
exports.RemoveTeachersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveTeachersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RemoveTeachersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveTeachersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddStudentsRequest() {
    return { context: undefined, homeroomId: undefined, studentIds: [] };
}
exports.AddStudentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddStudentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AddStudentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddStudentsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveStudentsRequest() {
    return { context: undefined, homeroomId: undefined, studentIds: [] };
}
exports.RemoveStudentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveStudentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RemoveStudentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveStudentsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddAttendanceTeachersRequest() {
    return { context: undefined, homeroomId: undefined, teacherIds: [] };
}
exports.AddAttendanceTeachersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAttendanceTeachersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AddAttendanceTeachersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddAttendanceTeachersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetAttendanceClassesRequest() {
    return { context: undefined, teacherId: undefined };
}
exports.GetAttendanceClassesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.teacherId !== undefined) {
            object_id_1.ObjectId.encode(message.teacherId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAttendanceClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.teacherId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            teacherId: isSet(object.teacherId) ? object_id_1.ObjectId.fromJSON(object.teacherId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.teacherId !== undefined) {
            obj.teacherId = object_id_1.ObjectId.toJSON(message.teacherId);
        }
        return obj;
    },
    create(base) {
        return exports.GetAttendanceClassesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAttendanceClassesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.teacherId = (object.teacherId !== undefined && object.teacherId !== null)
            ? object_id_1.ObjectId.fromPartial(object.teacherId)
            : undefined;
        return message;
    },
};
function createBaseGetAttendanceClassesResponse() {
    return { homerooms: [] };
}
exports.GetAttendanceClassesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.homerooms) {
            homeroom_1.Homeroom.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAttendanceClassesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homerooms.push(homeroom_1.Homeroom.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homerooms: globalThis.Array.isArray(object?.homerooms)
                ? object.homerooms.map((e) => homeroom_1.Homeroom.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homerooms?.length) {
            obj.homerooms = message.homerooms.map((e) => homeroom_1.Homeroom.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetAttendanceClassesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAttendanceClassesResponse();
        message.homerooms = object.homerooms?.map((e) => homeroom_1.Homeroom.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetAllAttendanceClassesRequest() {
    return { context: undefined };
}
exports.GetAllAttendanceClassesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllAttendanceClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetAllAttendanceClassesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllAttendanceClassesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetAllAttendanceClassesResponse() {
    return { homerooms: [] };
}
exports.GetAllAttendanceClassesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.homerooms) {
            homeroom_1.Homeroom.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllAttendanceClassesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homerooms.push(homeroom_1.Homeroom.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homerooms: globalThis.Array.isArray(object?.homerooms)
                ? object.homerooms.map((e) => homeroom_1.Homeroom.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homerooms?.length) {
            obj.homerooms = message.homerooms.map((e) => homeroom_1.Homeroom.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetAllAttendanceClassesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllAttendanceClassesResponse();
        message.homerooms = object.homerooms?.map((e) => homeroom_1.Homeroom.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetGClassCourseWorkRequest() {
    return { context: undefined, homeroomId: undefined };
}
exports.GetGClassCourseWorkRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGClassCourseWorkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        return obj;
    },
    create(base) {
        return exports.GetGClassCourseWorkRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetGClassCourseWorkRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        return message;
    },
};
function createBaseGetGClassCourseWorkResponse() {
    return { courseWork: [] };
}
exports.GetGClassCourseWorkResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.courseWork) {
            gclass_1.GClassCourseWork.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGClassCourseWorkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courseWork.push(gclass_1.GClassCourseWork.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courseWork: globalThis.Array.isArray(object?.courseWork)
                ? object.courseWork.map((e) => gclass_1.GClassCourseWork.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseWork?.length) {
            obj.courseWork = message.courseWork.map((e) => gclass_1.GClassCourseWork.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetGClassCourseWorkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetGClassCourseWorkResponse();
        message.courseWork = object.courseWork?.map((e) => gclass_1.GClassCourseWork.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetStudentGClassCourseWorkRequest() {
    return { context: undefined, homeroomId: undefined, studentId: undefined };
}
exports.GetStudentGClassCourseWorkRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentGClassCourseWorkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentGClassCourseWorkRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentGClassCourseWorkRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        return message;
    },
};
function createBaseGetStudentGClassCourseWorkResponse() {
    return { submissions: [] };
}
exports.GetStudentGClassCourseWorkResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.submissions) {
            gclass_1.GClassStudentSubmission.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentGClassCourseWorkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.submissions.push(gclass_1.GClassStudentSubmission.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            submissions: globalThis.Array.isArray(object?.submissions)
                ? object.submissions.map((e) => gclass_1.GClassStudentSubmission.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.submissions?.length) {
            obj.submissions = message.submissions.map((e) => gclass_1.GClassStudentSubmission.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentGClassCourseWorkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentGClassCourseWorkResponse();
        message.submissions = object.submissions?.map((e) => gclass_1.GClassStudentSubmission.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
