"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/lms_course.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.LmsHistory = exports.LmsSubmission = exports.Attachment = exports.LmsCourseWork = exports.LmsCourse = exports.LmsSubmissionState = exports.LmsWorkType = exports.LmsProviderType = exports.protobufPackage = void 0;
exports.lmsProviderTypeFromJSON = lmsProviderTypeFromJSON;
exports.lmsProviderTypeToJSON = lmsProviderTypeToJSON;
exports.lmsProviderTypeToNumber = lmsProviderTypeToNumber;
exports.lmsWorkTypeFromJSON = lmsWorkTypeFromJSON;
exports.lmsWorkTypeToJSON = lmsWorkTypeToJSON;
exports.lmsWorkTypeToNumber = lmsWorkTypeToNumber;
exports.lmsSubmissionStateFromJSON = lmsSubmissionStateFromJSON;
exports.lmsSubmissionStateToJSON = lmsSubmissionStateToJSON;
exports.lmsSubmissionStateToNumber = lmsSubmissionStateToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
var LmsProviderType;
(function (LmsProviderType) {
    LmsProviderType["GOOGLE_CLASSROOM"] = "GOOGLE_CLASSROOM";
    LmsProviderType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LmsProviderType || (exports.LmsProviderType = LmsProviderType = {}));
function lmsProviderTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "GOOGLE_CLASSROOM":
            return LmsProviderType.GOOGLE_CLASSROOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LmsProviderType.UNRECOGNIZED;
    }
}
function lmsProviderTypeToJSON(object) {
    switch (object) {
        case LmsProviderType.GOOGLE_CLASSROOM:
            return "GOOGLE_CLASSROOM";
        case LmsProviderType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function lmsProviderTypeToNumber(object) {
    switch (object) {
        case LmsProviderType.GOOGLE_CLASSROOM:
            return 1;
        case LmsProviderType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var LmsWorkType;
(function (LmsWorkType) {
    LmsWorkType["ASSIGNMENT"] = "ASSIGNMENT";
    LmsWorkType["MULTIPLE_CHOICE"] = "MULTIPLE_CHOICE";
    LmsWorkType["SHORT_ANSWER"] = "SHORT_ANSWER";
    LmsWorkType["QUIZ"] = "QUIZ";
    LmsWorkType["DISCUSSION"] = "DISCUSSION";
    LmsWorkType["EXTERNAL_TOOL"] = "EXTERNAL_TOOL";
    LmsWorkType["OTHER"] = "OTHER";
    LmsWorkType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LmsWorkType || (exports.LmsWorkType = LmsWorkType = {}));
function lmsWorkTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ASSIGNMENT":
            return LmsWorkType.ASSIGNMENT;
        case 1:
        case "MULTIPLE_CHOICE":
            return LmsWorkType.MULTIPLE_CHOICE;
        case 2:
        case "SHORT_ANSWER":
            return LmsWorkType.SHORT_ANSWER;
        case 3:
        case "QUIZ":
            return LmsWorkType.QUIZ;
        case 4:
        case "DISCUSSION":
            return LmsWorkType.DISCUSSION;
        case 5:
        case "EXTERNAL_TOOL":
            return LmsWorkType.EXTERNAL_TOOL;
        case 6:
        case "OTHER":
            return LmsWorkType.OTHER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LmsWorkType.UNRECOGNIZED;
    }
}
function lmsWorkTypeToJSON(object) {
    switch (object) {
        case LmsWorkType.ASSIGNMENT:
            return "ASSIGNMENT";
        case LmsWorkType.MULTIPLE_CHOICE:
            return "MULTIPLE_CHOICE";
        case LmsWorkType.SHORT_ANSWER:
            return "SHORT_ANSWER";
        case LmsWorkType.QUIZ:
            return "QUIZ";
        case LmsWorkType.DISCUSSION:
            return "DISCUSSION";
        case LmsWorkType.EXTERNAL_TOOL:
            return "EXTERNAL_TOOL";
        case LmsWorkType.OTHER:
            return "OTHER";
        case LmsWorkType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function lmsWorkTypeToNumber(object) {
    switch (object) {
        case LmsWorkType.ASSIGNMENT:
            return 0;
        case LmsWorkType.MULTIPLE_CHOICE:
            return 1;
        case LmsWorkType.SHORT_ANSWER:
            return 2;
        case LmsWorkType.QUIZ:
            return 3;
        case LmsWorkType.DISCUSSION:
            return 4;
        case LmsWorkType.EXTERNAL_TOOL:
            return 5;
        case LmsWorkType.OTHER:
            return 6;
        case LmsWorkType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var LmsSubmissionState;
(function (LmsSubmissionState) {
    /**
     * UNSUBMITTED - Submission has never been turned in.
     * Google Classroom: NEW / CREATED
     * Canvas: unsubmitted / missing / late / excused / pending
     */
    LmsSubmissionState["UNSUBMITTED"] = "UNSUBMITTED";
    /**
     * SUBMITTED - Student has actively submitted the assignment.
     * Google Classroom: TURNED_IN / RECLAIMED_BY_STUDENT
     * Canvas: submitted
     */
    LmsSubmissionState["SUBMITTED"] = "SUBMITTED";
    /**
     * GRADED - Assignment has been graded / returned by teacher.
     * Google Classroom: RETURNED
     * Canvas: graded
     */
    LmsSubmissionState["GRADED"] = "GRADED";
    /**
     * UNSPECIFIED - Unknown / unspecified state.
     * Google Classroom: SUBMISSION_STATE_UNSPECIFIED
     * Canvas: not applicable
     */
    LmsSubmissionState["UNSPECIFIED"] = "UNSPECIFIED";
    LmsSubmissionState["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LmsSubmissionState || (exports.LmsSubmissionState = LmsSubmissionState = {}));
function lmsSubmissionStateFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSUBMITTED":
            return LmsSubmissionState.UNSUBMITTED;
        case 1:
        case "SUBMITTED":
            return LmsSubmissionState.SUBMITTED;
        case 2:
        case "GRADED":
            return LmsSubmissionState.GRADED;
        case 7:
        case "UNSPECIFIED":
            return LmsSubmissionState.UNSPECIFIED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LmsSubmissionState.UNRECOGNIZED;
    }
}
function lmsSubmissionStateToJSON(object) {
    switch (object) {
        case LmsSubmissionState.UNSUBMITTED:
            return "UNSUBMITTED";
        case LmsSubmissionState.SUBMITTED:
            return "SUBMITTED";
        case LmsSubmissionState.GRADED:
            return "GRADED";
        case LmsSubmissionState.UNSPECIFIED:
            return "UNSPECIFIED";
        case LmsSubmissionState.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function lmsSubmissionStateToNumber(object) {
    switch (object) {
        case LmsSubmissionState.UNSUBMITTED:
            return 0;
        case LmsSubmissionState.SUBMITTED:
            return 1;
        case LmsSubmissionState.GRADED:
            return 2;
        case LmsSubmissionState.UNSPECIFIED:
            return 7;
        case LmsSubmissionState.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseLmsCourse() {
    return { id: "", name: "", section: "", url: "", provider: LmsProviderType.GOOGLE_CLASSROOM };
}
exports.LmsCourse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.section !== "") {
            writer.uint32(26).string(message.section);
        }
        if (message.url !== "") {
            writer.uint32(34).string(message.url);
        }
        if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
            writer.uint32(40).int32(lmsProviderTypeToNumber(message.provider));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLmsCourse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.section = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.provider = lmsProviderTypeFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            section: isSet(object.section) ? globalThis.String(object.section) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            provider: isSet(object.provider) ? lmsProviderTypeFromJSON(object.provider) : LmsProviderType.GOOGLE_CLASSROOM,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.section !== "") {
            obj.section = message.section;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
            obj.provider = lmsProviderTypeToJSON(message.provider);
        }
        return obj;
    },
    create(base) {
        return exports.LmsCourse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLmsCourse();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.section = object.section ?? "";
        message.url = object.url ?? "";
        message.provider = object.provider ?? LmsProviderType.GOOGLE_CLASSROOM;
        return message;
    },
};
function createBaseLmsCourseWork() {
    return {
        lmsCourseWorkId: "",
        lmsCourseId: "",
        title: "",
        description: "",
        link: "",
        attachments: [],
        creationTime: undefined,
        dueDate: undefined,
        maxPoints: 0,
        workType: LmsWorkType.ASSIGNMENT,
        provider: LmsProviderType.GOOGLE_CLASSROOM,
        rawJson: "",
    };
}
exports.LmsCourseWork = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lmsCourseWorkId !== "") {
            writer.uint32(10).string(message.lmsCourseWorkId);
        }
        if (message.lmsCourseId !== "") {
            writer.uint32(18).string(message.lmsCourseId);
        }
        if (message.title !== undefined && message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.description !== undefined && message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.link !== undefined && message.link !== "") {
            writer.uint32(42).string(message.link);
        }
        for (const v of message.attachments) {
            exports.Attachment.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.creationTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(58).fork()).join();
        }
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(66).fork()).join();
        }
        if (message.maxPoints !== undefined && message.maxPoints !== 0) {
            writer.uint32(73).double(message.maxPoints);
        }
        if (message.workType !== undefined && message.workType !== LmsWorkType.ASSIGNMENT) {
            writer.uint32(80).int32(lmsWorkTypeToNumber(message.workType));
        }
        if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
            writer.uint32(88).int32(lmsProviderTypeToNumber(message.provider));
        }
        if (message.rawJson !== undefined && message.rawJson !== "") {
            writer.uint32(98).string(message.rawJson);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLmsCourseWork();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.lmsCourseWorkId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.lmsCourseId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.link = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.attachments.push(exports.Attachment.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.creationTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.maxPoints = reader.double();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.workType = lmsWorkTypeFromJSON(reader.int32());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.provider = lmsProviderTypeFromJSON(reader.int32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.rawJson = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lmsCourseWorkId: isSet(object.lmsCourseWorkId) ? globalThis.String(object.lmsCourseWorkId) : "",
            lmsCourseId: isSet(object.lmsCourseId) ? globalThis.String(object.lmsCourseId) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            link: isSet(object.link) ? globalThis.String(object.link) : "",
            attachments: globalThis.Array.isArray(object?.attachments)
                ? object.attachments.map((e) => exports.Attachment.fromJSON(e))
                : [],
            creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
            dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
            maxPoints: isSet(object.maxPoints) ? globalThis.Number(object.maxPoints) : 0,
            workType: isSet(object.workType) ? lmsWorkTypeFromJSON(object.workType) : LmsWorkType.ASSIGNMENT,
            provider: isSet(object.provider) ? lmsProviderTypeFromJSON(object.provider) : LmsProviderType.GOOGLE_CLASSROOM,
            rawJson: isSet(object.rawJson) ? globalThis.String(object.rawJson) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lmsCourseWorkId !== "") {
            obj.lmsCourseWorkId = message.lmsCourseWorkId;
        }
        if (message.lmsCourseId !== "") {
            obj.lmsCourseId = message.lmsCourseId;
        }
        if (message.title !== undefined && message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== undefined && message.description !== "") {
            obj.description = message.description;
        }
        if (message.link !== undefined && message.link !== "") {
            obj.link = message.link;
        }
        if (message.attachments?.length) {
            obj.attachments = message.attachments.map((e) => exports.Attachment.toJSON(e));
        }
        if (message.creationTime !== undefined) {
            obj.creationTime = message.creationTime.toISOString();
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        if (message.maxPoints !== undefined && message.maxPoints !== 0) {
            obj.maxPoints = message.maxPoints;
        }
        if (message.workType !== undefined && message.workType !== LmsWorkType.ASSIGNMENT) {
            obj.workType = lmsWorkTypeToJSON(message.workType);
        }
        if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
            obj.provider = lmsProviderTypeToJSON(message.provider);
        }
        if (message.rawJson !== undefined && message.rawJson !== "") {
            obj.rawJson = message.rawJson;
        }
        return obj;
    },
    create(base) {
        return exports.LmsCourseWork.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLmsCourseWork();
        message.lmsCourseWorkId = object.lmsCourseWorkId ?? "";
        message.lmsCourseId = object.lmsCourseId ?? "";
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.link = object.link ?? "";
        message.attachments = object.attachments?.map((e) => exports.Attachment.fromPartial(e)) || [];
        message.creationTime = object.creationTime ?? undefined;
        message.dueDate = object.dueDate ?? undefined;
        message.maxPoints = object.maxPoints ?? 0;
        message.workType = object.workType ?? LmsWorkType.ASSIGNMENT;
        message.provider = object.provider ?? LmsProviderType.GOOGLE_CLASSROOM;
        message.rawJson = object.rawJson ?? "";
        return message;
    },
};
function createBaseAttachment() {
    return { url: "" };
}
exports.Attachment = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttachment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.Attachment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttachment();
        message.url = object.url ?? "";
        return message;
    },
};
function createBaseLmsSubmission() {
    return {
        lmsSubmissionId: "",
        lmsCourseWorkId: "",
        lmsCourseId: "",
        studentId: undefined,
        submissionUrl: "",
        state: LmsSubmissionState.UNSUBMITTED,
        submittedAt: undefined,
        late: false,
        grade: 0,
        history: [],
        provider: LmsProviderType.GOOGLE_CLASSROOM,
        rawJson: "",
    };
}
exports.LmsSubmission = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lmsSubmissionId !== "") {
            writer.uint32(10).string(message.lmsSubmissionId);
        }
        if (message.lmsCourseWorkId !== "") {
            writer.uint32(18).string(message.lmsCourseWorkId);
        }
        if (message.lmsCourseId !== "") {
            writer.uint32(26).string(message.lmsCourseId);
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(34).fork()).join();
        }
        if (message.submissionUrl !== "") {
            writer.uint32(42).string(message.submissionUrl);
        }
        if (message.state !== LmsSubmissionState.UNSUBMITTED) {
            writer.uint32(48).int32(lmsSubmissionStateToNumber(message.state));
        }
        if (message.submittedAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.submittedAt), writer.uint32(58).fork()).join();
        }
        if (message.late !== undefined && message.late !== false) {
            writer.uint32(64).bool(message.late);
        }
        if (message.grade !== undefined && message.grade !== 0) {
            writer.uint32(73).double(message.grade);
        }
        for (const v of message.history) {
            exports.LmsHistory.encode(v, writer.uint32(82).fork()).join();
        }
        if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
            writer.uint32(88).int32(lmsProviderTypeToNumber(message.provider));
        }
        if (message.rawJson !== undefined && message.rawJson !== "") {
            writer.uint32(98).string(message.rawJson);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLmsSubmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.lmsSubmissionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.lmsCourseWorkId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.lmsCourseId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.submissionUrl = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.state = lmsSubmissionStateFromJSON(reader.int32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.submittedAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.late = reader.bool();
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.grade = reader.double();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.history.push(exports.LmsHistory.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.provider = lmsProviderTypeFromJSON(reader.int32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.rawJson = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lmsSubmissionId: isSet(object.lmsSubmissionId) ? globalThis.String(object.lmsSubmissionId) : "",
            lmsCourseWorkId: isSet(object.lmsCourseWorkId) ? globalThis.String(object.lmsCourseWorkId) : "",
            lmsCourseId: isSet(object.lmsCourseId) ? globalThis.String(object.lmsCourseId) : "",
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            submissionUrl: isSet(object.submissionUrl) ? globalThis.String(object.submissionUrl) : "",
            state: isSet(object.state) ? lmsSubmissionStateFromJSON(object.state) : LmsSubmissionState.UNSUBMITTED,
            submittedAt: isSet(object.submittedAt) ? fromJsonTimestamp(object.submittedAt) : undefined,
            late: isSet(object.late) ? globalThis.Boolean(object.late) : false,
            grade: isSet(object.grade) ? globalThis.Number(object.grade) : 0,
            history: globalThis.Array.isArray(object?.history) ? object.history.map((e) => exports.LmsHistory.fromJSON(e)) : [],
            provider: isSet(object.provider) ? lmsProviderTypeFromJSON(object.provider) : LmsProviderType.GOOGLE_CLASSROOM,
            rawJson: isSet(object.rawJson) ? globalThis.String(object.rawJson) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lmsSubmissionId !== "") {
            obj.lmsSubmissionId = message.lmsSubmissionId;
        }
        if (message.lmsCourseWorkId !== "") {
            obj.lmsCourseWorkId = message.lmsCourseWorkId;
        }
        if (message.lmsCourseId !== "") {
            obj.lmsCourseId = message.lmsCourseId;
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.submissionUrl !== "") {
            obj.submissionUrl = message.submissionUrl;
        }
        if (message.state !== LmsSubmissionState.UNSUBMITTED) {
            obj.state = lmsSubmissionStateToJSON(message.state);
        }
        if (message.submittedAt !== undefined) {
            obj.submittedAt = message.submittedAt.toISOString();
        }
        if (message.late !== undefined && message.late !== false) {
            obj.late = message.late;
        }
        if (message.grade !== undefined && message.grade !== 0) {
            obj.grade = message.grade;
        }
        if (message.history?.length) {
            obj.history = message.history.map((e) => exports.LmsHistory.toJSON(e));
        }
        if (message.provider !== LmsProviderType.GOOGLE_CLASSROOM) {
            obj.provider = lmsProviderTypeToJSON(message.provider);
        }
        if (message.rawJson !== undefined && message.rawJson !== "") {
            obj.rawJson = message.rawJson;
        }
        return obj;
    },
    create(base) {
        return exports.LmsSubmission.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLmsSubmission();
        message.lmsSubmissionId = object.lmsSubmissionId ?? "";
        message.lmsCourseWorkId = object.lmsCourseWorkId ?? "";
        message.lmsCourseId = object.lmsCourseId ?? "";
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.submissionUrl = object.submissionUrl ?? "";
        message.state = object.state ?? LmsSubmissionState.UNSUBMITTED;
        message.submittedAt = object.submittedAt ?? undefined;
        message.late = object.late ?? false;
        message.grade = object.grade ?? 0;
        message.history = object.history?.map((e) => exports.LmsHistory.fromPartial(e)) || [];
        message.provider = object.provider ?? LmsProviderType.GOOGLE_CLASSROOM;
        message.rawJson = object.rawJson ?? "";
        return message;
    },
};
function createBaseLmsHistory() {
    return { actorId: "", type: "", oldValue: "", newValue: "", timestamp: undefined, rawEntry: "" };
}
exports.LmsHistory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actorId !== "") {
            writer.uint32(10).string(message.actorId);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        if (message.oldValue !== undefined && message.oldValue !== "") {
            writer.uint32(26).string(message.oldValue);
        }
        if (message.newValue !== undefined && message.newValue !== "") {
            writer.uint32(34).string(message.newValue);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).join();
        }
        if (message.rawEntry !== undefined && message.rawEntry !== "") {
            writer.uint32(50).string(message.rawEntry);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLmsHistory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actorId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.oldValue = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.newValue = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.rawEntry = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            oldValue: isSet(object.oldValue) ? globalThis.String(object.oldValue) : "",
            newValue: isSet(object.newValue) ? globalThis.String(object.newValue) : "",
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            rawEntry: isSet(object.rawEntry) ? globalThis.String(object.rawEntry) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorId !== "") {
            obj.actorId = message.actorId;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.oldValue !== undefined && message.oldValue !== "") {
            obj.oldValue = message.oldValue;
        }
        if (message.newValue !== undefined && message.newValue !== "") {
            obj.newValue = message.newValue;
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        if (message.rawEntry !== undefined && message.rawEntry !== "") {
            obj.rawEntry = message.rawEntry;
        }
        return obj;
    },
    create(base) {
        return exports.LmsHistory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLmsHistory();
        message.actorId = object.actorId ?? "";
        message.type = object.type ?? "";
        message.oldValue = object.oldValue ?? "";
        message.newValue = object.newValue ?? "";
        message.timestamp = object.timestamp ?? undefined;
        message.rawEntry = object.rawEntry ?? "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
