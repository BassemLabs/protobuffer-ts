"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/evaluation_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportMarkbookExcelResponse = exports.ExportMarkbookExcelRequest = exports.StudentCourseMarkOverview = exports.GetStudentCoursesMarkOverviewResponse = exports.GetStudentCoursesMarkOverviewRequest = exports.StudentCoursePerformance = exports.GetStudentCoursePerformanceRequest = exports.GetStudentsCoursePerformanceResponse = exports.GetStudentsCoursePerformanceRequest = exports.GetCourseDetailedMarkCategoriesAndEvaluationsRequest = exports.DetailedMarkCategoriesAndEvaluationsResponse = exports.GetCourseMarkCategoriesRequest = exports.DeleteMarkCategoryRequest = exports.UpdateMarkCategoryRequest = exports.CreateMarkCategoryRequest = exports.UpdateEvaluationMarksRequest = exports.StudentMarkUpdate = exports.GetStudentCourseEvaluationEntriesRequest = exports.GetEvaluationEntriesResponse = exports.GetEvaluationEntriesRequest = exports.UnpublishEvaluationRequest = exports.PublishEvaluationRequest = exports.GetCourseEvaluationsResponse = exports.GetCourseDetailedEvaluationsResponse = exports.DeleteEvaluationRequest = exports.UpdateEvaluationRequest = exports.CreateEvaluationRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const evaluation_1 = require("./evaluation");
const evaluation_entry_1 = require("./evaluation_entry");
const mark_category_1 = require("./mark_category");
exports.protobufPackage = "class_service.evaluation_service";
function createBaseCreateEvaluationRequest() {
    return { context: undefined, courseId: undefined, name: "", total: 0, weight: 0, date: "", markCategory: undefined };
}
exports.CreateEvaluationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.total !== 0) {
            writer.uint32(32).uint32(message.total);
        }
        if (message.weight !== 0) {
            writer.uint32(40).uint32(message.weight);
        }
        if (message.date !== "") {
            writer.uint32(50).string(message.date);
        }
        if (message.markCategory !== undefined) {
            object_id_1.ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateEvaluationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.weight = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.markCategory = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            markCategory: isSet(object.markCategory) ? object_id_1.ObjectId.fromJSON(object.markCategory) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.weight !== 0) {
            obj.weight = Math.round(message.weight);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.markCategory !== undefined) {
            obj.markCategory = object_id_1.ObjectId.toJSON(message.markCategory);
        }
        return obj;
    },
    create(base) {
        return exports.CreateEvaluationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateEvaluationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.total = object.total ?? 0;
        message.weight = object.weight ?? 0;
        message.date = object.date ?? "";
        message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategory)
            : undefined;
        return message;
    },
};
function createBaseUpdateEvaluationRequest() {
    return {
        context: undefined,
        evaluationId: undefined,
        name: "",
        total: 0,
        weight: 0,
        date: "",
        markCategory: undefined,
    };
}
exports.UpdateEvaluationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.total !== 0) {
            writer.uint32(32).uint32(message.total);
        }
        if (message.weight !== 0) {
            writer.uint32(40).uint32(message.weight);
        }
        if (message.date !== "") {
            writer.uint32(50).string(message.date);
        }
        if (message.markCategory !== undefined) {
            object_id_1.ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEvaluationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.weight = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.markCategory = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            markCategory: isSet(object.markCategory) ? object_id_1.ObjectId.fromJSON(object.markCategory) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.weight !== 0) {
            obj.weight = Math.round(message.weight);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.markCategory !== undefined) {
            obj.markCategory = object_id_1.ObjectId.toJSON(message.markCategory);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEvaluationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEvaluationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        message.name = object.name ?? "";
        message.total = object.total ?? 0;
        message.weight = object.weight ?? 0;
        message.date = object.date ?? "";
        message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategory)
            : undefined;
        return message;
    },
};
function createBaseDeleteEvaluationRequest() {
    return { context: undefined, evaluationId: undefined };
}
exports.DeleteEvaluationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteEvaluationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteEvaluationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteEvaluationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        return message;
    },
};
function createBaseGetCourseDetailedEvaluationsResponse() {
    return { evaluations: [] };
}
exports.GetCourseDetailedEvaluationsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.evaluations) {
            evaluation_1.DetailedEvaluation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseDetailedEvaluationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.evaluations.push(evaluation_1.DetailedEvaluation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            evaluations: globalThis.Array.isArray(object?.evaluations)
                ? object.evaluations.map((e) => evaluation_1.DetailedEvaluation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.evaluations?.length) {
            obj.evaluations = message.evaluations.map((e) => evaluation_1.DetailedEvaluation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseDetailedEvaluationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseDetailedEvaluationsResponse();
        message.evaluations = object.evaluations?.map((e) => evaluation_1.DetailedEvaluation.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetCourseEvaluationsResponse() {
    return { evaluations: [] };
}
exports.GetCourseEvaluationsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.evaluations) {
            evaluation_1.Evaluation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseEvaluationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.evaluations.push(evaluation_1.Evaluation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            evaluations: globalThis.Array.isArray(object?.evaluations)
                ? object.evaluations.map((e) => evaluation_1.Evaluation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.evaluations?.length) {
            obj.evaluations = message.evaluations.map((e) => evaluation_1.Evaluation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseEvaluationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseEvaluationsResponse();
        message.evaluations = object.evaluations?.map((e) => evaluation_1.Evaluation.fromPartial(e)) || [];
        return message;
    },
};
function createBasePublishEvaluationRequest() {
    return { context: undefined, evaluationId: undefined };
}
exports.PublishEvaluationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishEvaluationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        return obj;
    },
    create(base) {
        return exports.PublishEvaluationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePublishEvaluationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        return message;
    },
};
function createBaseUnpublishEvaluationRequest() {
    return { context: undefined, evaluationId: undefined };
}
exports.UnpublishEvaluationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpublishEvaluationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        return obj;
    },
    create(base) {
        return exports.UnpublishEvaluationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnpublishEvaluationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        return message;
    },
};
function createBaseGetEvaluationEntriesRequest() {
    return { context: undefined, evaluationId: undefined };
}
exports.GetEvaluationEntriesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEvaluationEntriesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        return obj;
    },
    create(base) {
        return exports.GetEvaluationEntriesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetEvaluationEntriesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        return message;
    },
};
function createBaseGetEvaluationEntriesResponse() {
    return { entries: [] };
}
exports.GetEvaluationEntriesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.entries) {
            evaluation_entry_1.EvaluationEntry.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEvaluationEntriesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.entries.push(evaluation_entry_1.EvaluationEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entries: globalThis.Array.isArray(object?.entries)
                ? object.entries.map((e) => evaluation_entry_1.EvaluationEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.entries?.length) {
            obj.entries = message.entries.map((e) => evaluation_entry_1.EvaluationEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetEvaluationEntriesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetEvaluationEntriesResponse();
        message.entries = object.entries?.map((e) => evaluation_entry_1.EvaluationEntry.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetStudentCourseEvaluationEntriesRequest() {
    return { context: undefined, studentId: undefined, courseId: undefined };
}
exports.GetStudentCourseEvaluationEntriesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentCourseEvaluationEntriesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentCourseEvaluationEntriesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentCourseEvaluationEntriesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseStudentMarkUpdate() {
    return { studentId: undefined, mark: 0 };
}
exports.StudentMarkUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(10).fork()).join();
        }
        if (message.mark !== 0) {
            writer.uint32(17).double(message.mark);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentMarkUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.mark = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            mark: isSet(object.mark) ? globalThis.Number(object.mark) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.mark !== 0) {
            obj.mark = message.mark;
        }
        return obj;
    },
    create(base) {
        return exports.StudentMarkUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentMarkUpdate();
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.mark = object.mark ?? 0;
        return message;
    },
};
function createBaseUpdateEvaluationMarksRequest() {
    return { context: undefined, evaluationId: undefined, studentMarks: [] };
}
exports.UpdateEvaluationMarksRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        for (const v of message.studentMarks) {
            exports.StudentMarkUpdate.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEvaluationMarksRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentMarks.push(exports.StudentMarkUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
            studentMarks: globalThis.Array.isArray(object?.studentMarks)
                ? object.studentMarks.map((e) => exports.StudentMarkUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        if (message.studentMarks?.length) {
            obj.studentMarks = message.studentMarks.map((e) => exports.StudentMarkUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEvaluationMarksRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEvaluationMarksRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        message.studentMarks = object.studentMarks?.map((e) => exports.StudentMarkUpdate.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateMarkCategoryRequest() {
    return { context: undefined, courseId: undefined, name: "", percentage: 0 };
}
exports.CreateMarkCategoryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.percentage !== 0) {
            writer.uint32(32).uint32(message.percentage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateMarkCategoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.percentage = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.percentage !== 0) {
            obj.percentage = Math.round(message.percentage);
        }
        return obj;
    },
    create(base) {
        return exports.CreateMarkCategoryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateMarkCategoryRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.percentage = object.percentage ?? 0;
        return message;
    },
};
function createBaseUpdateMarkCategoryRequest() {
    return { context: undefined, markCategoryId: undefined, name: "", percentage: 0 };
}
exports.UpdateMarkCategoryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.markCategoryId !== undefined) {
            object_id_1.ObjectId.encode(message.markCategoryId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.percentage !== 0) {
            writer.uint32(32).uint32(message.percentage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMarkCategoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.markCategoryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.percentage = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            markCategoryId: isSet(object.markCategoryId) ? object_id_1.ObjectId.fromJSON(object.markCategoryId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.markCategoryId !== undefined) {
            obj.markCategoryId = object_id_1.ObjectId.toJSON(message.markCategoryId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.percentage !== 0) {
            obj.percentage = Math.round(message.percentage);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateMarkCategoryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMarkCategoryRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.markCategoryId = (object.markCategoryId !== undefined && object.markCategoryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategoryId)
            : undefined;
        message.name = object.name ?? "";
        message.percentage = object.percentage ?? 0;
        return message;
    },
};
function createBaseDeleteMarkCategoryRequest() {
    return { context: undefined, markCategoryId: undefined };
}
exports.DeleteMarkCategoryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.markCategoryId !== undefined) {
            object_id_1.ObjectId.encode(message.markCategoryId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteMarkCategoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.markCategoryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            markCategoryId: isSet(object.markCategoryId) ? object_id_1.ObjectId.fromJSON(object.markCategoryId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.markCategoryId !== undefined) {
            obj.markCategoryId = object_id_1.ObjectId.toJSON(message.markCategoryId);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteMarkCategoryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteMarkCategoryRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.markCategoryId = (object.markCategoryId !== undefined && object.markCategoryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategoryId)
            : undefined;
        return message;
    },
};
function createBaseGetCourseMarkCategoriesRequest() {
    return { context: undefined, courseId: undefined };
}
exports.GetCourseMarkCategoriesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseMarkCategoriesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseMarkCategoriesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseMarkCategoriesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseDetailedMarkCategoriesAndEvaluationsResponse() {
    return { markCategories: [], evaluations: [] };
}
exports.DetailedMarkCategoriesAndEvaluationsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.markCategories) {
            mark_category_1.DetailedMarkCategory.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.evaluations) {
            evaluation_1.DetailedEvaluation.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDetailedMarkCategoriesAndEvaluationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.markCategories.push(mark_category_1.DetailedMarkCategory.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluations.push(evaluation_1.DetailedEvaluation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            markCategories: globalThis.Array.isArray(object?.markCategories)
                ? object.markCategories.map((e) => mark_category_1.DetailedMarkCategory.fromJSON(e))
                : [],
            evaluations: globalThis.Array.isArray(object?.evaluations)
                ? object.evaluations.map((e) => evaluation_1.DetailedEvaluation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.markCategories?.length) {
            obj.markCategories = message.markCategories.map((e) => mark_category_1.DetailedMarkCategory.toJSON(e));
        }
        if (message.evaluations?.length) {
            obj.evaluations = message.evaluations.map((e) => evaluation_1.DetailedEvaluation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.DetailedMarkCategoriesAndEvaluationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDetailedMarkCategoriesAndEvaluationsResponse();
        message.markCategories = object.markCategories?.map((e) => mark_category_1.DetailedMarkCategory.fromPartial(e)) || [];
        message.evaluations = object.evaluations?.map((e) => evaluation_1.DetailedEvaluation.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetCourseDetailedMarkCategoriesAndEvaluationsRequest() {
    return { context: undefined, courseId: undefined };
}
exports.GetCourseDetailedMarkCategoriesAndEvaluationsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseDetailedMarkCategoriesAndEvaluationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseDetailedMarkCategoriesAndEvaluationsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseDetailedMarkCategoriesAndEvaluationsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseGetStudentsCoursePerformanceRequest() {
    return { context: undefined, courseId: undefined };
}
exports.GetStudentsCoursePerformanceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsCoursePerformanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsCoursePerformanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsCoursePerformanceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseGetStudentsCoursePerformanceResponse() {
    return { studentPerformanes: [] };
}
exports.GetStudentsCoursePerformanceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.studentPerformanes) {
            exports.StudentCoursePerformance.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsCoursePerformanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.studentPerformanes.push(exports.StudentCoursePerformance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            studentPerformanes: globalThis.Array.isArray(object?.studentPerformanes)
                ? object.studentPerformanes.map((e) => exports.StudentCoursePerformance.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.studentPerformanes?.length) {
            obj.studentPerformanes = message.studentPerformanes.map((e) => exports.StudentCoursePerformance.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsCoursePerformanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsCoursePerformanceResponse();
        message.studentPerformanes = object.studentPerformanes?.map((e) => exports.StudentCoursePerformance.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetStudentCoursePerformanceRequest() {
    return { context: undefined, studentId: undefined, courseId: undefined };
}
exports.GetStudentCoursePerformanceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentCoursePerformanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentCoursePerformanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentCoursePerformanceRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseStudentCoursePerformance() {
    return {
        student: undefined,
        finalMark: 0,
        maximumPotentialMark: 0,
        evaluations: [],
        markCategories: [],
        studentEvaluationEntries: [],
    };
}
exports.StudentCoursePerformance = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(10).fork()).join();
        }
        if (message.finalMark !== undefined && message.finalMark !== 0) {
            writer.uint32(17).double(message.finalMark);
        }
        if (message.maximumPotentialMark !== 0) {
            writer.uint32(25).double(message.maximumPotentialMark);
        }
        for (const v of message.evaluations) {
            evaluation_1.PersonalizedEvaluation.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.markCategories) {
            mark_category_1.PersonalizedMarkCategory.encode(v, writer.uint32(42).fork()).join();
        }
        for (const v of message.studentEvaluationEntries) {
            evaluation_entry_1.EvaluationEntry.encode(v, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentCoursePerformance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.finalMark = reader.double();
                    continue;
                case 3:
                    if (tag !== 25) {
                        break;
                    }
                    message.maximumPotentialMark = reader.double();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.evaluations.push(evaluation_1.PersonalizedEvaluation.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.markCategories.push(mark_category_1.PersonalizedMarkCategory.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.studentEvaluationEntries.push(evaluation_entry_1.EvaluationEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            finalMark: isSet(object.finalMark) ? globalThis.Number(object.finalMark) : 0,
            maximumPotentialMark: isSet(object.maximumPotentialMark) ? globalThis.Number(object.maximumPotentialMark) : 0,
            evaluations: globalThis.Array.isArray(object?.evaluations)
                ? object.evaluations.map((e) => evaluation_1.PersonalizedEvaluation.fromJSON(e))
                : [],
            markCategories: globalThis.Array.isArray(object?.markCategories)
                ? object.markCategories.map((e) => mark_category_1.PersonalizedMarkCategory.fromJSON(e))
                : [],
            studentEvaluationEntries: globalThis.Array.isArray(object?.studentEvaluationEntries)
                ? object.studentEvaluationEntries.map((e) => evaluation_entry_1.EvaluationEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.finalMark !== undefined && message.finalMark !== 0) {
            obj.finalMark = message.finalMark;
        }
        if (message.maximumPotentialMark !== 0) {
            obj.maximumPotentialMark = message.maximumPotentialMark;
        }
        if (message.evaluations?.length) {
            obj.evaluations = message.evaluations.map((e) => evaluation_1.PersonalizedEvaluation.toJSON(e));
        }
        if (message.markCategories?.length) {
            obj.markCategories = message.markCategories.map((e) => mark_category_1.PersonalizedMarkCategory.toJSON(e));
        }
        if (message.studentEvaluationEntries?.length) {
            obj.studentEvaluationEntries = message.studentEvaluationEntries.map((e) => evaluation_entry_1.EvaluationEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.StudentCoursePerformance.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentCoursePerformance();
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.finalMark = object.finalMark ?? 0;
        message.maximumPotentialMark = object.maximumPotentialMark ?? 0;
        message.evaluations = object.evaluations?.map((e) => evaluation_1.PersonalizedEvaluation.fromPartial(e)) || [];
        message.markCategories = object.markCategories?.map((e) => mark_category_1.PersonalizedMarkCategory.fromPartial(e)) || [];
        message.studentEvaluationEntries = object.studentEvaluationEntries?.map((e) => evaluation_entry_1.EvaluationEntry.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseGetStudentCoursesMarkOverviewRequest() {
    return { context: undefined, studentId: undefined, schoolYearId: undefined };
}
exports.GetStudentCoursesMarkOverviewRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.schoolYearId !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYearId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentCoursesMarkOverviewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYearId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            schoolYearId: isSet(object.schoolYearId) ? object_id_1.ObjectId.fromJSON(object.schoolYearId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.schoolYearId !== undefined) {
            obj.schoolYearId = object_id_1.ObjectId.toJSON(message.schoolYearId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentCoursesMarkOverviewRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentCoursesMarkOverviewRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYearId)
            : undefined;
        return message;
    },
};
function createBaseGetStudentCoursesMarkOverviewResponse() {
    return { courseMarks: [] };
}
exports.GetStudentCoursesMarkOverviewResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.courseMarks) {
            exports.StudentCourseMarkOverview.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentCoursesMarkOverviewResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courseMarks.push(exports.StudentCourseMarkOverview.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courseMarks: globalThis.Array.isArray(object?.courseMarks)
                ? object.courseMarks.map((e) => exports.StudentCourseMarkOverview.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseMarks?.length) {
            obj.courseMarks = message.courseMarks.map((e) => exports.StudentCourseMarkOverview.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentCoursesMarkOverviewResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentCoursesMarkOverviewResponse();
        message.courseMarks = object.courseMarks?.map((e) => exports.StudentCourseMarkOverview.fromPartial(e)) || [];
        return message;
    },
};
function createBaseStudentCourseMarkOverview() {
    return {
        courseId: undefined,
        courseName: "",
        courseCode: "",
        semesterId: undefined,
        studentMark: 0,
        maximumPotentialMark: 0,
    };
}
exports.StudentCourseMarkOverview = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(10).fork()).join();
        }
        if (message.courseName !== "") {
            writer.uint32(18).string(message.courseName);
        }
        if (message.courseCode !== "") {
            writer.uint32(26).string(message.courseCode);
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
        }
        if (message.studentMark !== undefined && message.studentMark !== 0) {
            writer.uint32(41).double(message.studentMark);
        }
        if (message.maximumPotentialMark !== 0) {
            writer.uint32(49).double(message.maximumPotentialMark);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentCourseMarkOverview();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.studentMark = reader.double();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.maximumPotentialMark = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            courseName: isSet(object.courseName) ? globalThis.String(object.courseName) : "",
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            studentMark: isSet(object.studentMark) ? globalThis.Number(object.studentMark) : 0,
            maximumPotentialMark: isSet(object.maximumPotentialMark) ? globalThis.Number(object.maximumPotentialMark) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.courseName !== "") {
            obj.courseName = message.courseName;
        }
        if (message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.studentMark !== undefined && message.studentMark !== 0) {
            obj.studentMark = message.studentMark;
        }
        if (message.maximumPotentialMark !== 0) {
            obj.maximumPotentialMark = message.maximumPotentialMark;
        }
        return obj;
    },
    create(base) {
        return exports.StudentCourseMarkOverview.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentCourseMarkOverview();
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.courseName = object.courseName ?? "";
        message.courseCode = object.courseCode ?? "";
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.studentMark = object.studentMark ?? 0;
        message.maximumPotentialMark = object.maximumPotentialMark ?? 0;
        return message;
    },
};
function createBaseExportMarkbookExcelRequest() {
    return { context: undefined, courseId: undefined };
}
exports.ExportMarkbookExcelRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportMarkbookExcelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.ExportMarkbookExcelRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportMarkbookExcelRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseExportMarkbookExcelResponse() {
    return { excelData: "", courseName: "" };
}
exports.ExportMarkbookExcelResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.excelData !== "") {
            writer.uint32(10).string(message.excelData);
        }
        if (message.courseName !== "") {
            writer.uint32(18).string(message.courseName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportMarkbookExcelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.excelData = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            excelData: isSet(object.excelData) ? globalThis.String(object.excelData) : "",
            courseName: isSet(object.courseName) ? globalThis.String(object.courseName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.excelData !== "") {
            obj.excelData = message.excelData;
        }
        if (message.courseName !== "") {
            obj.courseName = message.courseName;
        }
        return obj;
    },
    create(base) {
        return exports.ExportMarkbookExcelResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportMarkbookExcelResponse();
        message.excelData = object.excelData ?? "";
        message.courseName = object.courseName ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
