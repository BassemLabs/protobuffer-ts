"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/attendance.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attendance = exports.AttendanceStatus = exports.protobufPackage = void 0;
exports.attendanceStatusFromJSON = attendanceStatusFromJSON;
exports.attendanceStatusToJSON = attendanceStatusToJSON;
exports.attendanceStatusToNumber = attendanceStatusToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const user_type_1 = require("../utils/user_type");
exports.protobufPackage = "class_service";
var AttendanceStatus;
(function (AttendanceStatus) {
    AttendanceStatus["None"] = "None";
    AttendanceStatus["Present"] = "Present";
    AttendanceStatus["Late"] = "Late";
    AttendanceStatus["Absent"] = "Absent";
    AttendanceStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(AttendanceStatus || (exports.AttendanceStatus = AttendanceStatus = {}));
function attendanceStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "None":
            return AttendanceStatus.None;
        case 1:
        case "Present":
            return AttendanceStatus.Present;
        case 2:
        case "Late":
            return AttendanceStatus.Late;
        case 3:
        case "Absent":
            return AttendanceStatus.Absent;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AttendanceStatus.UNRECOGNIZED;
    }
}
function attendanceStatusToJSON(object) {
    switch (object) {
        case AttendanceStatus.None:
            return "None";
        case AttendanceStatus.Present:
            return "Present";
        case AttendanceStatus.Late:
            return "Late";
        case AttendanceStatus.Absent:
            return "Absent";
        case AttendanceStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function attendanceStatusToNumber(object) {
    switch (object) {
        case AttendanceStatus.None:
            return 0;
        case AttendanceStatus.Present:
            return 1;
        case AttendanceStatus.Late:
            return 2;
        case AttendanceStatus.Absent:
            return 3;
        case AttendanceStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseAttendance() {
    return {
        id: undefined,
        organization: undefined,
        student: undefined,
        course: undefined,
        homeroom: undefined,
        date: "",
        periodNumber: 0,
        reason: "",
        signInTime: undefined,
        signOutTime: undefined,
        status: AttendanceStatus.None,
        lateDismissalDate: undefined,
        studentExcusedBy: undefined,
        studentExcusedByUserType: user_type_1.UserType.None,
    };
}
exports.Attendance = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(26).fork()).join();
        }
        if (message.course !== undefined) {
            object_id_1.ObjectId.encode(message.course, writer.uint32(34).fork()).join();
        }
        if (message.homeroom !== undefined) {
            object_id_1.ObjectId.encode(message.homeroom, writer.uint32(42).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(50).string(message.date);
        }
        if (message.periodNumber !== 0) {
            writer.uint32(56).uint32(message.periodNumber);
        }
        if (message.reason !== "") {
            writer.uint32(66).string(message.reason);
        }
        if (message.signInTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.signInTime), writer.uint32(74).fork()).join();
        }
        if (message.signOutTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.signOutTime), writer.uint32(82).fork()).join();
        }
        if (message.status !== AttendanceStatus.None) {
            writer.uint32(88).int32(attendanceStatusToNumber(message.status));
        }
        if (message.lateDismissalDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lateDismissalDate), writer.uint32(98).fork()).join();
        }
        if (message.studentExcusedBy !== undefined) {
            object_id_1.ObjectId.encode(message.studentExcusedBy, writer.uint32(106).fork()).join();
        }
        if (message.studentExcusedByUserType !== undefined && message.studentExcusedByUserType !== user_type_1.UserType.None) {
            writer.uint32(112).int32((0, user_type_1.userTypeToNumber)(message.studentExcusedByUserType));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttendance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.course = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.homeroom = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.periodNumber = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.signInTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.signOutTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.status = attendanceStatusFromJSON(reader.int32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.lateDismissalDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.studentExcusedBy = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.studentExcusedByUserType = (0, user_type_1.userTypeFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            course: isSet(object.course) ? object_id_1.ObjectId.fromJSON(object.course) : undefined,
            homeroom: isSet(object.homeroom) ? object_id_1.ObjectId.fromJSON(object.homeroom) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            periodNumber: isSet(object.periodNumber) ? globalThis.Number(object.periodNumber) : 0,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            signInTime: isSet(object.signInTime) ? fromJsonTimestamp(object.signInTime) : undefined,
            signOutTime: isSet(object.signOutTime) ? fromJsonTimestamp(object.signOutTime) : undefined,
            status: isSet(object.status) ? attendanceStatusFromJSON(object.status) : AttendanceStatus.None,
            lateDismissalDate: isSet(object.lateDismissalDate) ? fromJsonTimestamp(object.lateDismissalDate) : undefined,
            studentExcusedBy: isSet(object.studentExcusedBy) ? object_id_1.ObjectId.fromJSON(object.studentExcusedBy) : undefined,
            studentExcusedByUserType: isSet(object.studentExcusedByUserType)
                ? (0, user_type_1.userTypeFromJSON)(object.studentExcusedByUserType)
                : user_type_1.UserType.None,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.course !== undefined) {
            obj.course = object_id_1.ObjectId.toJSON(message.course);
        }
        if (message.homeroom !== undefined) {
            obj.homeroom = object_id_1.ObjectId.toJSON(message.homeroom);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.periodNumber !== 0) {
            obj.periodNumber = Math.round(message.periodNumber);
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.signInTime !== undefined) {
            obj.signInTime = message.signInTime.toISOString();
        }
        if (message.signOutTime !== undefined) {
            obj.signOutTime = message.signOutTime.toISOString();
        }
        if (message.status !== AttendanceStatus.None) {
            obj.status = attendanceStatusToJSON(message.status);
        }
        if (message.lateDismissalDate !== undefined) {
            obj.lateDismissalDate = message.lateDismissalDate.toISOString();
        }
        if (message.studentExcusedBy !== undefined) {
            obj.studentExcusedBy = object_id_1.ObjectId.toJSON(message.studentExcusedBy);
        }
        if (message.studentExcusedByUserType !== undefined && message.studentExcusedByUserType !== user_type_1.UserType.None) {
            obj.studentExcusedByUserType = (0, user_type_1.userTypeToJSON)(message.studentExcusedByUserType);
        }
        return obj;
    },
    create(base) {
        return exports.Attendance.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttendance();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.course = (object.course !== undefined && object.course !== null)
            ? object_id_1.ObjectId.fromPartial(object.course)
            : undefined;
        message.homeroom = (object.homeroom !== undefined && object.homeroom !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroom)
            : undefined;
        message.date = object.date ?? "";
        message.periodNumber = object.periodNumber ?? 0;
        message.reason = object.reason ?? "";
        message.signInTime = object.signInTime ?? undefined;
        message.signOutTime = object.signOutTime ?? undefined;
        message.status = object.status ?? AttendanceStatus.None;
        message.lateDismissalDate = object.lateDismissalDate ?? undefined;
        message.studentExcusedBy = (object.studentExcusedBy !== undefined && object.studentExcusedBy !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentExcusedBy)
            : undefined;
        message.studentExcusedByUserType = object.studentExcusedByUserType ?? user_type_1.UserType.None;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
