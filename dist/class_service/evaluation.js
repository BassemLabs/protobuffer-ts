"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/evaluation.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonalizedEvaluation = exports.DetailedEvaluation = exports.Evaluation = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
function createBaseEvaluation() {
    return {
        id: undefined,
        courseId: undefined,
        name: "",
        total: 0,
        weight: 0,
        date: "",
        markCategory: undefined,
        visibleToParentsAndStudents: false,
    };
}
exports.Evaluation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.total !== 0) {
            writer.uint32(32).uint32(message.total);
        }
        if (message.weight !== 0) {
            writer.uint32(40).uint32(message.weight);
        }
        if (message.date !== "") {
            writer.uint32(50).string(message.date);
        }
        if (message.markCategory !== undefined) {
            object_id_1.ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
        }
        if (message.visibleToParentsAndStudents !== false) {
            writer.uint32(64).bool(message.visibleToParentsAndStudents);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.weight = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.markCategory = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.visibleToParentsAndStudents = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            markCategory: isSet(object.markCategory) ? object_id_1.ObjectId.fromJSON(object.markCategory) : undefined,
            visibleToParentsAndStudents: isSet(object.visibleToParentsAndStudents)
                ? globalThis.Boolean(object.visibleToParentsAndStudents)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.weight !== 0) {
            obj.weight = Math.round(message.weight);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.markCategory !== undefined) {
            obj.markCategory = object_id_1.ObjectId.toJSON(message.markCategory);
        }
        if (message.visibleToParentsAndStudents !== false) {
            obj.visibleToParentsAndStudents = message.visibleToParentsAndStudents;
        }
        return obj;
    },
    create(base) {
        return exports.Evaluation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEvaluation();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.total = object.total ?? 0;
        message.weight = object.weight ?? 0;
        message.date = object.date ?? "";
        message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategory)
            : undefined;
        message.visibleToParentsAndStudents = object.visibleToParentsAndStudents ?? false;
        return message;
    },
};
function createBaseDetailedEvaluation() {
    return {
        id: undefined,
        courseId: undefined,
        name: "",
        total: 0,
        weight: 0,
        date: "",
        markCategory: undefined,
        visibleToParentsAndStudents: false,
        evaluationContributionToFinalMark: 0,
    };
}
exports.DetailedEvaluation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.total !== 0) {
            writer.uint32(32).uint32(message.total);
        }
        if (message.weight !== 0) {
            writer.uint32(40).uint32(message.weight);
        }
        if (message.date !== "") {
            writer.uint32(50).string(message.date);
        }
        if (message.markCategory !== undefined) {
            object_id_1.ObjectId.encode(message.markCategory, writer.uint32(58).fork()).join();
        }
        if (message.visibleToParentsAndStudents !== false) {
            writer.uint32(64).bool(message.visibleToParentsAndStudents);
        }
        if (message.evaluationContributionToFinalMark !== 0) {
            writer.uint32(73).double(message.evaluationContributionToFinalMark);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDetailedEvaluation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.weight = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.markCategory = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.visibleToParentsAndStudents = reader.bool();
                    continue;
                case 9:
                    if (tag !== 73) {
                        break;
                    }
                    message.evaluationContributionToFinalMark = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            markCategory: isSet(object.markCategory) ? object_id_1.ObjectId.fromJSON(object.markCategory) : undefined,
            visibleToParentsAndStudents: isSet(object.visibleToParentsAndStudents)
                ? globalThis.Boolean(object.visibleToParentsAndStudents)
                : false,
            evaluationContributionToFinalMark: isSet(object.evaluationContributionToFinalMark)
                ? globalThis.Number(object.evaluationContributionToFinalMark)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.weight !== 0) {
            obj.weight = Math.round(message.weight);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.markCategory !== undefined) {
            obj.markCategory = object_id_1.ObjectId.toJSON(message.markCategory);
        }
        if (message.visibleToParentsAndStudents !== false) {
            obj.visibleToParentsAndStudents = message.visibleToParentsAndStudents;
        }
        if (message.evaluationContributionToFinalMark !== 0) {
            obj.evaluationContributionToFinalMark = message.evaluationContributionToFinalMark;
        }
        return obj;
    },
    create(base) {
        return exports.DetailedEvaluation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDetailedEvaluation();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.total = object.total ?? 0;
        message.weight = object.weight ?? 0;
        message.date = object.date ?? "";
        message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategory)
            : undefined;
        message.visibleToParentsAndStudents = object.visibleToParentsAndStudents ?? false;
        message.evaluationContributionToFinalMark = object.evaluationContributionToFinalMark ?? 0;
        return message;
    },
};
function createBasePersonalizedEvaluation() {
    return {
        id: undefined,
        studentId: undefined,
        courseId: undefined,
        name: "",
        total: 0,
        weight: 0,
        date: "",
        markCategory: undefined,
        visibleToParentsAndStudents: false,
        evaluationContributionToStudentFinalMark: 0,
    };
}
exports.PersonalizedEvaluation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.total !== 0) {
            writer.uint32(40).uint32(message.total);
        }
        if (message.weight !== 0) {
            writer.uint32(48).uint32(message.weight);
        }
        if (message.date !== "") {
            writer.uint32(58).string(message.date);
        }
        if (message.markCategory !== undefined) {
            object_id_1.ObjectId.encode(message.markCategory, writer.uint32(66).fork()).join();
        }
        if (message.visibleToParentsAndStudents !== false) {
            writer.uint32(72).bool(message.visibleToParentsAndStudents);
        }
        if (message.evaluationContributionToStudentFinalMark !== 0) {
            writer.uint32(81).double(message.evaluationContributionToStudentFinalMark);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersonalizedEvaluation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.weight = reader.uint32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.markCategory = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.visibleToParentsAndStudents = reader.bool();
                    continue;
                case 10:
                    if (tag !== 81) {
                        break;
                    }
                    message.evaluationContributionToStudentFinalMark = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            markCategory: isSet(object.markCategory) ? object_id_1.ObjectId.fromJSON(object.markCategory) : undefined,
            visibleToParentsAndStudents: isSet(object.visibleToParentsAndStudents)
                ? globalThis.Boolean(object.visibleToParentsAndStudents)
                : false,
            evaluationContributionToStudentFinalMark: isSet(object.evaluationContributionToStudentFinalMark)
                ? globalThis.Number(object.evaluationContributionToStudentFinalMark)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.weight !== 0) {
            obj.weight = Math.round(message.weight);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.markCategory !== undefined) {
            obj.markCategory = object_id_1.ObjectId.toJSON(message.markCategory);
        }
        if (message.visibleToParentsAndStudents !== false) {
            obj.visibleToParentsAndStudents = message.visibleToParentsAndStudents;
        }
        if (message.evaluationContributionToStudentFinalMark !== 0) {
            obj.evaluationContributionToStudentFinalMark = message.evaluationContributionToStudentFinalMark;
        }
        return obj;
    },
    create(base) {
        return exports.PersonalizedEvaluation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePersonalizedEvaluation();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.total = object.total ?? 0;
        message.weight = object.weight ?? 0;
        message.date = object.date ?? "";
        message.markCategory = (object.markCategory !== undefined && object.markCategory !== null)
            ? object_id_1.ObjectId.fromPartial(object.markCategory)
            : undefined;
        message.visibleToParentsAndStudents = object.visibleToParentsAndStudents ?? false;
        message.evaluationContributionToStudentFinalMark = object.evaluationContributionToStudentFinalMark ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
