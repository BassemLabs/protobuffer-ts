"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/semester.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemesterLearningSkill = exports.ReportDates = exports.SemesterReportLayout = exports.Semester = exports.ReportType = exports.protobufPackage = void 0;
exports.reportTypeFromJSON = reportTypeFromJSON;
exports.reportTypeToJSON = reportTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
var ReportType;
(function (ReportType) {
    ReportType[ReportType["Progress"] = 1] = "Progress";
    ReportType[ReportType["Midterm"] = 2] = "Midterm";
    ReportType[ReportType["Final"] = 3] = "Final";
    ReportType[ReportType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ReportType || (exports.ReportType = ReportType = {}));
function reportTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "Progress":
            return ReportType.Progress;
        case 2:
        case "Midterm":
            return ReportType.Midterm;
        case 3:
        case "Final":
            return ReportType.Final;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ReportType.UNRECOGNIZED;
    }
}
function reportTypeToJSON(object) {
    switch (object) {
        case ReportType.Progress:
            return "Progress";
        case ReportType.Midterm:
            return "Midterm";
        case ReportType.Final:
            return "Final";
        case ReportType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseSemester() {
    return {
        id: undefined,
        name: "",
        archived: false,
        startDate: undefined,
        endDate: undefined,
        reportLayout: undefined,
    };
}
exports.Semester = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.archived !== false) {
            writer.uint32(24).bool(message.archived);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
        }
        if (message.reportLayout !== undefined) {
            exports.SemesterReportLayout.encode(message.reportLayout, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSemester();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.reportLayout = exports.SemesterReportLayout.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
            reportLayout: isSet(object.reportLayout) ? exports.SemesterReportLayout.fromJSON(object.reportLayout) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        if (message.reportLayout !== undefined) {
            obj.reportLayout = exports.SemesterReportLayout.toJSON(message.reportLayout);
        }
        return obj;
    },
    create(base) {
        return exports.Semester.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSemester();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.archived = object.archived ?? false;
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        message.reportLayout = (object.reportLayout !== undefined && object.reportLayout !== null)
            ? exports.SemesterReportLayout.fromPartial(object.reportLayout)
            : undefined;
        return message;
    },
};
function createBaseSemesterReportLayout() {
    return {
        commentCharLimit: 0,
        includeProgressReportCards: false,
        showCreditsEarnedEntry: false,
        learningSkills: [],
        reportDates: [],
    };
}
exports.SemesterReportLayout = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.commentCharLimit !== 0) {
            writer.uint32(8).uint32(message.commentCharLimit);
        }
        if (message.includeProgressReportCards !== false) {
            writer.uint32(16).bool(message.includeProgressReportCards);
        }
        if (message.showCreditsEarnedEntry !== false) {
            writer.uint32(24).bool(message.showCreditsEarnedEntry);
        }
        for (const v of message.learningSkills) {
            exports.SemesterLearningSkill.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.reportDates) {
            exports.ReportDates.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSemesterReportLayout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.commentCharLimit = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.includeProgressReportCards = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.showCreditsEarnedEntry = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.learningSkills.push(exports.SemesterLearningSkill.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.reportDates.push(exports.ReportDates.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            commentCharLimit: isSet(object.commentCharLimit) ? globalThis.Number(object.commentCharLimit) : 0,
            includeProgressReportCards: isSet(object.includeProgressReportCards)
                ? globalThis.Boolean(object.includeProgressReportCards)
                : false,
            showCreditsEarnedEntry: isSet(object.showCreditsEarnedEntry)
                ? globalThis.Boolean(object.showCreditsEarnedEntry)
                : false,
            learningSkills: globalThis.Array.isArray(object?.learningSkills)
                ? object.learningSkills.map((e) => exports.SemesterLearningSkill.fromJSON(e))
                : [],
            reportDates: globalThis.Array.isArray(object?.reportDates)
                ? object.reportDates.map((e) => exports.ReportDates.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commentCharLimit !== 0) {
            obj.commentCharLimit = Math.round(message.commentCharLimit);
        }
        if (message.includeProgressReportCards !== false) {
            obj.includeProgressReportCards = message.includeProgressReportCards;
        }
        if (message.showCreditsEarnedEntry !== false) {
            obj.showCreditsEarnedEntry = message.showCreditsEarnedEntry;
        }
        if (message.learningSkills?.length) {
            obj.learningSkills = message.learningSkills.map((e) => exports.SemesterLearningSkill.toJSON(e));
        }
        if (message.reportDates?.length) {
            obj.reportDates = message.reportDates.map((e) => exports.ReportDates.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SemesterReportLayout.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSemesterReportLayout();
        message.commentCharLimit = object.commentCharLimit ?? 0;
        message.includeProgressReportCards = object.includeProgressReportCards ?? false;
        message.showCreditsEarnedEntry = object.showCreditsEarnedEntry ?? false;
        message.learningSkills = object.learningSkills?.map((e) => exports.SemesterLearningSkill.fromPartial(e)) || [];
        message.reportDates = object.reportDates?.map((e) => exports.ReportDates.fromPartial(e)) || [];
        return message;
    },
};
function createBaseReportDates() {
    return { reportType: 1, dueDate: undefined, distributionDate: undefined };
}
exports.ReportDates = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.reportType !== 1) {
            writer.uint32(8).int32(message.reportType);
        }
        if (message.dueDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dueDate), writer.uint32(18).fork()).join();
        }
        if (message.distributionDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.distributionDate), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReportDates();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.reportType = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dueDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.distributionDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reportType: isSet(object.reportType) ? reportTypeFromJSON(object.reportType) : 1,
            dueDate: isSet(object.dueDate) ? fromJsonTimestamp(object.dueDate) : undefined,
            distributionDate: isSet(object.distributionDate) ? fromJsonTimestamp(object.distributionDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reportType !== 1) {
            obj.reportType = reportTypeToJSON(message.reportType);
        }
        if (message.dueDate !== undefined) {
            obj.dueDate = message.dueDate.toISOString();
        }
        if (message.distributionDate !== undefined) {
            obj.distributionDate = message.distributionDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.ReportDates.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReportDates();
        message.reportType = object.reportType ?? 1;
        message.dueDate = object.dueDate ?? undefined;
        message.distributionDate = object.distributionDate ?? undefined;
        return message;
    },
};
function createBaseSemesterLearningSkill() {
    return { id: undefined, title: "", description: "" };
}
exports.SemesterLearningSkill = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSemesterLearningSkill();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.SemesterLearningSkill.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSemesterLearningSkill();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
