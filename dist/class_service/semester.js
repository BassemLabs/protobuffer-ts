"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/semester.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Semester = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const datetime_1 = require("../utils/datetime");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
function createBaseSemester() {
    return { id: undefined, name: "", archived: false, startDate: undefined, endDate: undefined };
}
exports.Semester = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.archived !== false) {
            writer.uint32(24).bool(message.archived);
        }
        if (message.startDate !== undefined) {
            datetime_1.DateTime.encode(message.startDate, writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            datetime_1.DateTime.encode(message.endDate, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSemester();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = datetime_1.DateTime.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
            startDate: isSet(object.startDate) ? datetime_1.DateTime.fromJSON(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? datetime_1.DateTime.fromJSON(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        if (message.startDate !== undefined) {
            obj.startDate = datetime_1.DateTime.toJSON(message.startDate);
        }
        if (message.endDate !== undefined) {
            obj.endDate = datetime_1.DateTime.toJSON(message.endDate);
        }
        return obj;
    },
    create(base) {
        return exports.Semester.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSemester();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.archived = object.archived ?? false;
        message.startDate = (object.startDate !== undefined && object.startDate !== null)
            ? datetime_1.DateTime.fromPartial(object.startDate)
            : undefined;
        message.endDate = (object.endDate !== undefined && object.endDate !== null)
            ? datetime_1.DateTime.fromPartial(object.endDate)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
