"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/attendance_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSingleStudentCourseAttendanceEntryResponse = exports.GetSingleStudentCourseAttendanceEntryRequest = exports.GetCourseAttendanceDetailsResponse = exports.GetCourseAttendanceDetailsRequest = exports.GetAttendanceCsvDataResponse = exports.GetAttendanceCsvDataRequest = exports.AttendanceDateMapEntry = exports.GetAttendanceDateMapResponse = exports.GetAttendanceDateMapRequest = exports.GetSingleStudentHomeroomAttendanceEntryResponse = exports.GetSingleStudentHomeroomAttendanceEntryRequest = exports.GetHomeroomAttendanceDetailsResponse = exports.GetHomeroomAttendanceDetailsRequest = exports.HomeroomEntryStatus = exports.GetHomeroomsAttendanceOverviewResponse = exports.GetHomeroomsAttendanceOverviewRequest = exports.CourseEntryStatus = exports.GetCoursesAttendanceOverviewResponse = exports.GetCoursesAttendanceOverviewRequest = exports.StudentsAttendanceCountsResponse = exports.StudentAttendanceCounts = exports.AttendanceCounts = exports.UpdateExcuseStudentRequest = exports.UpdateLateDismissalDateRequest = exports.UpdateReasonRequest = exports.UpdateTimeRequest = exports.UpdateStatusRequest = exports.GetStudentsEntriesCountRequest = exports.GetStudentEntriesRequest = exports.ClassRef = exports.AttendanceResponse = exports.AttendanceCompletionStatus = exports.TimeType = exports.protobufPackage = void 0;
exports.timeTypeFromJSON = timeTypeFromJSON;
exports.timeTypeToJSON = timeTypeToJSON;
exports.timeTypeToNumber = timeTypeToNumber;
exports.attendanceCompletionStatusFromJSON = attendanceCompletionStatusFromJSON;
exports.attendanceCompletionStatusToJSON = attendanceCompletionStatusToJSON;
exports.attendanceCompletionStatusToNumber = attendanceCompletionStatusToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const student_1 = require("../user_service/student");
const teacher_1 = require("../user_service/teacher");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const user_type_1 = require("../utils/user_type");
const attendance_1 = require("./attendance");
const course_1 = require("./course");
const homeroom_1 = require("./homeroom");
exports.protobufPackage = "class_service.attendance_service";
var TimeType;
(function (TimeType) {
    TimeType["SignIn"] = "SignIn";
    TimeType["SignOut"] = "SignOut";
    TimeType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(TimeType || (exports.TimeType = TimeType = {}));
function timeTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "SignIn":
            return TimeType.SignIn;
        case 1:
        case "SignOut":
            return TimeType.SignOut;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TimeType.UNRECOGNIZED;
    }
}
function timeTypeToJSON(object) {
    switch (object) {
        case TimeType.SignIn:
            return "SignIn";
        case TimeType.SignOut:
            return "SignOut";
        case TimeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function timeTypeToNumber(object) {
    switch (object) {
        case TimeType.SignIn:
            return 0;
        case TimeType.SignOut:
            return 1;
        case TimeType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var AttendanceCompletionStatus;
(function (AttendanceCompletionStatus) {
    AttendanceCompletionStatus["EMPTY"] = "EMPTY";
    AttendanceCompletionStatus["PARTIAL"] = "PARTIAL";
    AttendanceCompletionStatus["FULL"] = "FULL";
    AttendanceCompletionStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(AttendanceCompletionStatus || (exports.AttendanceCompletionStatus = AttendanceCompletionStatus = {}));
function attendanceCompletionStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "EMPTY":
            return AttendanceCompletionStatus.EMPTY;
        case 1:
        case "PARTIAL":
            return AttendanceCompletionStatus.PARTIAL;
        case 2:
        case "FULL":
            return AttendanceCompletionStatus.FULL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AttendanceCompletionStatus.UNRECOGNIZED;
    }
}
function attendanceCompletionStatusToJSON(object) {
    switch (object) {
        case AttendanceCompletionStatus.EMPTY:
            return "EMPTY";
        case AttendanceCompletionStatus.PARTIAL:
            return "PARTIAL";
        case AttendanceCompletionStatus.FULL:
            return "FULL";
        case AttendanceCompletionStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function attendanceCompletionStatusToNumber(object) {
    switch (object) {
        case AttendanceCompletionStatus.EMPTY:
            return 0;
        case AttendanceCompletionStatus.PARTIAL:
            return 1;
        case AttendanceCompletionStatus.FULL:
            return 2;
        case AttendanceCompletionStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseAttendanceResponse() {
    return { attendance: [] };
}
exports.AttendanceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.attendance) {
            attendance_1.Attendance.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttendanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.attendance.push(attendance_1.Attendance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            attendance: globalThis.Array.isArray(object?.attendance)
                ? object.attendance.map((e) => attendance_1.Attendance.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.attendance?.length) {
            obj.attendance = message.attendance.map((e) => attendance_1.Attendance.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AttendanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttendanceResponse();
        message.attendance = object.attendance?.map((e) => attendance_1.Attendance.fromPartial(e)) || [];
        return message;
    },
};
function createBaseClassRef() {
    return { courseId: undefined, homeroomId: undefined };
}
exports.ClassRef = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClassRef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        return obj;
    },
    create(base) {
        return exports.ClassRef.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClassRef();
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        return message;
    },
};
function createBaseGetStudentEntriesRequest() {
    return { context: undefined, classRef: undefined, studentId: undefined, startDate: "", endDate: "" };
}
exports.GetStudentEntriesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.classRef !== undefined) {
            exports.ClassRef.encode(message.classRef, writer.uint32(18).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
        }
        if (message.startDate !== "") {
            writer.uint32(34).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(42).string(message.endDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentEntriesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classRef = exports.ClassRef.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            classRef: isSet(object.classRef) ? exports.ClassRef.fromJSON(object.classRef) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.classRef !== undefined) {
            obj.classRef = exports.ClassRef.toJSON(message.classRef);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentEntriesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentEntriesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.classRef = (object.classRef !== undefined && object.classRef !== null)
            ? exports.ClassRef.fromPartial(object.classRef)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        return message;
    },
};
function createBaseGetStudentsEntriesCountRequest() {
    return { context: undefined, classRef: undefined, studentIds: [], startDate: "", endDate: "" };
}
exports.GetStudentsEntriesCountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.classRef !== undefined) {
            exports.ClassRef.encode(message.classRef, writer.uint32(18).fork()).join();
        }
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.startDate !== "") {
            writer.uint32(34).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(42).string(message.endDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentsEntriesCountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classRef = exports.ClassRef.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            classRef: isSet(object.classRef) ? exports.ClassRef.fromJSON(object.classRef) : undefined,
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.classRef !== undefined) {
            obj.classRef = exports.ClassRef.toJSON(message.classRef);
        }
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentsEntriesCountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentsEntriesCountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.classRef = (object.classRef !== undefined && object.classRef !== null)
            ? exports.ClassRef.fromPartial(object.classRef)
            : undefined;
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        return message;
    },
};
function createBaseUpdateStatusRequest() {
    return { context: undefined, attendanceEntryId: undefined, status: attendance_1.AttendanceStatus.None };
}
exports.UpdateStatusRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntryId !== undefined) {
            object_id_1.ObjectId.encode(message.attendanceEntryId, writer.uint32(18).fork()).join();
        }
        if (message.status !== attendance_1.AttendanceStatus.None) {
            writer.uint32(24).int32((0, attendance_1.attendanceStatusToNumber)(message.status));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.status = (0, attendance_1.attendanceStatusFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            attendanceEntryId: isSet(object.attendanceEntryId) ? object_id_1.ObjectId.fromJSON(object.attendanceEntryId) : undefined,
            status: isSet(object.status) ? (0, attendance_1.attendanceStatusFromJSON)(object.status) : attendance_1.AttendanceStatus.None,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.attendanceEntryId !== undefined) {
            obj.attendanceEntryId = object_id_1.ObjectId.toJSON(message.attendanceEntryId);
        }
        if (message.status !== attendance_1.AttendanceStatus.None) {
            obj.status = (0, attendance_1.attendanceStatusToJSON)(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateStatusRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateStatusRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.attendanceEntryId = (object.attendanceEntryId !== undefined && object.attendanceEntryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.attendanceEntryId)
            : undefined;
        message.status = object.status ?? attendance_1.AttendanceStatus.None;
        return message;
    },
};
function createBaseUpdateTimeRequest() {
    return { context: undefined, attendanceEntryId: undefined, timeType: TimeType.SignIn, time: undefined };
}
exports.UpdateTimeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntryId !== undefined) {
            object_id_1.ObjectId.encode(message.attendanceEntryId, writer.uint32(18).fork()).join();
        }
        if (message.timeType !== TimeType.SignIn) {
            writer.uint32(24).int32(timeTypeToNumber(message.timeType));
        }
        if (message.time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timeType = timeTypeFromJSON(reader.int32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            attendanceEntryId: isSet(object.attendanceEntryId) ? object_id_1.ObjectId.fromJSON(object.attendanceEntryId) : undefined,
            timeType: isSet(object.timeType) ? timeTypeFromJSON(object.timeType) : TimeType.SignIn,
            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.attendanceEntryId !== undefined) {
            obj.attendanceEntryId = object_id_1.ObjectId.toJSON(message.attendanceEntryId);
        }
        if (message.timeType !== TimeType.SignIn) {
            obj.timeType = timeTypeToJSON(message.timeType);
        }
        if (message.time !== undefined) {
            obj.time = message.time.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.UpdateTimeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateTimeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.attendanceEntryId = (object.attendanceEntryId !== undefined && object.attendanceEntryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.attendanceEntryId)
            : undefined;
        message.timeType = object.timeType ?? TimeType.SignIn;
        message.time = object.time ?? undefined;
        return message;
    },
};
function createBaseUpdateReasonRequest() {
    return { context: undefined, attendanceEntryId: undefined, reason: "" };
}
exports.UpdateReasonRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntryId !== undefined) {
            object_id_1.ObjectId.encode(message.attendanceEntryId, writer.uint32(18).fork()).join();
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateReasonRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            attendanceEntryId: isSet(object.attendanceEntryId) ? object_id_1.ObjectId.fromJSON(object.attendanceEntryId) : undefined,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.attendanceEntryId !== undefined) {
            obj.attendanceEntryId = object_id_1.ObjectId.toJSON(message.attendanceEntryId);
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateReasonRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateReasonRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.attendanceEntryId = (object.attendanceEntryId !== undefined && object.attendanceEntryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.attendanceEntryId)
            : undefined;
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseUpdateLateDismissalDateRequest() {
    return { context: undefined, attendanceEntryId: undefined, lateDismissalDate: undefined };
}
exports.UpdateLateDismissalDateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntryId !== undefined) {
            object_id_1.ObjectId.encode(message.attendanceEntryId, writer.uint32(18).fork()).join();
        }
        if (message.lateDismissalDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lateDismissalDate), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLateDismissalDateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.lateDismissalDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            attendanceEntryId: isSet(object.attendanceEntryId) ? object_id_1.ObjectId.fromJSON(object.attendanceEntryId) : undefined,
            lateDismissalDate: isSet(object.lateDismissalDate) ? fromJsonTimestamp(object.lateDismissalDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.attendanceEntryId !== undefined) {
            obj.attendanceEntryId = object_id_1.ObjectId.toJSON(message.attendanceEntryId);
        }
        if (message.lateDismissalDate !== undefined) {
            obj.lateDismissalDate = message.lateDismissalDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLateDismissalDateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLateDismissalDateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.attendanceEntryId = (object.attendanceEntryId !== undefined && object.attendanceEntryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.attendanceEntryId)
            : undefined;
        message.lateDismissalDate = object.lateDismissalDate ?? undefined;
        return message;
    },
};
function createBaseUpdateExcuseStudentRequest() {
    return {
        context: undefined,
        attendanceEntryId: undefined,
        reason: "",
        studentExcusedBy: undefined,
        studentExcusedByUserType: user_type_1.UserType.None,
    };
}
exports.UpdateExcuseStudentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntryId !== undefined) {
            object_id_1.ObjectId.encode(message.attendanceEntryId, writer.uint32(18).fork()).join();
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (message.studentExcusedBy !== undefined) {
            object_id_1.ObjectId.encode(message.studentExcusedBy, writer.uint32(34).fork()).join();
        }
        if (message.studentExcusedByUserType !== user_type_1.UserType.None) {
            writer.uint32(40).int32((0, user_type_1.userTypeToNumber)(message.studentExcusedByUserType));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateExcuseStudentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.studentExcusedBy = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.studentExcusedByUserType = (0, user_type_1.userTypeFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            attendanceEntryId: isSet(object.attendanceEntryId) ? object_id_1.ObjectId.fromJSON(object.attendanceEntryId) : undefined,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            studentExcusedBy: isSet(object.studentExcusedBy) ? object_id_1.ObjectId.fromJSON(object.studentExcusedBy) : undefined,
            studentExcusedByUserType: isSet(object.studentExcusedByUserType)
                ? (0, user_type_1.userTypeFromJSON)(object.studentExcusedByUserType)
                : user_type_1.UserType.None,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.attendanceEntryId !== undefined) {
            obj.attendanceEntryId = object_id_1.ObjectId.toJSON(message.attendanceEntryId);
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.studentExcusedBy !== undefined) {
            obj.studentExcusedBy = object_id_1.ObjectId.toJSON(message.studentExcusedBy);
        }
        if (message.studentExcusedByUserType !== user_type_1.UserType.None) {
            obj.studentExcusedByUserType = (0, user_type_1.userTypeToJSON)(message.studentExcusedByUserType);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateExcuseStudentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateExcuseStudentRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.attendanceEntryId = (object.attendanceEntryId !== undefined && object.attendanceEntryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.attendanceEntryId)
            : undefined;
        message.reason = object.reason ?? "";
        message.studentExcusedBy = (object.studentExcusedBy !== undefined && object.studentExcusedBy !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentExcusedBy)
            : undefined;
        message.studentExcusedByUserType = object.studentExcusedByUserType ?? user_type_1.UserType.None;
        return message;
    },
};
function createBaseAttendanceCounts() {
    return { none: 0, present: 0, late: 0, absent: 0, excusedAbsent: 0, nonExcusedAbsent: 0 };
}
exports.AttendanceCounts = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.none !== 0) {
            writer.uint32(8).uint32(message.none);
        }
        if (message.present !== 0) {
            writer.uint32(16).uint32(message.present);
        }
        if (message.late !== 0) {
            writer.uint32(24).uint32(message.late);
        }
        if (message.absent !== 0) {
            writer.uint32(32).uint32(message.absent);
        }
        if (message.excusedAbsent !== 0) {
            writer.uint32(40).uint32(message.excusedAbsent);
        }
        if (message.nonExcusedAbsent !== 0) {
            writer.uint32(48).uint32(message.nonExcusedAbsent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttendanceCounts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.none = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.present = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.late = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.absent = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.excusedAbsent = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.nonExcusedAbsent = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            none: isSet(object.none) ? globalThis.Number(object.none) : 0,
            present: isSet(object.present) ? globalThis.Number(object.present) : 0,
            late: isSet(object.late) ? globalThis.Number(object.late) : 0,
            absent: isSet(object.absent) ? globalThis.Number(object.absent) : 0,
            excusedAbsent: isSet(object.excusedAbsent) ? globalThis.Number(object.excusedAbsent) : 0,
            nonExcusedAbsent: isSet(object.nonExcusedAbsent) ? globalThis.Number(object.nonExcusedAbsent) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.none !== 0) {
            obj.none = Math.round(message.none);
        }
        if (message.present !== 0) {
            obj.present = Math.round(message.present);
        }
        if (message.late !== 0) {
            obj.late = Math.round(message.late);
        }
        if (message.absent !== 0) {
            obj.absent = Math.round(message.absent);
        }
        if (message.excusedAbsent !== 0) {
            obj.excusedAbsent = Math.round(message.excusedAbsent);
        }
        if (message.nonExcusedAbsent !== 0) {
            obj.nonExcusedAbsent = Math.round(message.nonExcusedAbsent);
        }
        return obj;
    },
    create(base) {
        return exports.AttendanceCounts.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttendanceCounts();
        message.none = object.none ?? 0;
        message.present = object.present ?? 0;
        message.late = object.late ?? 0;
        message.absent = object.absent ?? 0;
        message.excusedAbsent = object.excusedAbsent ?? 0;
        message.nonExcusedAbsent = object.nonExcusedAbsent ?? 0;
        return message;
    },
};
function createBaseStudentAttendanceCounts() {
    return { student: undefined, counts: undefined };
}
exports.StudentAttendanceCounts = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.student !== undefined) {
            student_1.Student.encode(message.student, writer.uint32(10).fork()).join();
        }
        if (message.counts !== undefined) {
            exports.AttendanceCounts.encode(message.counts, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentAttendanceCounts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.student = student_1.Student.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.counts = exports.AttendanceCounts.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            student: isSet(object.student) ? student_1.Student.fromJSON(object.student) : undefined,
            counts: isSet(object.counts) ? exports.AttendanceCounts.fromJSON(object.counts) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.student !== undefined) {
            obj.student = student_1.Student.toJSON(message.student);
        }
        if (message.counts !== undefined) {
            obj.counts = exports.AttendanceCounts.toJSON(message.counts);
        }
        return obj;
    },
    create(base) {
        return exports.StudentAttendanceCounts.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentAttendanceCounts();
        message.student = (object.student !== undefined && object.student !== null)
            ? student_1.Student.fromPartial(object.student)
            : undefined;
        message.counts = (object.counts !== undefined && object.counts !== null)
            ? exports.AttendanceCounts.fromPartial(object.counts)
            : undefined;
        return message;
    },
};
function createBaseStudentsAttendanceCountsResponse() {
    return { studentCounts: [] };
}
exports.StudentsAttendanceCountsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.studentCounts) {
            exports.StudentAttendanceCounts.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentsAttendanceCountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.studentCounts.push(exports.StudentAttendanceCounts.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            studentCounts: globalThis.Array.isArray(object?.studentCounts)
                ? object.studentCounts.map((e) => exports.StudentAttendanceCounts.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.studentCounts?.length) {
            obj.studentCounts = message.studentCounts.map((e) => exports.StudentAttendanceCounts.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.StudentsAttendanceCountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentsAttendanceCountsResponse();
        message.studentCounts = object.studentCounts?.map((e) => exports.StudentAttendanceCounts.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetCoursesAttendanceOverviewRequest() {
    return { context: undefined, date: "", showAllClasses: false };
}
exports.GetCoursesAttendanceOverviewRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(18).string(message.date);
        }
        if (message.showAllClasses !== false) {
            writer.uint32(24).bool(message.showAllClasses);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCoursesAttendanceOverviewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.showAllClasses = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            showAllClasses: isSet(object.showAllClasses) ? globalThis.Boolean(object.showAllClasses) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.showAllClasses !== false) {
            obj.showAllClasses = message.showAllClasses;
        }
        return obj;
    },
    create(base) {
        return exports.GetCoursesAttendanceOverviewRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCoursesAttendanceOverviewRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.date = object.date ?? "";
        message.showAllClasses = object.showAllClasses ?? false;
        return message;
    },
};
function createBaseGetCoursesAttendanceOverviewResponse() {
    return { courses: [], teachers: [], entryStatus: [] };
}
exports.GetCoursesAttendanceOverviewResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.courses) {
            course_1.Course.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.teachers) {
            teacher_1.TeacherBasic.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.entryStatus) {
            exports.CourseEntryStatus.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCoursesAttendanceOverviewResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courses.push(course_1.Course.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.teachers.push(teacher_1.TeacherBasic.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.entryStatus.push(exports.CourseEntryStatus.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e) => course_1.Course.fromJSON(e)) : [],
            teachers: globalThis.Array.isArray(object?.teachers)
                ? object.teachers.map((e) => teacher_1.TeacherBasic.fromJSON(e))
                : [],
            entryStatus: globalThis.Array.isArray(object?.entryStatus)
                ? object.entryStatus.map((e) => exports.CourseEntryStatus.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courses?.length) {
            obj.courses = message.courses.map((e) => course_1.Course.toJSON(e));
        }
        if (message.teachers?.length) {
            obj.teachers = message.teachers.map((e) => teacher_1.TeacherBasic.toJSON(e));
        }
        if (message.entryStatus?.length) {
            obj.entryStatus = message.entryStatus.map((e) => exports.CourseEntryStatus.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCoursesAttendanceOverviewResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCoursesAttendanceOverviewResponse();
        message.courses = object.courses?.map((e) => course_1.Course.fromPartial(e)) || [];
        message.teachers = object.teachers?.map((e) => teacher_1.TeacherBasic.fromPartial(e)) || [];
        message.entryStatus = object.entryStatus?.map((e) => exports.CourseEntryStatus.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCourseEntryStatus() {
    return { courseId: undefined, isComplete: false };
}
exports.CourseEntryStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(10).fork()).join();
        }
        if (message.isComplete !== false) {
            writer.uint32(16).bool(message.isComplete);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseEntryStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isComplete = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            isComplete: isSet(object.isComplete) ? globalThis.Boolean(object.isComplete) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.isComplete !== false) {
            obj.isComplete = message.isComplete;
        }
        return obj;
    },
    create(base) {
        return exports.CourseEntryStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseEntryStatus();
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.isComplete = object.isComplete ?? false;
        return message;
    },
};
function createBaseGetHomeroomsAttendanceOverviewRequest() {
    return { context: undefined, date: "", showAllClasses: false };
}
exports.GetHomeroomsAttendanceOverviewRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(18).string(message.date);
        }
        if (message.showAllClasses !== false) {
            writer.uint32(24).bool(message.showAllClasses);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomsAttendanceOverviewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.showAllClasses = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            showAllClasses: isSet(object.showAllClasses) ? globalThis.Boolean(object.showAllClasses) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.showAllClasses !== false) {
            obj.showAllClasses = message.showAllClasses;
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomsAttendanceOverviewRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomsAttendanceOverviewRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.date = object.date ?? "";
        message.showAllClasses = object.showAllClasses ?? false;
        return message;
    },
};
function createBaseGetHomeroomsAttendanceOverviewResponse() {
    return { homerooms: [], teachers: [], entryStatus: [] };
}
exports.GetHomeroomsAttendanceOverviewResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.homerooms) {
            homeroom_1.Homeroom.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.teachers) {
            teacher_1.TeacherBasic.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.entryStatus) {
            exports.HomeroomEntryStatus.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomsAttendanceOverviewResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homerooms.push(homeroom_1.Homeroom.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.teachers.push(teacher_1.TeacherBasic.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.entryStatus.push(exports.HomeroomEntryStatus.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homerooms: globalThis.Array.isArray(object?.homerooms)
                ? object.homerooms.map((e) => homeroom_1.Homeroom.fromJSON(e))
                : [],
            teachers: globalThis.Array.isArray(object?.teachers)
                ? object.teachers.map((e) => teacher_1.TeacherBasic.fromJSON(e))
                : [],
            entryStatus: globalThis.Array.isArray(object?.entryStatus)
                ? object.entryStatus.map((e) => exports.HomeroomEntryStatus.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homerooms?.length) {
            obj.homerooms = message.homerooms.map((e) => homeroom_1.Homeroom.toJSON(e));
        }
        if (message.teachers?.length) {
            obj.teachers = message.teachers.map((e) => teacher_1.TeacherBasic.toJSON(e));
        }
        if (message.entryStatus?.length) {
            obj.entryStatus = message.entryStatus.map((e) => exports.HomeroomEntryStatus.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomsAttendanceOverviewResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomsAttendanceOverviewResponse();
        message.homerooms = object.homerooms?.map((e) => homeroom_1.Homeroom.fromPartial(e)) || [];
        message.teachers = object.teachers?.map((e) => teacher_1.TeacherBasic.fromPartial(e)) || [];
        message.entryStatus = object.entryStatus?.map((e) => exports.HomeroomEntryStatus.fromPartial(e)) || [];
        return message;
    },
};
function createBaseHomeroomEntryStatus() {
    return { homeroomId: undefined, isComplete: false };
}
exports.HomeroomEntryStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(10).fork()).join();
        }
        if (message.isComplete !== false) {
            writer.uint32(16).bool(message.isComplete);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHomeroomEntryStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isComplete = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            isComplete: isSet(object.isComplete) ? globalThis.Boolean(object.isComplete) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.isComplete !== false) {
            obj.isComplete = message.isComplete;
        }
        return obj;
    },
    create(base) {
        return exports.HomeroomEntryStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHomeroomEntryStatus();
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.isComplete = object.isComplete ?? false;
        return message;
    },
};
function createBaseGetHomeroomAttendanceDetailsRequest() {
    return { context: undefined, homeroomId: undefined, date: "", periodNumber: 0 };
}
exports.GetHomeroomAttendanceDetailsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(18).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(26).string(message.date);
        }
        if (message.periodNumber !== 0) {
            writer.uint32(32).uint32(message.periodNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomAttendanceDetailsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.periodNumber = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            periodNumber: isSet(object.periodNumber) ? globalThis.Number(object.periodNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.periodNumber !== 0) {
            obj.periodNumber = Math.round(message.periodNumber);
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomAttendanceDetailsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomAttendanceDetailsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.date = object.date ?? "";
        message.periodNumber = object.periodNumber ?? 0;
        return message;
    },
};
function createBaseGetHomeroomAttendanceDetailsResponse() {
    return { homeroom: undefined, students: [], attendanceEntries: [] };
}
exports.GetHomeroomAttendanceDetailsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.homeroom !== undefined) {
            homeroom_1.Homeroom.encode(message.homeroom, writer.uint32(10).fork()).join();
        }
        for (const v of message.students) {
            student_1.Student.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.attendanceEntries) {
            attendance_1.Attendance.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetHomeroomAttendanceDetailsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.homeroom = homeroom_1.Homeroom.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.students.push(student_1.Student.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.attendanceEntries.push(attendance_1.Attendance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            homeroom: isSet(object.homeroom) ? homeroom_1.Homeroom.fromJSON(object.homeroom) : undefined,
            students: globalThis.Array.isArray(object?.students) ? object.students.map((e) => student_1.Student.fromJSON(e)) : [],
            attendanceEntries: globalThis.Array.isArray(object?.attendanceEntries)
                ? object.attendanceEntries.map((e) => attendance_1.Attendance.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.homeroom !== undefined) {
            obj.homeroom = homeroom_1.Homeroom.toJSON(message.homeroom);
        }
        if (message.students?.length) {
            obj.students = message.students.map((e) => student_1.Student.toJSON(e));
        }
        if (message.attendanceEntries?.length) {
            obj.attendanceEntries = message.attendanceEntries.map((e) => attendance_1.Attendance.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetHomeroomAttendanceDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetHomeroomAttendanceDetailsResponse();
        message.homeroom = (object.homeroom !== undefined && object.homeroom !== null)
            ? homeroom_1.Homeroom.fromPartial(object.homeroom)
            : undefined;
        message.students = object.students?.map((e) => student_1.Student.fromPartial(e)) || [];
        message.attendanceEntries = object.attendanceEntries?.map((e) => attendance_1.Attendance.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetSingleStudentHomeroomAttendanceEntryRequest() {
    return { context: undefined, studentId: undefined, homeroomId: undefined, date: "" };
}
exports.GetSingleStudentHomeroomAttendanceEntryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(26).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(34).string(message.date);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSingleStudentHomeroomAttendanceEntryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        return obj;
    },
    create(base) {
        return exports.GetSingleStudentHomeroomAttendanceEntryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSingleStudentHomeroomAttendanceEntryRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.date = object.date ?? "";
        return message;
    },
};
function createBaseGetSingleStudentHomeroomAttendanceEntryResponse() {
    return { student: undefined, attendanceEntry: undefined, homeroom: undefined };
}
exports.GetSingleStudentHomeroomAttendanceEntryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.student !== undefined) {
            student_1.Student.encode(message.student, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntry !== undefined) {
            attendance_1.Attendance.encode(message.attendanceEntry, writer.uint32(18).fork()).join();
        }
        if (message.homeroom !== undefined) {
            homeroom_1.Homeroom.encode(message.homeroom, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSingleStudentHomeroomAttendanceEntryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.student = student_1.Student.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntry = attendance_1.Attendance.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.homeroom = homeroom_1.Homeroom.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            student: isSet(object.student) ? student_1.Student.fromJSON(object.student) : undefined,
            attendanceEntry: isSet(object.attendanceEntry) ? attendance_1.Attendance.fromJSON(object.attendanceEntry) : undefined,
            homeroom: isSet(object.homeroom) ? homeroom_1.Homeroom.fromJSON(object.homeroom) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.student !== undefined) {
            obj.student = student_1.Student.toJSON(message.student);
        }
        if (message.attendanceEntry !== undefined) {
            obj.attendanceEntry = attendance_1.Attendance.toJSON(message.attendanceEntry);
        }
        if (message.homeroom !== undefined) {
            obj.homeroom = homeroom_1.Homeroom.toJSON(message.homeroom);
        }
        return obj;
    },
    create(base) {
        return exports.GetSingleStudentHomeroomAttendanceEntryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSingleStudentHomeroomAttendanceEntryResponse();
        message.student = (object.student !== undefined && object.student !== null)
            ? student_1.Student.fromPartial(object.student)
            : undefined;
        message.attendanceEntry = (object.attendanceEntry !== undefined && object.attendanceEntry !== null)
            ? attendance_1.Attendance.fromPartial(object.attendanceEntry)
            : undefined;
        message.homeroom = (object.homeroom !== undefined && object.homeroom !== null)
            ? homeroom_1.Homeroom.fromPartial(object.homeroom)
            : undefined;
        return message;
    },
};
function createBaseGetAttendanceDateMapRequest() {
    return { context: undefined, classRef: undefined, startDate: "", endDate: "" };
}
exports.GetAttendanceDateMapRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.classRef !== undefined) {
            exports.ClassRef.encode(message.classRef, writer.uint32(18).fork()).join();
        }
        if (message.startDate !== "") {
            writer.uint32(26).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(34).string(message.endDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAttendanceDateMapRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classRef = exports.ClassRef.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            classRef: isSet(object.classRef) ? exports.ClassRef.fromJSON(object.classRef) : undefined,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.classRef !== undefined) {
            obj.classRef = exports.ClassRef.toJSON(message.classRef);
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        return obj;
    },
    create(base) {
        return exports.GetAttendanceDateMapRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAttendanceDateMapRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.classRef = (object.classRef !== undefined && object.classRef !== null)
            ? exports.ClassRef.fromPartial(object.classRef)
            : undefined;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        return message;
    },
};
function createBaseGetAttendanceDateMapResponse() {
    return { entries: [] };
}
exports.GetAttendanceDateMapResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.entries) {
            exports.AttendanceDateMapEntry.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAttendanceDateMapResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.entries.push(exports.AttendanceDateMapEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entries: globalThis.Array.isArray(object?.entries)
                ? object.entries.map((e) => exports.AttendanceDateMapEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.entries?.length) {
            obj.entries = message.entries.map((e) => exports.AttendanceDateMapEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetAttendanceDateMapResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAttendanceDateMapResponse();
        message.entries = object.entries?.map((e) => exports.AttendanceDateMapEntry.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAttendanceDateMapEntry() {
    return { date: "", completionStatus: AttendanceCompletionStatus.EMPTY };
}
exports.AttendanceDateMapEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.date !== "") {
            writer.uint32(10).string(message.date);
        }
        if (message.completionStatus !== AttendanceCompletionStatus.EMPTY) {
            writer.uint32(16).int32(attendanceCompletionStatusToNumber(message.completionStatus));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttendanceDateMapEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.completionStatus = attendanceCompletionStatusFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            completionStatus: isSet(object.completionStatus)
                ? attendanceCompletionStatusFromJSON(object.completionStatus)
                : AttendanceCompletionStatus.EMPTY,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.completionStatus !== AttendanceCompletionStatus.EMPTY) {
            obj.completionStatus = attendanceCompletionStatusToJSON(message.completionStatus);
        }
        return obj;
    },
    create(base) {
        return exports.AttendanceDateMapEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttendanceDateMapEntry();
        message.date = object.date ?? "";
        message.completionStatus = object.completionStatus ?? AttendanceCompletionStatus.EMPTY;
        return message;
    },
};
function createBaseGetAttendanceCsvDataRequest() {
    return { context: undefined, classRef: undefined, startDate: "", endDate: "" };
}
exports.GetAttendanceCsvDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.classRef !== undefined) {
            exports.ClassRef.encode(message.classRef, writer.uint32(18).fork()).join();
        }
        if (message.startDate !== "") {
            writer.uint32(26).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(34).string(message.endDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAttendanceCsvDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classRef = exports.ClassRef.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            classRef: isSet(object.classRef) ? exports.ClassRef.fromJSON(object.classRef) : undefined,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.classRef !== undefined) {
            obj.classRef = exports.ClassRef.toJSON(message.classRef);
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        return obj;
    },
    create(base) {
        return exports.GetAttendanceCsvDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAttendanceCsvDataRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.classRef = (object.classRef !== undefined && object.classRef !== null)
            ? exports.ClassRef.fromPartial(object.classRef)
            : undefined;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        return message;
    },
};
function createBaseGetAttendanceCsvDataResponse() {
    return { csvData: "", filename: "" };
}
exports.GetAttendanceCsvDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.csvData !== "") {
            writer.uint32(10).string(message.csvData);
        }
        if (message.filename !== "") {
            writer.uint32(18).string(message.filename);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAttendanceCsvDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.csvData = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            csvData: isSet(object.csvData) ? globalThis.String(object.csvData) : "",
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.csvData !== "") {
            obj.csvData = message.csvData;
        }
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        return obj;
    },
    create(base) {
        return exports.GetAttendanceCsvDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAttendanceCsvDataResponse();
        message.csvData = object.csvData ?? "";
        message.filename = object.filename ?? "";
        return message;
    },
};
function createBaseGetCourseAttendanceDetailsRequest() {
    return { context: undefined, courseId: undefined, date: "", periodNumber: 0 };
}
exports.GetCourseAttendanceDetailsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(26).string(message.date);
        }
        if (message.periodNumber !== 0) {
            writer.uint32(32).uint32(message.periodNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseAttendanceDetailsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.periodNumber = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            periodNumber: isSet(object.periodNumber) ? globalThis.Number(object.periodNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.periodNumber !== 0) {
            obj.periodNumber = Math.round(message.periodNumber);
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseAttendanceDetailsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseAttendanceDetailsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.date = object.date ?? "";
        message.periodNumber = object.periodNumber ?? 0;
        return message;
    },
};
function createBaseGetCourseAttendanceDetailsResponse() {
    return { course: undefined, students: [], attendanceEntries: [] };
}
exports.GetCourseAttendanceDetailsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.course !== undefined) {
            course_1.Course.encode(message.course, writer.uint32(10).fork()).join();
        }
        for (const v of message.students) {
            student_1.Student.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.attendanceEntries) {
            attendance_1.Attendance.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseAttendanceDetailsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.course = course_1.Course.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.students.push(student_1.Student.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.attendanceEntries.push(attendance_1.Attendance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            course: isSet(object.course) ? course_1.Course.fromJSON(object.course) : undefined,
            students: globalThis.Array.isArray(object?.students) ? object.students.map((e) => student_1.Student.fromJSON(e)) : [],
            attendanceEntries: globalThis.Array.isArray(object?.attendanceEntries)
                ? object.attendanceEntries.map((e) => attendance_1.Attendance.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.course !== undefined) {
            obj.course = course_1.Course.toJSON(message.course);
        }
        if (message.students?.length) {
            obj.students = message.students.map((e) => student_1.Student.toJSON(e));
        }
        if (message.attendanceEntries?.length) {
            obj.attendanceEntries = message.attendanceEntries.map((e) => attendance_1.Attendance.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseAttendanceDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseAttendanceDetailsResponse();
        message.course = (object.course !== undefined && object.course !== null)
            ? course_1.Course.fromPartial(object.course)
            : undefined;
        message.students = object.students?.map((e) => student_1.Student.fromPartial(e)) || [];
        message.attendanceEntries = object.attendanceEntries?.map((e) => attendance_1.Attendance.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetSingleStudentCourseAttendanceEntryRequest() {
    return { context: undefined, studentId: undefined, courseId: undefined, date: "", periodNumber: 0 };
}
exports.GetSingleStudentCourseAttendanceEntryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(26).fork()).join();
        }
        if (message.date !== "") {
            writer.uint32(34).string(message.date);
        }
        if (message.periodNumber !== 0) {
            writer.uint32(40).uint32(message.periodNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSingleStudentCourseAttendanceEntryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.periodNumber = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            periodNumber: isSet(object.periodNumber) ? globalThis.Number(object.periodNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.periodNumber !== 0) {
            obj.periodNumber = Math.round(message.periodNumber);
        }
        return obj;
    },
    create(base) {
        return exports.GetSingleStudentCourseAttendanceEntryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSingleStudentCourseAttendanceEntryRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.date = object.date ?? "";
        message.periodNumber = object.periodNumber ?? 0;
        return message;
    },
};
function createBaseGetSingleStudentCourseAttendanceEntryResponse() {
    return { student: undefined, attendanceEntry: undefined, course: undefined };
}
exports.GetSingleStudentCourseAttendanceEntryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.student !== undefined) {
            student_1.Student.encode(message.student, writer.uint32(10).fork()).join();
        }
        if (message.attendanceEntry !== undefined) {
            attendance_1.Attendance.encode(message.attendanceEntry, writer.uint32(18).fork()).join();
        }
        if (message.course !== undefined) {
            course_1.Course.encode(message.course, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSingleStudentCourseAttendanceEntryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.student = student_1.Student.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attendanceEntry = attendance_1.Attendance.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.course = course_1.Course.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            student: isSet(object.student) ? student_1.Student.fromJSON(object.student) : undefined,
            attendanceEntry: isSet(object.attendanceEntry) ? attendance_1.Attendance.fromJSON(object.attendanceEntry) : undefined,
            course: isSet(object.course) ? course_1.Course.fromJSON(object.course) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.student !== undefined) {
            obj.student = student_1.Student.toJSON(message.student);
        }
        if (message.attendanceEntry !== undefined) {
            obj.attendanceEntry = attendance_1.Attendance.toJSON(message.attendanceEntry);
        }
        if (message.course !== undefined) {
            obj.course = course_1.Course.toJSON(message.course);
        }
        return obj;
    },
    create(base) {
        return exports.GetSingleStudentCourseAttendanceEntryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSingleStudentCourseAttendanceEntryResponse();
        message.student = (object.student !== undefined && object.student !== null)
            ? student_1.Student.fromPartial(object.student)
            : undefined;
        message.attendanceEntry = (object.attendanceEntry !== undefined && object.attendanceEntry !== null)
            ? attendance_1.Attendance.fromPartial(object.attendanceEntry)
            : undefined;
        message.course = (object.course !== undefined && object.course !== null)
            ? course_1.Course.fromPartial(object.course)
            : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
