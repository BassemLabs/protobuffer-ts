"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/course_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.HomeroomCloneRequest = exports.HomeroomCreateRequest = exports.StandaloneCloneRequest = exports.StandaloneCreateRequest = exports.GetStudentGClassCourseWorkRequest = exports.GetGClassCourseWorkRequest = exports.AllAttendanceClassesRequest = exports.AttendanceClassesRequest = exports.AddAttendanceTeachersRequest = exports.RemoveStudentsRequest = exports.AddStudentsRequest = exports.RemoveTeachersRequest = exports.AddTeachersRequest = exports.UpdateCourseRequest = exports.ArchiveCourseRequest = exports.GetStudentCoursesForSchoolYearRequest = exports.GetStudentCoursesRequest = exports.GClassStudentSubmissionResponse = exports.GClassCourseWorkResponse = exports.CourseResponse = exports.AggregateCourseResponse = exports.AggregateCourseRequest = exports.GetCourseRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const course_1 = require("./course");
const gclass_1 = require("./gclass");
exports.protobufPackage = "class_service.course_service";
function createBaseGetCourseRequest() {
    return { context: undefined, courseId: undefined };
}
exports.GetCourseRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCourseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetCourseRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCourseRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseAggregateCourseRequest() {
    return { context: undefined, aggregationDocument: "" };
}
exports.AggregateCourseRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.aggregationDocument !== "") {
            writer.uint32(18).string(message.aggregationDocument);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregateCourseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.aggregationDocument = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            aggregationDocument: isSet(object.aggregationDocument) ? globalThis.String(object.aggregationDocument) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.aggregationDocument !== "") {
            obj.aggregationDocument = message.aggregationDocument;
        }
        return obj;
    },
    create(base) {
        return exports.AggregateCourseRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregateCourseRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.aggregationDocument = object.aggregationDocument ?? "";
        return message;
    },
};
function createBaseAggregateCourseResponse() {
    return { result: "" };
}
exports.AggregateCourseResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAggregateCourseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.AggregateCourseResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAggregateCourseResponse();
        message.result = object.result ?? "";
        return message;
    },
};
function createBaseCourseResponse() {
    return { course: [] };
}
exports.CourseResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.course) {
            course_1.Course.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.course.push(course_1.Course.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            course: globalThis.Array.isArray(object?.course) ? object.course.map((e) => course_1.Course.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.course?.length) {
            obj.course = message.course.map((e) => course_1.Course.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CourseResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseResponse();
        message.course = object.course?.map((e) => course_1.Course.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGClassCourseWorkResponse() {
    return { gclassCourseWork: [] };
}
exports.GClassCourseWorkResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.gclassCourseWork) {
            gclass_1.GClassCourseWork.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGClassCourseWorkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gclassCourseWork.push(gclass_1.GClassCourseWork.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gclassCourseWork: globalThis.Array.isArray(object?.gclassCourseWork)
                ? object.gclassCourseWork.map((e) => gclass_1.GClassCourseWork.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gclassCourseWork?.length) {
            obj.gclassCourseWork = message.gclassCourseWork.map((e) => gclass_1.GClassCourseWork.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GClassCourseWorkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGClassCourseWorkResponse();
        message.gclassCourseWork = object.gclassCourseWork?.map((e) => gclass_1.GClassCourseWork.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGClassStudentSubmissionResponse() {
    return { gclassStudentSubmission: [] };
}
exports.GClassStudentSubmissionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.gclassStudentSubmission) {
            gclass_1.GClassStudentSubmission.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGClassStudentSubmissionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gclassStudentSubmission.push(gclass_1.GClassStudentSubmission.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gclassStudentSubmission: globalThis.Array.isArray(object?.gclassStudentSubmission)
                ? object.gclassStudentSubmission.map((e) => gclass_1.GClassStudentSubmission.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gclassStudentSubmission?.length) {
            obj.gclassStudentSubmission = message.gclassStudentSubmission.map((e) => gclass_1.GClassStudentSubmission.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GClassStudentSubmissionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGClassStudentSubmissionResponse();
        message.gclassStudentSubmission =
            object.gclassStudentSubmission?.map((e) => gclass_1.GClassStudentSubmission.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetStudentCoursesRequest() {
    return { context: undefined, studentId: undefined, includeArchived: false };
}
exports.GetStudentCoursesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.includeArchived !== undefined && message.includeArchived !== false) {
            writer.uint32(24).bool(message.includeArchived);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentCoursesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.includeArchived = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            includeArchived: isSet(object.includeArchived) ? globalThis.Boolean(object.includeArchived) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.includeArchived !== undefined && message.includeArchived !== false) {
            obj.includeArchived = message.includeArchived;
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentCoursesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentCoursesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.includeArchived = object.includeArchived ?? false;
        return message;
    },
};
function createBaseGetStudentCoursesForSchoolYearRequest() {
    return { context: undefined, studentId: undefined, schoolYearId: undefined };
}
exports.GetStudentCoursesForSchoolYearRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(18).fork()).join();
        }
        if (message.schoolYearId !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYearId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentCoursesForSchoolYearRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYearId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            schoolYearId: isSet(object.schoolYearId) ? object_id_1.ObjectId.fromJSON(object.schoolYearId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.schoolYearId !== undefined) {
            obj.schoolYearId = object_id_1.ObjectId.toJSON(message.schoolYearId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentCoursesForSchoolYearRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentCoursesForSchoolYearRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYearId)
            : undefined;
        return message;
    },
};
function createBaseArchiveCourseRequest() {
    return { context: undefined, courseId: undefined };
}
exports.ArchiveCourseRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArchiveCourseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.ArchiveCourseRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArchiveCourseRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseUpdateCourseRequest() {
    return { context: undefined, courseId: undefined, name: "", semesterId: undefined, courseCode: "" };
}
exports.UpdateCourseRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
        }
        if (message.courseCode !== undefined && message.courseCode !== "") {
            writer.uint32(42).string(message.courseCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCourseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.courseCode !== undefined && message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCourseRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCourseRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.name = object.name ?? "";
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.courseCode = object.courseCode ?? "";
        return message;
    },
};
function createBaseAddTeachersRequest() {
    return { context: undefined, courseId: undefined, teacherIds: [] };
}
exports.AddTeachersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddTeachersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AddTeachersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddTeachersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveTeachersRequest() {
    return { context: undefined, courseId: undefined, teacherIds: [] };
}
exports.RemoveTeachersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveTeachersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RemoveTeachersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveTeachersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddStudentsRequest() {
    return { context: undefined, courseId: undefined, studentIds: [] };
}
exports.AddStudentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddStudentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AddStudentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddStudentsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveStudentsRequest() {
    return { context: undefined, courseId: undefined, studentIds: [] };
}
exports.RemoveStudentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        for (const v of message.studentIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveStudentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            studentIds: globalThis.Array.isArray(object?.studentIds)
                ? object.studentIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.studentIds?.length) {
            obj.studentIds = message.studentIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RemoveStudentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveStudentsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.studentIds = object.studentIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddAttendanceTeachersRequest() {
    return { context: undefined, courseId: undefined, teacherIds: [] };
}
exports.AddAttendanceTeachersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        for (const v of message.teacherIds) {
            object_id_1.ObjectId.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAttendanceTeachersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teacherIds.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            teacherIds: globalThis.Array.isArray(object?.teacherIds)
                ? object.teacherIds.map((e) => object_id_1.ObjectId.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.teacherIds?.length) {
            obj.teacherIds = message.teacherIds.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AddAttendanceTeachersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddAttendanceTeachersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.teacherIds = object.teacherIds?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAttendanceClassesRequest() {
    return { context: undefined, teacherId: undefined };
}
exports.AttendanceClassesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.teacherId !== undefined) {
            object_id_1.ObjectId.encode(message.teacherId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttendanceClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.teacherId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            teacherId: isSet(object.teacherId) ? object_id_1.ObjectId.fromJSON(object.teacherId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.teacherId !== undefined) {
            obj.teacherId = object_id_1.ObjectId.toJSON(message.teacherId);
        }
        return obj;
    },
    create(base) {
        return exports.AttendanceClassesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAttendanceClassesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.teacherId = (object.teacherId !== undefined && object.teacherId !== null)
            ? object_id_1.ObjectId.fromPartial(object.teacherId)
            : undefined;
        return message;
    },
};
function createBaseAllAttendanceClassesRequest() {
    return { context: undefined };
}
exports.AllAttendanceClassesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllAttendanceClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.AllAttendanceClassesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAllAttendanceClassesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetGClassCourseWorkRequest() {
    return { context: undefined, courseId: undefined };
}
exports.GetGClassCourseWorkRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGClassCourseWorkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        return obj;
    },
    create(base) {
        return exports.GetGClassCourseWorkRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetGClassCourseWorkRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        return message;
    },
};
function createBaseGetStudentGClassCourseWorkRequest() {
    return { context: undefined, courseId: undefined, studentId: undefined };
}
exports.GetStudentGClassCourseWorkRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseId !== undefined) {
            object_id_1.ObjectId.encode(message.courseId, writer.uint32(18).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStudentGClassCourseWorkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseId: isSet(object.courseId) ? object_id_1.ObjectId.fromJSON(object.courseId) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseId !== undefined) {
            obj.courseId = object_id_1.ObjectId.toJSON(message.courseId);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        return obj;
    },
    create(base) {
        return exports.GetStudentGClassCourseWorkRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetStudentGClassCourseWorkRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseId = (object.courseId !== undefined && object.courseId !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseId)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        return message;
    },
};
function createBaseStandaloneCreateRequest() {
    return { context: undefined, name: "", semesterId: undefined, teachers: [], courseCode: "", gclassCreate: false };
}
exports.StandaloneCreateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(26).fork()).join();
        }
        for (const v of message.teachers) {
            object_id_1.ObjectId.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.courseCode !== "") {
            writer.uint32(42).string(message.courseCode);
        }
        if (message.gclassCreate !== false) {
            writer.uint32(48).bool(message.gclassCreate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStandaloneCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.teachers.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.gclassCreate = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e) => object_id_1.ObjectId.fromJSON(e)) : [],
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
            gclassCreate: isSet(object.gclassCreate) ? globalThis.Boolean(object.gclassCreate) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.teachers?.length) {
            obj.teachers = message.teachers.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        if (message.gclassCreate !== false) {
            obj.gclassCreate = message.gclassCreate;
        }
        return obj;
    },
    create(base) {
        return exports.StandaloneCreateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStandaloneCreateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.name = object.name ?? "";
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.teachers = object.teachers?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.courseCode = object.courseCode ?? "";
        message.gclassCreate = object.gclassCreate ?? false;
        return message;
    },
};
function createBaseStandaloneCloneRequest() {
    return {
        context: undefined,
        courseToClone: undefined,
        name: "",
        semesterId: undefined,
        teachers: [],
        courseCode: "",
        gclassCreate: false,
    };
}
exports.StandaloneCloneRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseToClone !== undefined) {
            object_id_1.ObjectId.encode(message.courseToClone, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.semesterId !== undefined) {
            object_id_1.ObjectId.encode(message.semesterId, writer.uint32(34).fork()).join();
        }
        for (const v of message.teachers) {
            object_id_1.ObjectId.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.courseCode !== "") {
            writer.uint32(50).string(message.courseCode);
        }
        if (message.gclassCreate !== false) {
            writer.uint32(56).bool(message.gclassCreate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStandaloneCloneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseToClone = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.semesterId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.teachers.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.gclassCreate = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseToClone: isSet(object.courseToClone) ? object_id_1.ObjectId.fromJSON(object.courseToClone) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            semesterId: isSet(object.semesterId) ? object_id_1.ObjectId.fromJSON(object.semesterId) : undefined,
            teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e) => object_id_1.ObjectId.fromJSON(e)) : [],
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
            gclassCreate: isSet(object.gclassCreate) ? globalThis.Boolean(object.gclassCreate) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseToClone !== undefined) {
            obj.courseToClone = object_id_1.ObjectId.toJSON(message.courseToClone);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.semesterId !== undefined) {
            obj.semesterId = object_id_1.ObjectId.toJSON(message.semesterId);
        }
        if (message.teachers?.length) {
            obj.teachers = message.teachers.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        if (message.gclassCreate !== false) {
            obj.gclassCreate = message.gclassCreate;
        }
        return obj;
    },
    create(base) {
        return exports.StandaloneCloneRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStandaloneCloneRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseToClone = (object.courseToClone !== undefined && object.courseToClone !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseToClone)
            : undefined;
        message.name = object.name ?? "";
        message.semesterId = (object.semesterId !== undefined && object.semesterId !== null)
            ? object_id_1.ObjectId.fromPartial(object.semesterId)
            : undefined;
        message.teachers = object.teachers?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.courseCode = object.courseCode ?? "";
        message.gclassCreate = object.gclassCreate ?? false;
        return message;
    },
};
function createBaseHomeroomCreateRequest() {
    return { context: undefined, name: "", courseCode: "", teachers: [], homeroomId: undefined, gclassCreate: false };
}
exports.HomeroomCreateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.courseCode !== "") {
            writer.uint32(26).string(message.courseCode);
        }
        for (const v of message.teachers) {
            object_id_1.ObjectId.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.homeroomId !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomId, writer.uint32(42).fork()).join();
        }
        if (message.gclassCreate !== false) {
            writer.uint32(48).bool(message.gclassCreate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHomeroomCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.teachers.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.homeroomId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.gclassCreate = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
            teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e) => object_id_1.ObjectId.fromJSON(e)) : [],
            homeroomId: isSet(object.homeroomId) ? object_id_1.ObjectId.fromJSON(object.homeroomId) : undefined,
            gclassCreate: isSet(object.gclassCreate) ? globalThis.Boolean(object.gclassCreate) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        if (message.teachers?.length) {
            obj.teachers = message.teachers.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.homeroomId !== undefined) {
            obj.homeroomId = object_id_1.ObjectId.toJSON(message.homeroomId);
        }
        if (message.gclassCreate !== false) {
            obj.gclassCreate = message.gclassCreate;
        }
        return obj;
    },
    create(base) {
        return exports.HomeroomCreateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHomeroomCreateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.name = object.name ?? "";
        message.courseCode = object.courseCode ?? "";
        message.teachers = object.teachers?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.homeroomId = (object.homeroomId !== undefined && object.homeroomId !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomId)
            : undefined;
        message.gclassCreate = object.gclassCreate ?? false;
        return message;
    },
};
function createBaseHomeroomCloneRequest() {
    return {
        context: undefined,
        courseToClone: undefined,
        homeroomToCloneTo: undefined,
        name: "",
        courseCode: "",
        teachers: [],
        gclassCreate: false,
    };
}
exports.HomeroomCloneRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.courseToClone !== undefined) {
            object_id_1.ObjectId.encode(message.courseToClone, writer.uint32(18).fork()).join();
        }
        if (message.homeroomToCloneTo !== undefined) {
            object_id_1.ObjectId.encode(message.homeroomToCloneTo, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.courseCode !== "") {
            writer.uint32(42).string(message.courseCode);
        }
        for (const v of message.teachers) {
            object_id_1.ObjectId.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.gclassCreate !== false) {
            writer.uint32(56).bool(message.gclassCreate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHomeroomCloneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.courseToClone = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.homeroomToCloneTo = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.courseCode = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.teachers.push(object_id_1.ObjectId.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.gclassCreate = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            courseToClone: isSet(object.courseToClone) ? object_id_1.ObjectId.fromJSON(object.courseToClone) : undefined,
            homeroomToCloneTo: isSet(object.homeroomToCloneTo) ? object_id_1.ObjectId.fromJSON(object.homeroomToCloneTo) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            courseCode: isSet(object.courseCode) ? globalThis.String(object.courseCode) : "",
            teachers: globalThis.Array.isArray(object?.teachers) ? object.teachers.map((e) => object_id_1.ObjectId.fromJSON(e)) : [],
            gclassCreate: isSet(object.gclassCreate) ? globalThis.Boolean(object.gclassCreate) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.courseToClone !== undefined) {
            obj.courseToClone = object_id_1.ObjectId.toJSON(message.courseToClone);
        }
        if (message.homeroomToCloneTo !== undefined) {
            obj.homeroomToCloneTo = object_id_1.ObjectId.toJSON(message.homeroomToCloneTo);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.courseCode !== "") {
            obj.courseCode = message.courseCode;
        }
        if (message.teachers?.length) {
            obj.teachers = message.teachers.map((e) => object_id_1.ObjectId.toJSON(e));
        }
        if (message.gclassCreate !== false) {
            obj.gclassCreate = message.gclassCreate;
        }
        return obj;
    },
    create(base) {
        return exports.HomeroomCloneRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHomeroomCloneRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.courseToClone = (object.courseToClone !== undefined && object.courseToClone !== null)
            ? object_id_1.ObjectId.fromPartial(object.courseToClone)
            : undefined;
        message.homeroomToCloneTo = (object.homeroomToCloneTo !== undefined && object.homeroomToCloneTo !== null)
            ? object_id_1.ObjectId.fromPartial(object.homeroomToCloneTo)
            : undefined;
        message.name = object.name ?? "";
        message.courseCode = object.courseCode ?? "";
        message.teachers = object.teachers?.map((e) => object_id_1.ObjectId.fromPartial(e)) || [];
        message.gclassCreate = object.gclassCreate ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
