"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: class_service/student_evaluation_entry.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.StudentPublishedEvaluationEntry = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "class_service";
function createBaseStudentPublishedEvaluationEntry() {
    return {
        entryId: undefined,
        evaluationId: undefined,
        studentId: undefined,
        mark: 0,
        courseName: "",
        evaluationName: "",
        totalMark: 0,
        date: undefined,
        lastPublishedAt: undefined,
    };
}
exports.StudentPublishedEvaluationEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.entryId !== undefined) {
            object_id_1.ObjectId.encode(message.entryId, writer.uint32(10).fork()).join();
        }
        if (message.evaluationId !== undefined) {
            object_id_1.ObjectId.encode(message.evaluationId, writer.uint32(18).fork()).join();
        }
        if (message.studentId !== undefined) {
            object_id_1.ObjectId.encode(message.studentId, writer.uint32(26).fork()).join();
        }
        if (message.mark !== undefined && message.mark !== 0) {
            writer.uint32(33).double(message.mark);
        }
        if (message.courseName !== "") {
            writer.uint32(42).string(message.courseName);
        }
        if (message.evaluationName !== "") {
            writer.uint32(50).string(message.evaluationName);
        }
        if (message.totalMark !== 0) {
            writer.uint32(56).uint32(message.totalMark);
        }
        if (message.date !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.date), writer.uint32(66).fork()).join();
        }
        if (message.lastPublishedAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lastPublishedAt), writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStudentPublishedEvaluationEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.entryId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.evaluationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.studentId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.mark = reader.double();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.courseName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.evaluationName = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.totalMark = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.date = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.lastPublishedAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entryId: isSet(object.entryId) ? object_id_1.ObjectId.fromJSON(object.entryId) : undefined,
            evaluationId: isSet(object.evaluationId) ? object_id_1.ObjectId.fromJSON(object.evaluationId) : undefined,
            studentId: isSet(object.studentId) ? object_id_1.ObjectId.fromJSON(object.studentId) : undefined,
            mark: isSet(object.mark) ? globalThis.Number(object.mark) : 0,
            courseName: isSet(object.courseName) ? globalThis.String(object.courseName) : "",
            evaluationName: isSet(object.evaluationName) ? globalThis.String(object.evaluationName) : "",
            totalMark: isSet(object.totalMark) ? globalThis.Number(object.totalMark) : 0,
            date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
            lastPublishedAt: isSet(object.lastPublishedAt) ? fromJsonTimestamp(object.lastPublishedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.entryId !== undefined) {
            obj.entryId = object_id_1.ObjectId.toJSON(message.entryId);
        }
        if (message.evaluationId !== undefined) {
            obj.evaluationId = object_id_1.ObjectId.toJSON(message.evaluationId);
        }
        if (message.studentId !== undefined) {
            obj.studentId = object_id_1.ObjectId.toJSON(message.studentId);
        }
        if (message.mark !== undefined && message.mark !== 0) {
            obj.mark = message.mark;
        }
        if (message.courseName !== "") {
            obj.courseName = message.courseName;
        }
        if (message.evaluationName !== "") {
            obj.evaluationName = message.evaluationName;
        }
        if (message.totalMark !== 0) {
            obj.totalMark = Math.round(message.totalMark);
        }
        if (message.date !== undefined) {
            obj.date = message.date.toISOString();
        }
        if (message.lastPublishedAt !== undefined) {
            obj.lastPublishedAt = message.lastPublishedAt.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.StudentPublishedEvaluationEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStudentPublishedEvaluationEntry();
        message.entryId = (object.entryId !== undefined && object.entryId !== null)
            ? object_id_1.ObjectId.fromPartial(object.entryId)
            : undefined;
        message.evaluationId = (object.evaluationId !== undefined && object.evaluationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.evaluationId)
            : undefined;
        message.studentId = (object.studentId !== undefined && object.studentId !== null)
            ? object_id_1.ObjectId.fromPartial(object.studentId)
            : undefined;
        message.mark = object.mark ?? 0;
        message.courseName = object.courseName ?? "";
        message.evaluationName = object.evaluationName ?? "";
        message.totalMark = object.totalMark ?? 0;
        message.date = object.date ?? undefined;
        message.lastPublishedAt = object.lastPublishedAt ?? undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
