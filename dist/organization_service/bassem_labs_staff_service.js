"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/bassem_labs_staff_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUsersResponse = exports.GetUsersRequest = exports.GetUserByEmailRequest = exports.GetUserByIdRequest = exports.UpdateStatusRequest = exports.UpdateProfileRequest = exports.CreateUserRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const bassem_labs_staff_1 = require("./bassem_labs_staff");
exports.protobufPackage = "organization_service";
function createBaseCreateUserRequest() {
    return {
        context: undefined,
        username: "",
        firstName: "",
        lastName: "",
        gender: "",
        personalEmail: "",
        phoneNumber: "",
        dateOfBirth: undefined,
        roles: [],
    };
}
exports.CreateUserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.firstName !== "") {
            writer.uint32(26).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(34).string(message.lastName);
        }
        if (message.gender !== "") {
            writer.uint32(42).string(message.gender);
        }
        if (message.personalEmail !== "") {
            writer.uint32(50).string(message.personalEmail);
        }
        if (message.phoneNumber !== "") {
            writer.uint32(58).string(message.phoneNumber);
        }
        if (message.dateOfBirth !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(66).fork()).join();
        }
        for (const v of message.roles) {
            writer.uint32(74).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.gender = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.personalEmail = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.phoneNumber = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dateOfBirth = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
            personalEmail: isSet(object.personalEmail) ? globalThis.String(object.personalEmail) : "",
            phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
            dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.gender !== "") {
            obj.gender = message.gender;
        }
        if (message.personalEmail !== "") {
            obj.personalEmail = message.personalEmail;
        }
        if (message.phoneNumber !== "") {
            obj.phoneNumber = message.phoneNumber;
        }
        if (message.dateOfBirth !== undefined) {
            obj.dateOfBirth = message.dateOfBirth.toISOString();
        }
        if (message.roles?.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return exports.CreateUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateUserRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.username = object.username ?? "";
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.gender = object.gender ?? "";
        message.personalEmail = object.personalEmail ?? "";
        message.phoneNumber = object.phoneNumber ?? "";
        message.dateOfBirth = object.dateOfBirth ?? undefined;
        message.roles = object.roles?.map((e) => e) || [];
        return message;
    },
};
function createBaseUpdateProfileRequest() {
    return {
        context: undefined,
        id: undefined,
        firstName: "",
        lastName: "",
        gender: "",
        personalEmail: "",
        phoneNumber: "",
        dateOfBirth: undefined,
    };
}
exports.UpdateProfileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.firstName !== undefined && message.firstName !== "") {
            writer.uint32(26).string(message.firstName);
        }
        if (message.lastName !== undefined && message.lastName !== "") {
            writer.uint32(34).string(message.lastName);
        }
        if (message.gender !== undefined && message.gender !== "") {
            writer.uint32(42).string(message.gender);
        }
        if (message.personalEmail !== undefined && message.personalEmail !== "") {
            writer.uint32(50).string(message.personalEmail);
        }
        if (message.phoneNumber !== undefined && message.phoneNumber !== "") {
            writer.uint32(58).string(message.phoneNumber);
        }
        if (message.dateOfBirth !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.gender = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.personalEmail = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.phoneNumber = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dateOfBirth = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
            personalEmail: isSet(object.personalEmail) ? globalThis.String(object.personalEmail) : "",
            phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
            dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.firstName !== undefined && message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== undefined && message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.gender !== undefined && message.gender !== "") {
            obj.gender = message.gender;
        }
        if (message.personalEmail !== undefined && message.personalEmail !== "") {
            obj.personalEmail = message.personalEmail;
        }
        if (message.phoneNumber !== undefined && message.phoneNumber !== "") {
            obj.phoneNumber = message.phoneNumber;
        }
        if (message.dateOfBirth !== undefined) {
            obj.dateOfBirth = message.dateOfBirth.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.UpdateProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateProfileRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.gender = object.gender ?? "";
        message.personalEmail = object.personalEmail ?? "";
        message.phoneNumber = object.phoneNumber ?? "";
        message.dateOfBirth = object.dateOfBirth ?? undefined;
        return message;
    },
};
function createBaseUpdateStatusRequest() {
    return { context: undefined, id: undefined, status: bassem_labs_staff_1.StaffStatus.ACTIVE };
}
exports.UpdateStatusRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.status !== bassem_labs_staff_1.StaffStatus.ACTIVE) {
            writer.uint32(24).int32((0, bassem_labs_staff_1.staffStatusToNumber)(message.status));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.status = (0, bassem_labs_staff_1.staffStatusFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            status: isSet(object.status) ? (0, bassem_labs_staff_1.staffStatusFromJSON)(object.status) : bassem_labs_staff_1.StaffStatus.ACTIVE,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.status !== bassem_labs_staff_1.StaffStatus.ACTIVE) {
            obj.status = (0, bassem_labs_staff_1.staffStatusToJSON)(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateStatusRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateStatusRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.status = object.status ?? bassem_labs_staff_1.StaffStatus.ACTIVE;
        return message;
    },
};
function createBaseGetUserByIdRequest() {
    return { context: undefined, id: undefined };
}
exports.GetUserByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetUserByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserByIdRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseGetUserByEmailRequest() {
    return { context: undefined, email: "" };
}
exports.GetUserByEmailRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserByEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            email: isSet(object.email) ? globalThis.String(object.email) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
    create(base) {
        return exports.GetUserByEmailRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserByEmailRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.email = object.email ?? "";
        return message;
    },
};
function createBaseGetUsersRequest() {
    return { context: undefined };
}
exports.GetUsersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetUsersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUsersRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetUsersResponse() {
    return { users: [] };
}
exports.GetUsersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.users) {
            bassem_labs_staff_1.BassemLabsStaff.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(bassem_labs_staff_1.BassemLabsStaff.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            users: globalThis.Array.isArray(object?.users) ? object.users.map((e) => bassem_labs_staff_1.BassemLabsStaff.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.users?.length) {
            obj.users = message.users.map((e) => bassem_labs_staff_1.BassemLabsStaff.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetUsersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUsersResponse();
        message.users = object.users?.map((e) => bassem_labs_staff_1.BassemLabsStaff.fromPartial(e)) || [];
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
