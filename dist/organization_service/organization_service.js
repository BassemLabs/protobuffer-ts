"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/organization_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateOrganizationStripePaymentInfoRequest = exports.UpdateStripeIdRequest = exports.GetOrganizationByStripeRequest = exports.StartReregistrationRequest = exports.StartSchoolYearRequest = exports.CreateSchoolYearResponse = exports.UpdateSchoolYearRegistrationStatusRequest = exports.CreateSchoolYearRequest = exports.GetSchoolYearsResponse = exports.GetSchoolYearRequest = exports.GetSchoolYearsRequest = exports.GetOrganizationsResponse = exports.GetOrganizationsRequest = exports.UpdateOrganizationSettingsRequest = exports.RemoveDomainRequest = exports.AddDomainRequest = exports.UpdateDefaultDomainRequest = exports.RenameOrganizationRequest = exports.UnsafeGetOrganizationByDomainRequest = exports.UnsafeGetOrganizationByOrganizationIdRequest = exports.GetOrganizationByDomainRequest = exports.GetOrganizationRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const organization_1 = require("./organization");
exports.protobufPackage = "organization_service";
function createBaseGetOrganizationRequest() {
    return { context: undefined, organizationId: undefined };
}
exports.GetOrganizationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function createBaseGetOrganizationByDomainRequest() {
    return { context: undefined, domain: "" };
}
exports.GetOrganizationByDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.domain !== "") {
            writer.uint32(18).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationByDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByDomainRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBaseUnsafeGetOrganizationByOrganizationIdRequest() {
    return { organizationId: undefined };
}
exports.UnsafeGetOrganizationByOrganizationIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnsafeGetOrganizationByOrganizationIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.UnsafeGetOrganizationByOrganizationIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnsafeGetOrganizationByOrganizationIdRequest();
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function createBaseUnsafeGetOrganizationByDomainRequest() {
    return { domain: "" };
}
exports.UnsafeGetOrganizationByDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnsafeGetOrganizationByDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.UnsafeGetOrganizationByDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnsafeGetOrganizationByDomainRequest();
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBaseRenameOrganizationRequest() {
    return { context: undefined, organizationId: undefined, newName: "" };
}
exports.RenameOrganizationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.newName !== "") {
            writer.uint32(26).string(message.newName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenameOrganizationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            newName: isSet(object.newName) ? globalThis.String(object.newName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.newName !== "") {
            obj.newName = message.newName;
        }
        return obj;
    },
    create(base) {
        return exports.RenameOrganizationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRenameOrganizationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.newName = object.newName ?? "";
        return message;
    },
};
function createBaseUpdateDefaultDomainRequest() {
    return { context: undefined, organizationId: undefined, newDefaultDomain: "" };
}
exports.UpdateDefaultDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.newDefaultDomain !== "") {
            writer.uint32(26).string(message.newDefaultDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDefaultDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newDefaultDomain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            newDefaultDomain: isSet(object.newDefaultDomain) ? globalThis.String(object.newDefaultDomain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.newDefaultDomain !== "") {
            obj.newDefaultDomain = message.newDefaultDomain;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateDefaultDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateDefaultDomainRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.newDefaultDomain = object.newDefaultDomain ?? "";
        return message;
    },
};
function createBaseAddDomainRequest() {
    return { context: undefined, organizationId: undefined, newDomain: "" };
}
exports.AddDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.newDomain !== "") {
            writer.uint32(26).string(message.newDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newDomain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            newDomain: isSet(object.newDomain) ? globalThis.String(object.newDomain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.newDomain !== "") {
            obj.newDomain = message.newDomain;
        }
        return obj;
    },
    create(base) {
        return exports.AddDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddDomainRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.newDomain = object.newDomain ?? "";
        return message;
    },
};
function createBaseRemoveDomainRequest() {
    return { context: undefined, organizationId: undefined, removeDomain: "" };
}
exports.RemoveDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.removeDomain !== "") {
            writer.uint32(26).string(message.removeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.removeDomain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            removeDomain: isSet(object.removeDomain) ? globalThis.String(object.removeDomain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.removeDomain !== "") {
            obj.removeDomain = message.removeDomain;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveDomainRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.removeDomain = object.removeDomain ?? "";
        return message;
    },
};
function createBaseUpdateOrganizationSettingsRequest() {
    return {
        context: undefined,
        organizationId: undefined,
        name: "",
        domains: [],
        defaultDomain: "",
        countryCode: "",
        currency: organization_1.Currency.USD,
    };
}
exports.UpdateOrganizationSettingsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        for (const v of message.domains) {
            writer.uint32(34).string(v);
        }
        if (message.defaultDomain !== "") {
            writer.uint32(42).string(message.defaultDomain);
        }
        if (message.countryCode !== "") {
            writer.uint32(50).string(message.countryCode);
        }
        if (message.currency !== organization_1.Currency.USD) {
            writer.uint32(56).int32((0, organization_1.currencyToNumber)(message.currency));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrganizationSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.domains.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.defaultDomain = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.countryCode = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.currency = (0, organization_1.currencyFromJSON)(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            domains: globalThis.Array.isArray(object?.domains) ? object.domains.map((e) => globalThis.String(e)) : [],
            defaultDomain: isSet(object.defaultDomain) ? globalThis.String(object.defaultDomain) : "",
            countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
            currency: isSet(object.currency) ? (0, organization_1.currencyFromJSON)(object.currency) : organization_1.Currency.USD,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.domains?.length) {
            obj.domains = message.domains;
        }
        if (message.defaultDomain !== "") {
            obj.defaultDomain = message.defaultDomain;
        }
        if (message.countryCode !== "") {
            obj.countryCode = message.countryCode;
        }
        if (message.currency !== organization_1.Currency.USD) {
            obj.currency = (0, organization_1.currencyToJSON)(message.currency);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOrganizationSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOrganizationSettingsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.name = object.name ?? "";
        message.domains = object.domains?.map((e) => e) || [];
        message.defaultDomain = object.defaultDomain ?? "";
        message.countryCode = object.countryCode ?? "";
        message.currency = object.currency ?? organization_1.Currency.USD;
        return message;
    },
};
function createBaseGetOrganizationsRequest() {
    return { context: undefined };
}
exports.GetOrganizationsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseGetOrganizationsResponse() {
    return { organizations: [] };
}
exports.GetOrganizationsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.organizations) {
            organization_1.Organization.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizations.push(organization_1.Organization.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizations: globalThis.Array.isArray(object?.organizations)
                ? object.organizations.map((e) => organization_1.Organization.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizations?.length) {
            obj.organizations = message.organizations.map((e) => organization_1.Organization.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationsResponse();
        message.organizations = object.organizations?.map((e) => organization_1.Organization.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetSchoolYearsRequest() {
    return { context: undefined, organizationId: undefined };
}
exports.GetSchoolYearsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchoolYearsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.GetSchoolYearsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSchoolYearsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function createBaseGetSchoolYearRequest() {
    return { context: undefined, schoolYearId: undefined };
}
exports.GetSchoolYearRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYearId !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYearId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchoolYearRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYearId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYearId: isSet(object.schoolYearId) ? object_id_1.ObjectId.fromJSON(object.schoolYearId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYearId !== undefined) {
            obj.schoolYearId = object_id_1.ObjectId.toJSON(message.schoolYearId);
        }
        return obj;
    },
    create(base) {
        return exports.GetSchoolYearRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSchoolYearRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYearId)
            : undefined;
        return message;
    },
};
function createBaseGetSchoolYearsResponse() {
    return { schoolYears: [] };
}
exports.GetSchoolYearsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.schoolYears) {
            organization_1.SchoolYear.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchoolYearsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.schoolYears.push(organization_1.SchoolYear.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            schoolYears: globalThis.Array.isArray(object?.schoolYears)
                ? object.schoolYears.map((e) => organization_1.SchoolYear.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.schoolYears?.length) {
            obj.schoolYears = message.schoolYears.map((e) => organization_1.SchoolYear.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetSchoolYearsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSchoolYearsResponse();
        message.schoolYears = object.schoolYears?.map((e) => organization_1.SchoolYear.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateSchoolYearRequest() {
    return { context: undefined, organizationId: undefined, name: "", startDate: undefined, endDate: undefined };
}
exports.CreateSchoolYearRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateSchoolYearRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.CreateSchoolYearRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateSchoolYearRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.name = object.name ?? "";
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        return message;
    },
};
function createBaseUpdateSchoolYearRegistrationStatusRequest() {
    return { context: undefined, schoolYearId: undefined, newRegistrationStatus: false };
}
exports.UpdateSchoolYearRegistrationStatusRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYearId !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYearId, writer.uint32(18).fork()).join();
        }
        if (message.newRegistrationStatus !== false) {
            writer.uint32(24).bool(message.newRegistrationStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSchoolYearRegistrationStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYearId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.newRegistrationStatus = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYearId: isSet(object.schoolYearId) ? object_id_1.ObjectId.fromJSON(object.schoolYearId) : undefined,
            newRegistrationStatus: isSet(object.newRegistrationStatus)
                ? globalThis.Boolean(object.newRegistrationStatus)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYearId !== undefined) {
            obj.schoolYearId = object_id_1.ObjectId.toJSON(message.schoolYearId);
        }
        if (message.newRegistrationStatus !== false) {
            obj.newRegistrationStatus = message.newRegistrationStatus;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSchoolYearRegistrationStatusRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSchoolYearRegistrationStatusRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYearId = (object.schoolYearId !== undefined && object.schoolYearId !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYearId)
            : undefined;
        message.newRegistrationStatus = object.newRegistrationStatus ?? false;
        return message;
    },
};
function createBaseCreateSchoolYearResponse() {
    return { schoolYears: [] };
}
exports.CreateSchoolYearResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.schoolYears) {
            organization_1.SchoolYear.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateSchoolYearResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.schoolYears.push(organization_1.SchoolYear.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            schoolYears: globalThis.Array.isArray(object?.schoolYears)
                ? object.schoolYears.map((e) => organization_1.SchoolYear.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.schoolYears?.length) {
            obj.schoolYears = message.schoolYears.map((e) => organization_1.SchoolYear.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateSchoolYearResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateSchoolYearResponse();
        message.schoolYears = object.schoolYears?.map((e) => organization_1.SchoolYear.fromPartial(e)) || [];
        return message;
    },
};
function createBaseStartSchoolYearRequest() {
    return { context: undefined, organizationId: undefined };
}
exports.StartSchoolYearRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartSchoolYearRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.StartSchoolYearRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStartSchoolYearRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function createBaseStartReregistrationRequest() {
    return { context: undefined, organizationId: undefined };
}
exports.StartReregistrationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartReregistrationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.StartReregistrationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStartReregistrationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function createBaseGetOrganizationByStripeRequest() {
    return { stripeAccountId: "" };
}
exports.GetOrganizationByStripeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stripeAccountId !== "") {
            writer.uint32(10).string(message.stripeAccountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByStripeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stripeAccountId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { stripeAccountId: isSet(object.stripeAccountId) ? globalThis.String(object.stripeAccountId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.stripeAccountId !== "") {
            obj.stripeAccountId = message.stripeAccountId;
        }
        return obj;
    },
    create(base) {
        return exports.GetOrganizationByStripeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByStripeRequest();
        message.stripeAccountId = object.stripeAccountId ?? "";
        return message;
    },
};
function createBaseUpdateStripeIdRequest() {
    return { context: undefined, organizationId: undefined, stripeAcountId: "" };
}
exports.UpdateStripeIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.stripeAcountId !== "") {
            writer.uint32(26).string(message.stripeAcountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateStripeIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stripeAcountId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            stripeAcountId: isSet(object.stripeAcountId) ? globalThis.String(object.stripeAcountId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.stripeAcountId !== "") {
            obj.stripeAcountId = message.stripeAcountId;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateStripeIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateStripeIdRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.stripeAcountId = object.stripeAcountId ?? "";
        return message;
    },
};
function createBaseUpdateOrganizationStripePaymentInfoRequest() {
    return {
        context: undefined,
        organizationId: undefined,
        stripePayoutsEnabled: false,
        stripeDetailsSubmitted: false,
        stripeChargesEnabled: false,
    };
}
exports.UpdateOrganizationStripePaymentInfoRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.stripePayoutsEnabled !== false) {
            writer.uint32(24).bool(message.stripePayoutsEnabled);
        }
        if (message.stripeDetailsSubmitted !== false) {
            writer.uint32(32).bool(message.stripeDetailsSubmitted);
        }
        if (message.stripeChargesEnabled !== false) {
            writer.uint32(40).bool(message.stripeChargesEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrganizationStripePaymentInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.stripePayoutsEnabled = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.stripeDetailsSubmitted = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.stripeChargesEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            stripePayoutsEnabled: isSet(object.stripePayoutsEnabled)
                ? globalThis.Boolean(object.stripePayoutsEnabled)
                : false,
            stripeDetailsSubmitted: isSet(object.stripeDetailsSubmitted)
                ? globalThis.Boolean(object.stripeDetailsSubmitted)
                : false,
            stripeChargesEnabled: isSet(object.stripeChargesEnabled)
                ? globalThis.Boolean(object.stripeChargesEnabled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.stripePayoutsEnabled !== false) {
            obj.stripePayoutsEnabled = message.stripePayoutsEnabled;
        }
        if (message.stripeDetailsSubmitted !== false) {
            obj.stripeDetailsSubmitted = message.stripeDetailsSubmitted;
        }
        if (message.stripeChargesEnabled !== false) {
            obj.stripeChargesEnabled = message.stripeChargesEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOrganizationStripePaymentInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOrganizationStripePaymentInfoRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.stripePayoutsEnabled = object.stripePayoutsEnabled ?? false;
        message.stripeDetailsSubmitted = object.stripeDetailsSubmitted ?? false;
        message.stripeChargesEnabled = object.stripeChargesEnabled ?? false;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
