"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/onboarding_steps.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnboardingStepsStatus = exports.OnboardingStepData = exports.OnboardingStepName = exports.OnboardingStepStatus = exports.protobufPackage = void 0;
exports.onboardingStepStatusFromJSON = onboardingStepStatusFromJSON;
exports.onboardingStepStatusToJSON = onboardingStepStatusToJSON;
exports.onboardingStepStatusToNumber = onboardingStepStatusToNumber;
exports.onboardingStepNameFromJSON = onboardingStepNameFromJSON;
exports.onboardingStepNameToJSON = onboardingStepNameToJSON;
exports.onboardingStepNameToNumber = onboardingStepNameToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "organization_service";
var OnboardingStepStatus;
(function (OnboardingStepStatus) {
    OnboardingStepStatus["ONGOING"] = "ONGOING";
    OnboardingStepStatus["COMPLETED"] = "COMPLETED";
    OnboardingStepStatus["LOCKED"] = "LOCKED";
    OnboardingStepStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(OnboardingStepStatus || (exports.OnboardingStepStatus = OnboardingStepStatus = {}));
function onboardingStepStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "ONGOING":
            return OnboardingStepStatus.ONGOING;
        case 1:
        case "COMPLETED":
            return OnboardingStepStatus.COMPLETED;
        case 2:
        case "LOCKED":
            return OnboardingStepStatus.LOCKED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OnboardingStepStatus.UNRECOGNIZED;
    }
}
function onboardingStepStatusToJSON(object) {
    switch (object) {
        case OnboardingStepStatus.ONGOING:
            return "ONGOING";
        case OnboardingStepStatus.COMPLETED:
            return "COMPLETED";
        case OnboardingStepStatus.LOCKED:
            return "LOCKED";
        case OnboardingStepStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function onboardingStepStatusToNumber(object) {
    switch (object) {
        case OnboardingStepStatus.ONGOING:
            return 0;
        case OnboardingStepStatus.COMPLETED:
            return 1;
        case OnboardingStepStatus.LOCKED:
            return 2;
        case OnboardingStepStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
var OnboardingStepName;
(function (OnboardingStepName) {
    OnboardingStepName["ORG_OWNER_PROFILE"] = "ORG_OWNER_PROFILE";
    OnboardingStepName["ORGANIZATION_SETTINGS"] = "ORGANIZATION_SETTINGS";
    OnboardingStepName["ORGANIZATION_KEYS"] = "ORGANIZATION_KEYS";
    OnboardingStepName["PAYMENTS"] = "PAYMENTS";
    OnboardingStepName["STAFF_MANAGEMENT"] = "STAFF_MANAGEMENT";
    OnboardingStepName["CAMPUS_MANAGEMENT"] = "CAMPUS_MANAGEMENT";
    OnboardingStepName["RESOURCE_ACCESS_SETTINGS"] = "RESOURCE_ACCESS_SETTINGS";
    OnboardingStepName["STUDENT_FIELDS"] = "STUDENT_FIELDS";
    OnboardingStepName["PARENT_FIELDS"] = "PARENT_FIELDS";
    OnboardingStepName["TEACHER_FIELDS"] = "TEACHER_FIELDS";
    OnboardingStepName["STUDENT_UPLOAD"] = "STUDENT_UPLOAD";
    OnboardingStepName["ONBOARDING_SETTINGS"] = "ONBOARDING_SETTINGS";
    OnboardingStepName["EMAIL_TEMPLATES"] = "EMAIL_TEMPLATES";
    OnboardingStepName["PROCESSING_FEES"] = "PROCESSING_FEES";
    OnboardingStepName["CALENDAR"] = "CALENDAR";
    OnboardingStepName["SEMESTERS"] = "SEMESTERS";
    OnboardingStepName["PAYMENT_PLAN"] = "PAYMENT_PLAN";
    OnboardingStepName["CUSTOM_FIELDS_TEMPLATES"] = "CUSTOM_FIELDS_TEMPLATES";
    OnboardingStepName["UNRECOGNIZED"] = "UNRECOGNIZED";
})(OnboardingStepName || (exports.OnboardingStepName = OnboardingStepName = {}));
function onboardingStepNameFromJSON(object) {
    switch (object) {
        case 0:
        case "ORG_OWNER_PROFILE":
            return OnboardingStepName.ORG_OWNER_PROFILE;
        case 1:
        case "ORGANIZATION_SETTINGS":
            return OnboardingStepName.ORGANIZATION_SETTINGS;
        case 2:
        case "ORGANIZATION_KEYS":
            return OnboardingStepName.ORGANIZATION_KEYS;
        case 3:
        case "PAYMENTS":
            return OnboardingStepName.PAYMENTS;
        case 4:
        case "STAFF_MANAGEMENT":
            return OnboardingStepName.STAFF_MANAGEMENT;
        case 5:
        case "CAMPUS_MANAGEMENT":
            return OnboardingStepName.CAMPUS_MANAGEMENT;
        case 6:
        case "RESOURCE_ACCESS_SETTINGS":
            return OnboardingStepName.RESOURCE_ACCESS_SETTINGS;
        case 7:
        case "STUDENT_FIELDS":
            return OnboardingStepName.STUDENT_FIELDS;
        case 8:
        case "PARENT_FIELDS":
            return OnboardingStepName.PARENT_FIELDS;
        case 9:
        case "TEACHER_FIELDS":
            return OnboardingStepName.TEACHER_FIELDS;
        case 10:
        case "STUDENT_UPLOAD":
            return OnboardingStepName.STUDENT_UPLOAD;
        case 11:
        case "ONBOARDING_SETTINGS":
            return OnboardingStepName.ONBOARDING_SETTINGS;
        case 12:
        case "EMAIL_TEMPLATES":
            return OnboardingStepName.EMAIL_TEMPLATES;
        case 13:
        case "PROCESSING_FEES":
            return OnboardingStepName.PROCESSING_FEES;
        case 14:
        case "CALENDAR":
            return OnboardingStepName.CALENDAR;
        case 15:
        case "SEMESTERS":
            return OnboardingStepName.SEMESTERS;
        case 16:
        case "PAYMENT_PLAN":
            return OnboardingStepName.PAYMENT_PLAN;
        case 17:
        case "CUSTOM_FIELDS_TEMPLATES":
            return OnboardingStepName.CUSTOM_FIELDS_TEMPLATES;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OnboardingStepName.UNRECOGNIZED;
    }
}
function onboardingStepNameToJSON(object) {
    switch (object) {
        case OnboardingStepName.ORG_OWNER_PROFILE:
            return "ORG_OWNER_PROFILE";
        case OnboardingStepName.ORGANIZATION_SETTINGS:
            return "ORGANIZATION_SETTINGS";
        case OnboardingStepName.ORGANIZATION_KEYS:
            return "ORGANIZATION_KEYS";
        case OnboardingStepName.PAYMENTS:
            return "PAYMENTS";
        case OnboardingStepName.STAFF_MANAGEMENT:
            return "STAFF_MANAGEMENT";
        case OnboardingStepName.CAMPUS_MANAGEMENT:
            return "CAMPUS_MANAGEMENT";
        case OnboardingStepName.RESOURCE_ACCESS_SETTINGS:
            return "RESOURCE_ACCESS_SETTINGS";
        case OnboardingStepName.STUDENT_FIELDS:
            return "STUDENT_FIELDS";
        case OnboardingStepName.PARENT_FIELDS:
            return "PARENT_FIELDS";
        case OnboardingStepName.TEACHER_FIELDS:
            return "TEACHER_FIELDS";
        case OnboardingStepName.STUDENT_UPLOAD:
            return "STUDENT_UPLOAD";
        case OnboardingStepName.ONBOARDING_SETTINGS:
            return "ONBOARDING_SETTINGS";
        case OnboardingStepName.EMAIL_TEMPLATES:
            return "EMAIL_TEMPLATES";
        case OnboardingStepName.PROCESSING_FEES:
            return "PROCESSING_FEES";
        case OnboardingStepName.CALENDAR:
            return "CALENDAR";
        case OnboardingStepName.SEMESTERS:
            return "SEMESTERS";
        case OnboardingStepName.PAYMENT_PLAN:
            return "PAYMENT_PLAN";
        case OnboardingStepName.CUSTOM_FIELDS_TEMPLATES:
            return "CUSTOM_FIELDS_TEMPLATES";
        case OnboardingStepName.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function onboardingStepNameToNumber(object) {
    switch (object) {
        case OnboardingStepName.ORG_OWNER_PROFILE:
            return 0;
        case OnboardingStepName.ORGANIZATION_SETTINGS:
            return 1;
        case OnboardingStepName.ORGANIZATION_KEYS:
            return 2;
        case OnboardingStepName.PAYMENTS:
            return 3;
        case OnboardingStepName.STAFF_MANAGEMENT:
            return 4;
        case OnboardingStepName.CAMPUS_MANAGEMENT:
            return 5;
        case OnboardingStepName.RESOURCE_ACCESS_SETTINGS:
            return 6;
        case OnboardingStepName.STUDENT_FIELDS:
            return 7;
        case OnboardingStepName.PARENT_FIELDS:
            return 8;
        case OnboardingStepName.TEACHER_FIELDS:
            return 9;
        case OnboardingStepName.STUDENT_UPLOAD:
            return 10;
        case OnboardingStepName.ONBOARDING_SETTINGS:
            return 11;
        case OnboardingStepName.EMAIL_TEMPLATES:
            return 12;
        case OnboardingStepName.PROCESSING_FEES:
            return 13;
        case OnboardingStepName.CALENDAR:
            return 14;
        case OnboardingStepName.SEMESTERS:
            return 15;
        case OnboardingStepName.PAYMENT_PLAN:
            return 16;
        case OnboardingStepName.CUSTOM_FIELDS_TEMPLATES:
            return 17;
        case OnboardingStepName.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseOnboardingStepData() {
    return { stepName: OnboardingStepName.ORG_OWNER_PROFILE, status: OnboardingStepStatus.ONGOING };
}
exports.OnboardingStepData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stepName !== OnboardingStepName.ORG_OWNER_PROFILE) {
            writer.uint32(8).int32(onboardingStepNameToNumber(message.stepName));
        }
        if (message.status !== OnboardingStepStatus.ONGOING) {
            writer.uint32(16).int32(onboardingStepStatusToNumber(message.status));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingStepData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.stepName = onboardingStepNameFromJSON(reader.int32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.status = onboardingStepStatusFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stepName: isSet(object.stepName)
                ? onboardingStepNameFromJSON(object.stepName)
                : OnboardingStepName.ORG_OWNER_PROFILE,
            status: isSet(object.status) ? onboardingStepStatusFromJSON(object.status) : OnboardingStepStatus.ONGOING,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stepName !== OnboardingStepName.ORG_OWNER_PROFILE) {
            obj.stepName = onboardingStepNameToJSON(message.stepName);
        }
        if (message.status !== OnboardingStepStatus.ONGOING) {
            obj.status = onboardingStepStatusToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingStepData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOnboardingStepData();
        message.stepName = object.stepName ?? OnboardingStepName.ORG_OWNER_PROFILE;
        message.status = object.status ?? OnboardingStepStatus.ONGOING;
        return message;
    },
};
function createBaseOnboardingStepsStatus() {
    return { id: undefined, organizationId: undefined, steps: [], allStepsDone: false };
}
exports.OnboardingStepsStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        for (const v of message.steps) {
            exports.OnboardingStepData.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.allStepsDone !== false) {
            writer.uint32(32).bool(message.allStepsDone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingStepsStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.steps.push(exports.OnboardingStepData.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.allStepsDone = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            steps: globalThis.Array.isArray(object?.steps)
                ? object.steps.map((e) => exports.OnboardingStepData.fromJSON(e))
                : [],
            allStepsDone: isSet(object.allStepsDone) ? globalThis.Boolean(object.allStepsDone) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.steps?.length) {
            obj.steps = message.steps.map((e) => exports.OnboardingStepData.toJSON(e));
        }
        if (message.allStepsDone !== false) {
            obj.allStepsDone = message.allStepsDone;
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingStepsStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOnboardingStepsStatus();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.steps = object.steps?.map((e) => exports.OnboardingStepData.fromPartial(e)) || [];
        message.allStepsDone = object.allStepsDone ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
