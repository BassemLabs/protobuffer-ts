"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/organization.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentInformation = exports.SchoolYear = exports.Organization = exports.Currency = exports.protobufPackage = void 0;
exports.currencyFromJSON = currencyFromJSON;
exports.currencyToJSON = currencyToJSON;
exports.currencyToNumber = currencyToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const onboarding_settings_1 = require("./onboarding_settings");
const organization_invoice_settings_1 = require("./organization_invoice_settings");
const organization_profile_settings_1 = require("./organization_profile_settings");
exports.protobufPackage = "organization_service";
var Currency;
(function (Currency) {
    Currency["USD"] = "USD";
    Currency["CAD"] = "CAD";
    Currency["UNRECOGNIZED"] = "UNRECOGNIZED";
})(Currency || (exports.Currency = Currency = {}));
function currencyFromJSON(object) {
    switch (object) {
        case 1:
        case "USD":
            return Currency.USD;
        case 2:
        case "CAD":
            return Currency.CAD;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Currency.UNRECOGNIZED;
    }
}
function currencyToJSON(object) {
    switch (object) {
        case Currency.USD:
            return "USD";
        case Currency.CAD:
            return "CAD";
        case Currency.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function currencyToNumber(object) {
    switch (object) {
        case Currency.USD:
            return 1;
        case Currency.CAD:
            return 2;
        case Currency.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseOrganization() {
    return {
        id: undefined,
        name: "",
        defaultDomain: "",
        domains: [],
        organizationProfileSettings: undefined,
        onboardingSettings: undefined,
        activeSchoolYear: undefined,
        comingSchoolYear: undefined,
        openedReregistrationForComingSchoolYear: false,
        countryCode: "",
        paymentInformation: undefined,
        invoiceSettings: undefined,
        loginId: "",
        mainAddress: "",
    };
}
exports.Organization = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.defaultDomain !== "") {
            writer.uint32(26).string(message.defaultDomain);
        }
        for (const v of message.domains) {
            writer.uint32(34).string(v);
        }
        if (message.organizationProfileSettings !== undefined) {
            organization_profile_settings_1.OrganizationProfileSettings.encode(message.organizationProfileSettings, writer.uint32(42).fork()).join();
        }
        if (message.onboardingSettings !== undefined) {
            onboarding_settings_1.OnboardingSettings.encode(message.onboardingSettings, writer.uint32(50).fork()).join();
        }
        if (message.activeSchoolYear !== undefined) {
            exports.SchoolYear.encode(message.activeSchoolYear, writer.uint32(58).fork()).join();
        }
        if (message.comingSchoolYear !== undefined) {
            exports.SchoolYear.encode(message.comingSchoolYear, writer.uint32(66).fork()).join();
        }
        if (message.openedReregistrationForComingSchoolYear !== false) {
            writer.uint32(72).bool(message.openedReregistrationForComingSchoolYear);
        }
        if (message.countryCode !== undefined && message.countryCode !== "") {
            writer.uint32(82).string(message.countryCode);
        }
        if (message.paymentInformation !== undefined) {
            exports.PaymentInformation.encode(message.paymentInformation, writer.uint32(90).fork()).join();
        }
        if (message.invoiceSettings !== undefined) {
            organization_invoice_settings_1.InvoiceSettings.encode(message.invoiceSettings, writer.uint32(98).fork()).join();
        }
        if (message.loginId !== "") {
            writer.uint32(106).string(message.loginId);
        }
        if (message.mainAddress !== "") {
            writer.uint32(114).string(message.mainAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.defaultDomain = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.domains.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.organizationProfileSettings = organization_profile_settings_1.OrganizationProfileSettings.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.onboardingSettings = onboarding_settings_1.OnboardingSettings.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.activeSchoolYear = exports.SchoolYear.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.comingSchoolYear = exports.SchoolYear.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.openedReregistrationForComingSchoolYear = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.countryCode = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.paymentInformation = exports.PaymentInformation.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.invoiceSettings = organization_invoice_settings_1.InvoiceSettings.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.loginId = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.mainAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            defaultDomain: isSet(object.defaultDomain) ? globalThis.String(object.defaultDomain) : "",
            domains: globalThis.Array.isArray(object?.domains) ? object.domains.map((e) => globalThis.String(e)) : [],
            organizationProfileSettings: isSet(object.organizationProfileSettings)
                ? organization_profile_settings_1.OrganizationProfileSettings.fromJSON(object.organizationProfileSettings)
                : undefined,
            onboardingSettings: isSet(object.onboardingSettings)
                ? onboarding_settings_1.OnboardingSettings.fromJSON(object.onboardingSettings)
                : undefined,
            activeSchoolYear: isSet(object.activeSchoolYear) ? exports.SchoolYear.fromJSON(object.activeSchoolYear) : undefined,
            comingSchoolYear: isSet(object.comingSchoolYear) ? exports.SchoolYear.fromJSON(object.comingSchoolYear) : undefined,
            openedReregistrationForComingSchoolYear: isSet(object.openedReregistrationForComingSchoolYear)
                ? globalThis.Boolean(object.openedReregistrationForComingSchoolYear)
                : false,
            countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
            paymentInformation: isSet(object.paymentInformation)
                ? exports.PaymentInformation.fromJSON(object.paymentInformation)
                : undefined,
            invoiceSettings: isSet(object.invoiceSettings) ? organization_invoice_settings_1.InvoiceSettings.fromJSON(object.invoiceSettings) : undefined,
            loginId: isSet(object.loginId) ? globalThis.String(object.loginId) : "",
            mainAddress: isSet(object.mainAddress) ? globalThis.String(object.mainAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.defaultDomain !== "") {
            obj.defaultDomain = message.defaultDomain;
        }
        if (message.domains?.length) {
            obj.domains = message.domains;
        }
        if (message.organizationProfileSettings !== undefined) {
            obj.organizationProfileSettings = organization_profile_settings_1.OrganizationProfileSettings.toJSON(message.organizationProfileSettings);
        }
        if (message.onboardingSettings !== undefined) {
            obj.onboardingSettings = onboarding_settings_1.OnboardingSettings.toJSON(message.onboardingSettings);
        }
        if (message.activeSchoolYear !== undefined) {
            obj.activeSchoolYear = exports.SchoolYear.toJSON(message.activeSchoolYear);
        }
        if (message.comingSchoolYear !== undefined) {
            obj.comingSchoolYear = exports.SchoolYear.toJSON(message.comingSchoolYear);
        }
        if (message.openedReregistrationForComingSchoolYear !== false) {
            obj.openedReregistrationForComingSchoolYear = message.openedReregistrationForComingSchoolYear;
        }
        if (message.countryCode !== undefined && message.countryCode !== "") {
            obj.countryCode = message.countryCode;
        }
        if (message.paymentInformation !== undefined) {
            obj.paymentInformation = exports.PaymentInformation.toJSON(message.paymentInformation);
        }
        if (message.invoiceSettings !== undefined) {
            obj.invoiceSettings = organization_invoice_settings_1.InvoiceSettings.toJSON(message.invoiceSettings);
        }
        if (message.loginId !== "") {
            obj.loginId = message.loginId;
        }
        if (message.mainAddress !== "") {
            obj.mainAddress = message.mainAddress;
        }
        return obj;
    },
    create(base) {
        return exports.Organization.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganization();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.defaultDomain = object.defaultDomain ?? "";
        message.domains = object.domains?.map((e) => e) || [];
        message.organizationProfileSettings =
            (object.organizationProfileSettings !== undefined && object.organizationProfileSettings !== null)
                ? organization_profile_settings_1.OrganizationProfileSettings.fromPartial(object.organizationProfileSettings)
                : undefined;
        message.onboardingSettings = (object.onboardingSettings !== undefined && object.onboardingSettings !== null)
            ? onboarding_settings_1.OnboardingSettings.fromPartial(object.onboardingSettings)
            : undefined;
        message.activeSchoolYear = (object.activeSchoolYear !== undefined && object.activeSchoolYear !== null)
            ? exports.SchoolYear.fromPartial(object.activeSchoolYear)
            : undefined;
        message.comingSchoolYear = (object.comingSchoolYear !== undefined && object.comingSchoolYear !== null)
            ? exports.SchoolYear.fromPartial(object.comingSchoolYear)
            : undefined;
        message.openedReregistrationForComingSchoolYear = object.openedReregistrationForComingSchoolYear ?? false;
        message.countryCode = object.countryCode ?? "";
        message.paymentInformation = (object.paymentInformation !== undefined && object.paymentInformation !== null)
            ? exports.PaymentInformation.fromPartial(object.paymentInformation)
            : undefined;
        message.invoiceSettings = (object.invoiceSettings !== undefined && object.invoiceSettings !== null)
            ? organization_invoice_settings_1.InvoiceSettings.fromPartial(object.invoiceSettings)
            : undefined;
        message.loginId = object.loginId ?? "";
        message.mainAddress = object.mainAddress ?? "";
        return message;
    },
};
function createBaseSchoolYear() {
    return {
        id: undefined,
        organizationId: undefined,
        name: "",
        startDate: undefined,
        endDate: undefined,
        isOpenForRegistration: false,
    };
}
exports.SchoolYear = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
        }
        if (message.isOpenForRegistration !== undefined && message.isOpenForRegistration !== false) {
            writer.uint32(48).bool(message.isOpenForRegistration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSchoolYear();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.isOpenForRegistration = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
            isOpenForRegistration: isSet(object.isOpenForRegistration)
                ? globalThis.Boolean(object.isOpenForRegistration)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        if (message.isOpenForRegistration !== undefined && message.isOpenForRegistration !== false) {
            obj.isOpenForRegistration = message.isOpenForRegistration;
        }
        return obj;
    },
    create(base) {
        return exports.SchoolYear.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSchoolYear();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.name = object.name ?? "";
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        message.isOpenForRegistration = object.isOpenForRegistration ?? false;
        return message;
    },
};
function createBasePaymentInformation() {
    return {
        stripeAccountId: "",
        accountCurrency: Currency.USD,
        stripePayoutsEnabled: false,
        stripeDetailsSubmitted: false,
        stripeChargesEnabled: false,
    };
}
exports.PaymentInformation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stripeAccountId !== undefined && message.stripeAccountId !== "") {
            writer.uint32(10).string(message.stripeAccountId);
        }
        if (message.accountCurrency !== undefined && message.accountCurrency !== Currency.USD) {
            writer.uint32(16).int32(currencyToNumber(message.accountCurrency));
        }
        if (message.stripePayoutsEnabled !== false) {
            writer.uint32(24).bool(message.stripePayoutsEnabled);
        }
        if (message.stripeDetailsSubmitted !== false) {
            writer.uint32(32).bool(message.stripeDetailsSubmitted);
        }
        if (message.stripeChargesEnabled !== false) {
            writer.uint32(40).bool(message.stripeChargesEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentInformation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stripeAccountId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.accountCurrency = currencyFromJSON(reader.int32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.stripePayoutsEnabled = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.stripeDetailsSubmitted = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.stripeChargesEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stripeAccountId: isSet(object.stripeAccountId) ? globalThis.String(object.stripeAccountId) : "",
            accountCurrency: isSet(object.accountCurrency) ? currencyFromJSON(object.accountCurrency) : Currency.USD,
            stripePayoutsEnabled: isSet(object.stripePayoutsEnabled)
                ? globalThis.Boolean(object.stripePayoutsEnabled)
                : false,
            stripeDetailsSubmitted: isSet(object.stripeDetailsSubmitted)
                ? globalThis.Boolean(object.stripeDetailsSubmitted)
                : false,
            stripeChargesEnabled: isSet(object.stripeChargesEnabled)
                ? globalThis.Boolean(object.stripeChargesEnabled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stripeAccountId !== undefined && message.stripeAccountId !== "") {
            obj.stripeAccountId = message.stripeAccountId;
        }
        if (message.accountCurrency !== undefined && message.accountCurrency !== Currency.USD) {
            obj.accountCurrency = currencyToJSON(message.accountCurrency);
        }
        if (message.stripePayoutsEnabled !== false) {
            obj.stripePayoutsEnabled = message.stripePayoutsEnabled;
        }
        if (message.stripeDetailsSubmitted !== false) {
            obj.stripeDetailsSubmitted = message.stripeDetailsSubmitted;
        }
        if (message.stripeChargesEnabled !== false) {
            obj.stripeChargesEnabled = message.stripeChargesEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.PaymentInformation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentInformation();
        message.stripeAccountId = object.stripeAccountId ?? "";
        message.accountCurrency = object.accountCurrency ?? Currency.USD;
        message.stripePayoutsEnabled = object.stripePayoutsEnabled ?? false;
        message.stripeDetailsSubmitted = object.stripeDetailsSubmitted ?? false;
        message.stripeChargesEnabled = object.stripeChargesEnabled ?? false;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
