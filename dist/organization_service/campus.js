"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/campus.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Campus = exports.Address = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const aws_file_1 = require("../utils/aws_file");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "organization_service";
function createBaseAddress() {
    return { street: "", streetNumber: "", city: "", region: "", addressCode: "", country: "" };
}
exports.Address = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.street !== "") {
            writer.uint32(10).string(message.street);
        }
        if (message.streetNumber !== "") {
            writer.uint32(18).string(message.streetNumber);
        }
        if (message.city !== "") {
            writer.uint32(26).string(message.city);
        }
        if (message.region !== "") {
            writer.uint32(34).string(message.region);
        }
        if (message.addressCode !== "") {
            writer.uint32(42).string(message.addressCode);
        }
        if (message.country !== "") {
            writer.uint32(50).string(message.country);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.street = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.streetNumber = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.city = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.addressCode = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.country = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            street: isSet(object.street) ? globalThis.String(object.street) : "",
            streetNumber: isSet(object.streetNumber) ? globalThis.String(object.streetNumber) : "",
            city: isSet(object.city) ? globalThis.String(object.city) : "",
            region: isSet(object.region) ? globalThis.String(object.region) : "",
            addressCode: isSet(object.addressCode) ? globalThis.String(object.addressCode) : "",
            country: isSet(object.country) ? globalThis.String(object.country) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.street !== "") {
            obj.street = message.street;
        }
        if (message.streetNumber !== "") {
            obj.streetNumber = message.streetNumber;
        }
        if (message.city !== "") {
            obj.city = message.city;
        }
        if (message.region !== "") {
            obj.region = message.region;
        }
        if (message.addressCode !== "") {
            obj.addressCode = message.addressCode;
        }
        if (message.country !== "") {
            obj.country = message.country;
        }
        return obj;
    },
    create(base) {
        return exports.Address.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddress();
        message.street = object.street ?? "";
        message.streetNumber = object.streetNumber ?? "";
        message.city = object.city ?? "";
        message.region = object.region ?? "";
        message.addressCode = object.addressCode ?? "";
        message.country = object.country ?? "";
        return message;
    },
};
function createBaseCampus() {
    return {
        id: undefined,
        organization: undefined,
        name: "",
        address: undefined,
        email: "",
        phone: "",
        logo: undefined,
        principalId: undefined,
        supervisorId: undefined,
        archived: false,
    };
}
exports.Campus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.address !== undefined) {
            exports.Address.encode(message.address, writer.uint32(34).fork()).join();
        }
        if (message.email !== "") {
            writer.uint32(42).string(message.email);
        }
        if (message.phone !== "") {
            writer.uint32(50).string(message.phone);
        }
        if (message.logo !== undefined) {
            aws_file_1.AWSFile.encode(message.logo, writer.uint32(58).fork()).join();
        }
        if (message.principalId !== undefined) {
            object_id_1.ObjectId.encode(message.principalId, writer.uint32(66).fork()).join();
        }
        if (message.supervisorId !== undefined) {
            object_id_1.ObjectId.encode(message.supervisorId, writer.uint32(74).fork()).join();
        }
        if (message.archived !== false) {
            writer.uint32(80).bool(message.archived);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCampus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.address = exports.Address.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.logo = aws_file_1.AWSFile.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.principalId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.supervisorId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.archived = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            address: isSet(object.address) ? exports.Address.fromJSON(object.address) : undefined,
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            logo: isSet(object.logo) ? aws_file_1.AWSFile.fromJSON(object.logo) : undefined,
            principalId: isSet(object.principalId) ? object_id_1.ObjectId.fromJSON(object.principalId) : undefined,
            supervisorId: isSet(object.supervisorId) ? object_id_1.ObjectId.fromJSON(object.supervisorId) : undefined,
            archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.address !== undefined) {
            obj.address = exports.Address.toJSON(message.address);
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.logo !== undefined) {
            obj.logo = aws_file_1.AWSFile.toJSON(message.logo);
        }
        if (message.principalId !== undefined) {
            obj.principalId = object_id_1.ObjectId.toJSON(message.principalId);
        }
        if (message.supervisorId !== undefined) {
            obj.supervisorId = object_id_1.ObjectId.toJSON(message.supervisorId);
        }
        if (message.archived !== false) {
            obj.archived = message.archived;
        }
        return obj;
    },
    create(base) {
        return exports.Campus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCampus();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.name = object.name ?? "";
        message.address = (object.address !== undefined && object.address !== null)
            ? exports.Address.fromPartial(object.address)
            : undefined;
        message.email = object.email ?? "";
        message.phone = object.phone ?? "";
        message.logo = (object.logo !== undefined && object.logo !== null) ? aws_file_1.AWSFile.fromPartial(object.logo) : undefined;
        message.principalId = (object.principalId !== undefined && object.principalId !== null)
            ? object_id_1.ObjectId.fromPartial(object.principalId)
            : undefined;
        message.supervisorId = (object.supervisorId !== undefined && object.supervisorId !== null)
            ? object_id_1.ObjectId.fromPartial(object.supervisorId)
            : undefined;
        message.archived = object.archived ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
