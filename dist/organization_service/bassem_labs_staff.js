"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/bassem_labs_staff.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.BassemLabsStaff = exports.StaffStatus = exports.protobufPackage = void 0;
exports.staffStatusFromJSON = staffStatusFromJSON;
exports.staffStatusToJSON = staffStatusToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "organization_service";
var StaffStatus;
(function (StaffStatus) {
    StaffStatus[StaffStatus["ACTIVE"] = 0] = "ACTIVE";
    StaffStatus[StaffStatus["INACTIVE"] = 1] = "INACTIVE";
    StaffStatus[StaffStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StaffStatus || (exports.StaffStatus = StaffStatus = {}));
function staffStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTIVE":
            return StaffStatus.ACTIVE;
        case 1:
        case "INACTIVE":
            return StaffStatus.INACTIVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StaffStatus.UNRECOGNIZED;
    }
}
function staffStatusToJSON(object) {
    switch (object) {
        case StaffStatus.ACTIVE:
            return "ACTIVE";
        case StaffStatus.INACTIVE:
            return "INACTIVE";
        case StaffStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseBassemLabsStaff() {
    return {
        id: undefined,
        status: 0,
        username: "",
        firstName: "",
        lastName: "",
        gender: "",
        email: "",
        personalEmail: "",
        dateOfBirth: undefined,
        phoneNumber: "",
    };
}
exports.BassemLabsStaff = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        if (message.firstName !== "") {
            writer.uint32(34).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(42).string(message.lastName);
        }
        if (message.gender !== "") {
            writer.uint32(50).string(message.gender);
        }
        if (message.email !== "") {
            writer.uint32(58).string(message.email);
        }
        if (message.personalEmail !== "") {
            writer.uint32(66).string(message.personalEmail);
        }
        if (message.dateOfBirth !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(74).fork()).join();
        }
        if (message.phoneNumber !== "") {
            writer.uint32(82).string(message.phoneNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBassemLabsStaff();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.gender = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.personalEmail = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.dateOfBirth = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.phoneNumber = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            status: isSet(object.status) ? staffStatusFromJSON(object.status) : 0,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            personalEmail: isSet(object.personalEmail) ? globalThis.String(object.personalEmail) : "",
            dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
            phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.status !== 0) {
            obj.status = staffStatusToJSON(message.status);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.gender !== "") {
            obj.gender = message.gender;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.personalEmail !== "") {
            obj.personalEmail = message.personalEmail;
        }
        if (message.dateOfBirth !== undefined) {
            obj.dateOfBirth = message.dateOfBirth.toISOString();
        }
        if (message.phoneNumber !== "") {
            obj.phoneNumber = message.phoneNumber;
        }
        return obj;
    },
    create(base) {
        return exports.BassemLabsStaff.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBassemLabsStaff();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.status = object.status ?? 0;
        message.username = object.username ?? "";
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.gender = object.gender ?? "";
        message.email = object.email ?? "";
        message.personalEmail = object.personalEmail ?? "";
        message.dateOfBirth = object.dateOfBirth ?? undefined;
        message.phoneNumber = object.phoneNumber ?? "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
