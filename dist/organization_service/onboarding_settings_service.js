"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/onboarding_settings_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateReregistrationFeeRequest_ReregistrationFeesEntry = exports.UpdateReregistrationFeeRequest = exports.UpdateRegistrationFeeRequest_RegistrationFeesEntry = exports.UpdateRegistrationFeeRequest = exports.UpdateEmailTemplatesRequest = exports.UpdateWaitlistFeeRequest = exports.RemoveSchoolHandbookFileRequest = exports.AddSchoolHandbookFileRequest = exports.UpdateEnrollmentConfigurationRequest = exports.GetOnboardingSettingsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const onboarding_settings_1 = require("./onboarding_settings");
exports.protobufPackage = "organization_service";
function createBaseGetOnboardingSettingsRequest() {
    return { context: undefined, organizationId: undefined };
}
exports.GetOnboardingSettingsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOnboardingSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        return obj;
    },
    create(base) {
        return exports.GetOnboardingSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOnboardingSettingsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        return message;
    },
};
function createBaseUpdateEnrollmentConfigurationRequest() {
    return {
        context: undefined,
        organizationId: undefined,
        hasInterviewForNewcomers: false,
        enableGroupApprovalSystem: false,
    };
}
exports.UpdateEnrollmentConfigurationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.hasInterviewForNewcomers !== false) {
            writer.uint32(24).bool(message.hasInterviewForNewcomers);
        }
        if (message.enableGroupApprovalSystem !== false) {
            writer.uint32(32).bool(message.enableGroupApprovalSystem);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEnrollmentConfigurationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hasInterviewForNewcomers = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.enableGroupApprovalSystem = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            hasInterviewForNewcomers: isSet(object.hasInterviewForNewcomers)
                ? globalThis.Boolean(object.hasInterviewForNewcomers)
                : false,
            enableGroupApprovalSystem: isSet(object.enableGroupApprovalSystem)
                ? globalThis.Boolean(object.enableGroupApprovalSystem)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.hasInterviewForNewcomers !== false) {
            obj.hasInterviewForNewcomers = message.hasInterviewForNewcomers;
        }
        if (message.enableGroupApprovalSystem !== false) {
            obj.enableGroupApprovalSystem = message.enableGroupApprovalSystem;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEnrollmentConfigurationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEnrollmentConfigurationRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.hasInterviewForNewcomers = object.hasInterviewForNewcomers ?? false;
        message.enableGroupApprovalSystem = object.enableGroupApprovalSystem ?? false;
        return message;
    },
};
function createBaseAddSchoolHandbookFileRequest() {
    return { context: undefined, organizationId: undefined, fileName: "", awsS3FileLocation: "" };
}
exports.AddSchoolHandbookFileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.fileName !== "") {
            writer.uint32(26).string(message.fileName);
        }
        if (message.awsS3FileLocation !== "") {
            writer.uint32(34).string(message.awsS3FileLocation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSchoolHandbookFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.awsS3FileLocation = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
            awsS3FileLocation: isSet(object.awsS3FileLocation) ? globalThis.String(object.awsS3FileLocation) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        if (message.awsS3FileLocation !== "") {
            obj.awsS3FileLocation = message.awsS3FileLocation;
        }
        return obj;
    },
    create(base) {
        return exports.AddSchoolHandbookFileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSchoolHandbookFileRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.fileName = object.fileName ?? "";
        message.awsS3FileLocation = object.awsS3FileLocation ?? "";
        return message;
    },
};
function createBaseRemoveSchoolHandbookFileRequest() {
    return { context: undefined, organizationId: undefined, fileIndex: 0 };
}
exports.RemoveSchoolHandbookFileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.fileIndex !== 0) {
            writer.uint32(24).uint32(message.fileIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSchoolHandbookFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.fileIndex = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            fileIndex: isSet(object.fileIndex) ? globalThis.Number(object.fileIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.fileIndex !== 0) {
            obj.fileIndex = Math.round(message.fileIndex);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSchoolHandbookFileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSchoolHandbookFileRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.fileIndex = object.fileIndex ?? 0;
        return message;
    },
};
function createBaseUpdateWaitlistFeeRequest() {
    return { context: undefined, organizationId: undefined, waitlistFee: 0 };
}
exports.UpdateWaitlistFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.waitlistFee !== 0) {
            writer.uint32(29).float(message.waitlistFee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateWaitlistFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.waitlistFee = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            waitlistFee: isSet(object.waitlistFee) ? globalThis.Number(object.waitlistFee) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.waitlistFee !== 0) {
            obj.waitlistFee = message.waitlistFee;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateWaitlistFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateWaitlistFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.waitlistFee = object.waitlistFee ?? 0;
        return message;
    },
};
function createBaseUpdateEmailTemplatesRequest() {
    return {
        context: undefined,
        organizationId: undefined,
        interviewEmailTemplate: "",
        postInterviewEmailTemplate: "",
        rejectionEmailTemplate: "",
        approvalEmailTemplate: "",
        fieldGroupRejectionEmailTemplate: "",
        withdrawEmailTemplate: "",
        moveStudentAdmissionYearEmailTemplate: "",
        reregistrationInvitationEmailTemplate: "",
    };
}
exports.UpdateEmailTemplatesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        if (message.interviewEmailTemplate !== undefined && message.interviewEmailTemplate !== "") {
            writer.uint32(26).string(message.interviewEmailTemplate);
        }
        if (message.postInterviewEmailTemplate !== undefined && message.postInterviewEmailTemplate !== "") {
            writer.uint32(34).string(message.postInterviewEmailTemplate);
        }
        if (message.rejectionEmailTemplate !== "") {
            writer.uint32(42).string(message.rejectionEmailTemplate);
        }
        if (message.approvalEmailTemplate !== "") {
            writer.uint32(50).string(message.approvalEmailTemplate);
        }
        if (message.fieldGroupRejectionEmailTemplate !== "") {
            writer.uint32(58).string(message.fieldGroupRejectionEmailTemplate);
        }
        if (message.withdrawEmailTemplate !== "") {
            writer.uint32(66).string(message.withdrawEmailTemplate);
        }
        if (message.moveStudentAdmissionYearEmailTemplate !== "") {
            writer.uint32(74).string(message.moveStudentAdmissionYearEmailTemplate);
        }
        if (message.reregistrationInvitationEmailTemplate !== "") {
            writer.uint32(82).string(message.reregistrationInvitationEmailTemplate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailTemplatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.interviewEmailTemplate = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.postInterviewEmailTemplate = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.rejectionEmailTemplate = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.approvalEmailTemplate = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.fieldGroupRejectionEmailTemplate = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.withdrawEmailTemplate = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.moveStudentAdmissionYearEmailTemplate = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.reregistrationInvitationEmailTemplate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            interviewEmailTemplate: isSet(object.interviewEmailTemplate)
                ? globalThis.String(object.interviewEmailTemplate)
                : "",
            postInterviewEmailTemplate: isSet(object.postInterviewEmailTemplate)
                ? globalThis.String(object.postInterviewEmailTemplate)
                : "",
            rejectionEmailTemplate: isSet(object.rejectionEmailTemplate)
                ? globalThis.String(object.rejectionEmailTemplate)
                : "",
            approvalEmailTemplate: isSet(object.approvalEmailTemplate) ? globalThis.String(object.approvalEmailTemplate) : "",
            fieldGroupRejectionEmailTemplate: isSet(object.fieldGroupRejectionEmailTemplate)
                ? globalThis.String(object.fieldGroupRejectionEmailTemplate)
                : "",
            withdrawEmailTemplate: isSet(object.withdrawEmailTemplate) ? globalThis.String(object.withdrawEmailTemplate) : "",
            moveStudentAdmissionYearEmailTemplate: isSet(object.moveStudentAdmissionYearEmailTemplate)
                ? globalThis.String(object.moveStudentAdmissionYearEmailTemplate)
                : "",
            reregistrationInvitationEmailTemplate: isSet(object.reregistrationInvitationEmailTemplate)
                ? globalThis.String(object.reregistrationInvitationEmailTemplate)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.interviewEmailTemplate !== undefined && message.interviewEmailTemplate !== "") {
            obj.interviewEmailTemplate = message.interviewEmailTemplate;
        }
        if (message.postInterviewEmailTemplate !== undefined && message.postInterviewEmailTemplate !== "") {
            obj.postInterviewEmailTemplate = message.postInterviewEmailTemplate;
        }
        if (message.rejectionEmailTemplate !== "") {
            obj.rejectionEmailTemplate = message.rejectionEmailTemplate;
        }
        if (message.approvalEmailTemplate !== "") {
            obj.approvalEmailTemplate = message.approvalEmailTemplate;
        }
        if (message.fieldGroupRejectionEmailTemplate !== "") {
            obj.fieldGroupRejectionEmailTemplate = message.fieldGroupRejectionEmailTemplate;
        }
        if (message.withdrawEmailTemplate !== "") {
            obj.withdrawEmailTemplate = message.withdrawEmailTemplate;
        }
        if (message.moveStudentAdmissionYearEmailTemplate !== "") {
            obj.moveStudentAdmissionYearEmailTemplate = message.moveStudentAdmissionYearEmailTemplate;
        }
        if (message.reregistrationInvitationEmailTemplate !== "") {
            obj.reregistrationInvitationEmailTemplate = message.reregistrationInvitationEmailTemplate;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailTemplatesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailTemplatesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.interviewEmailTemplate = object.interviewEmailTemplate ?? "";
        message.postInterviewEmailTemplate = object.postInterviewEmailTemplate ?? "";
        message.rejectionEmailTemplate = object.rejectionEmailTemplate ?? "";
        message.approvalEmailTemplate = object.approvalEmailTemplate ?? "";
        message.fieldGroupRejectionEmailTemplate = object.fieldGroupRejectionEmailTemplate ?? "";
        message.withdrawEmailTemplate = object.withdrawEmailTemplate ?? "";
        message.moveStudentAdmissionYearEmailTemplate = object.moveStudentAdmissionYearEmailTemplate ?? "";
        message.reregistrationInvitationEmailTemplate = object.reregistrationInvitationEmailTemplate ?? "";
        return message;
    },
};
function createBaseUpdateRegistrationFeeRequest() {
    return { context: undefined, organizationId: undefined, registrationFees: {} };
}
exports.UpdateRegistrationFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        Object.entries(message.registrationFees).forEach(([key, value]) => {
            exports.UpdateRegistrationFeeRequest_RegistrationFeesEntry.encode({ key: key, value }, writer.uint32(26).fork())
                .join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRegistrationFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.UpdateRegistrationFeeRequest_RegistrationFeesEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.registrationFees[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            registrationFees: isObject(object.registrationFees)
                ? Object.entries(object.registrationFees).reduce((acc, [key, value]) => {
                    acc[key] = onboarding_settings_1.ItemizedFee.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.registrationFees) {
            const entries = Object.entries(message.registrationFees);
            if (entries.length > 0) {
                obj.registrationFees = {};
                entries.forEach(([k, v]) => {
                    obj.registrationFees[k] = onboarding_settings_1.ItemizedFee.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.UpdateRegistrationFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateRegistrationFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.registrationFees = Object.entries(object.registrationFees ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = onboarding_settings_1.ItemizedFee.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseUpdateRegistrationFeeRequest_RegistrationFeesEntry() {
    return { key: "", value: undefined };
}
exports.UpdateRegistrationFeeRequest_RegistrationFeesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            onboarding_settings_1.ItemizedFee.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRegistrationFeeRequest_RegistrationFeesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = onboarding_settings_1.ItemizedFee.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? onboarding_settings_1.ItemizedFee.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = onboarding_settings_1.ItemizedFee.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateRegistrationFeeRequest_RegistrationFeesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateRegistrationFeeRequest_RegistrationFeesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? onboarding_settings_1.ItemizedFee.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseUpdateReregistrationFeeRequest() {
    return { context: undefined, organizationId: undefined, reregistrationFees: {} };
}
exports.UpdateReregistrationFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.organizationId !== undefined) {
            object_id_1.ObjectId.encode(message.organizationId, writer.uint32(18).fork()).join();
        }
        Object.entries(message.reregistrationFees).forEach(([key, value]) => {
            exports.UpdateReregistrationFeeRequest_ReregistrationFeesEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateReregistrationFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.UpdateReregistrationFeeRequest_ReregistrationFeesEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.reregistrationFees[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            organizationId: isSet(object.organizationId) ? object_id_1.ObjectId.fromJSON(object.organizationId) : undefined,
            reregistrationFees: isObject(object.reregistrationFees)
                ? Object.entries(object.reregistrationFees).reduce((acc, [key, value]) => {
                    acc[key] = onboarding_settings_1.ItemizedFee.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.organizationId !== undefined) {
            obj.organizationId = object_id_1.ObjectId.toJSON(message.organizationId);
        }
        if (message.reregistrationFees) {
            const entries = Object.entries(message.reregistrationFees);
            if (entries.length > 0) {
                obj.reregistrationFees = {};
                entries.forEach(([k, v]) => {
                    obj.reregistrationFees[k] = onboarding_settings_1.ItemizedFee.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.UpdateReregistrationFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateReregistrationFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.organizationId = (object.organizationId !== undefined && object.organizationId !== null)
            ? object_id_1.ObjectId.fromPartial(object.organizationId)
            : undefined;
        message.reregistrationFees = Object.entries(object.reregistrationFees ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = onboarding_settings_1.ItemizedFee.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseUpdateReregistrationFeeRequest_ReregistrationFeesEntry() {
    return { key: "", value: undefined };
}
exports.UpdateReregistrationFeeRequest_ReregistrationFeesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            onboarding_settings_1.ItemizedFee.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateReregistrationFeeRequest_ReregistrationFeesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = onboarding_settings_1.ItemizedFee.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? onboarding_settings_1.ItemizedFee.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = onboarding_settings_1.ItemizedFee.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateReregistrationFeeRequest_ReregistrationFeesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateReregistrationFeeRequest_ReregistrationFeesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? onboarding_settings_1.ItemizedFee.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
