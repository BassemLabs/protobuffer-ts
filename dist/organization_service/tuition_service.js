"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/tuition_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteTuitionDiscountResponse = exports.DeleteTuitionDiscountRequest = exports.UpdateTuitionDiscountRequest = exports.CreateTuitionDiscountRequest = exports.ListTuitionDiscountsResponse = exports.ListTuitionDiscountsRequest = exports.GetTuitionDiscountRequest = exports.DeleteAdditionalFeeResponse = exports.DeleteAdditionalFeeRequest = exports.UpdateAdditionalFeeRequest = exports.CreateAdditionalFeeRequest = exports.ListAdditionalFeesResponse = exports.ListAdditionalFeesRequest = exports.GetAdditionalFeeRequest = exports.DeleteTuitionRateResponse = exports.DeleteTuitionRateRequest = exports.UpsertTuitionRatesRequest = exports.GradeAmount = exports.ListTuitionRatesResponse = exports.ListTuitionRatesRequest = exports.GetTuitionRateRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const tuition_1 = require("./tuition");
exports.protobufPackage = "organization_service";
function createBaseGetTuitionRateRequest() {
    return { context: undefined, id: undefined };
}
exports.GetTuitionRateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTuitionRateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetTuitionRateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTuitionRateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseListTuitionRatesRequest() {
    return { context: undefined, schoolYear: undefined };
}
exports.ListTuitionRatesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTuitionRatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListTuitionRatesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListTuitionRatesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListTuitionRatesResponse() {
    return { rates: [] };
}
exports.ListTuitionRatesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.rates) {
            tuition_1.TuitionRate.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTuitionRatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rates.push(tuition_1.TuitionRate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rates: globalThis.Array.isArray(object?.rates) ? object.rates.map((e) => tuition_1.TuitionRate.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rates?.length) {
            obj.rates = message.rates.map((e) => tuition_1.TuitionRate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListTuitionRatesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListTuitionRatesResponse();
        message.rates = object.rates?.map((e) => tuition_1.TuitionRate.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGradeAmount() {
    return { grade: "", amount: 0 };
}
exports.GradeAmount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.grade !== "") {
            writer.uint32(10).string(message.grade);
        }
        if (message.amount !== 0) {
            writer.uint32(17).double(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGradeAmount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.GradeAmount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGradeAmount();
        message.grade = object.grade ?? "";
        message.amount = object.amount ?? 0;
        return message;
    },
};
function createBaseUpsertTuitionRatesRequest() {
    return { context: undefined, schoolYear: undefined, gradeAmounts: [] };
}
exports.UpsertTuitionRatesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        for (const v of message.gradeAmounts) {
            exports.GradeAmount.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpsertTuitionRatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.gradeAmounts.push(exports.GradeAmount.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            gradeAmounts: globalThis.Array.isArray(object?.gradeAmounts)
                ? object.gradeAmounts.map((e) => exports.GradeAmount.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.gradeAmounts?.length) {
            obj.gradeAmounts = message.gradeAmounts.map((e) => exports.GradeAmount.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpsertTuitionRatesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpsertTuitionRatesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.gradeAmounts = object.gradeAmounts?.map((e) => exports.GradeAmount.fromPartial(e)) || [];
        return message;
    },
};
function createBaseDeleteTuitionRateRequest() {
    return { context: undefined, id: undefined };
}
exports.DeleteTuitionRateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTuitionRateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteTuitionRateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTuitionRateRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseDeleteTuitionRateResponse() {
    return { success: false };
}
exports.DeleteTuitionRateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTuitionRateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteTuitionRateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTuitionRateResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseGetAdditionalFeeRequest() {
    return { context: undefined, id: undefined };
}
exports.GetAdditionalFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAdditionalFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetAdditionalFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAdditionalFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseListAdditionalFeesRequest() {
    return { context: undefined, schoolYear: undefined };
}
exports.ListAdditionalFeesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAdditionalFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListAdditionalFeesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAdditionalFeesRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListAdditionalFeesResponse() {
    return { fees: [] };
}
exports.ListAdditionalFeesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.fees) {
            tuition_1.AdditionalFee.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAdditionalFeesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fees.push(tuition_1.AdditionalFee.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fees: globalThis.Array.isArray(object?.fees) ? object.fees.map((e) => tuition_1.AdditionalFee.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fees?.length) {
            obj.fees = message.fees.map((e) => tuition_1.AdditionalFee.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListAdditionalFeesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAdditionalFeesResponse();
        message.fees = object.fees?.map((e) => tuition_1.AdditionalFee.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateAdditionalFeeRequest() {
    return { context: undefined, schoolYear: undefined, name: "", description: "", amount: 0, isOptional: false };
}
exports.CreateAdditionalFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.amount !== 0) {
            writer.uint32(41).double(message.amount);
        }
        if (message.isOptional !== false) {
            writer.uint32(48).bool(message.isOptional);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAdditionalFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.isOptional = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.isOptional !== false) {
            obj.isOptional = message.isOptional;
        }
        return obj;
    },
    create(base) {
        return exports.CreateAdditionalFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAdditionalFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.amount = object.amount ?? 0;
        message.isOptional = object.isOptional ?? false;
        return message;
    },
};
function createBaseUpdateAdditionalFeeRequest() {
    return { context: undefined, id: undefined, name: "", description: "", amount: 0, isOptional: false };
}
exports.UpdateAdditionalFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.amount !== 0) {
            writer.uint32(41).double(message.amount);
        }
        if (message.isOptional !== false) {
            writer.uint32(48).bool(message.isOptional);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAdditionalFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.isOptional = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.isOptional !== false) {
            obj.isOptional = message.isOptional;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAdditionalFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAdditionalFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.amount = object.amount ?? 0;
        message.isOptional = object.isOptional ?? false;
        return message;
    },
};
function createBaseDeleteAdditionalFeeRequest() {
    return { context: undefined, id: undefined };
}
exports.DeleteAdditionalFeeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteAdditionalFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteAdditionalFeeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteAdditionalFeeRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseDeleteAdditionalFeeResponse() {
    return { success: false };
}
exports.DeleteAdditionalFeeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteAdditionalFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteAdditionalFeeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteAdditionalFeeResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseGetTuitionDiscountRequest() {
    return { context: undefined, id: undefined };
}
exports.GetTuitionDiscountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTuitionDiscountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetTuitionDiscountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTuitionDiscountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseListTuitionDiscountsRequest() {
    return { context: undefined, schoolYear: undefined };
}
exports.ListTuitionDiscountsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTuitionDiscountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        return obj;
    },
    create(base) {
        return exports.ListTuitionDiscountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListTuitionDiscountsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        return message;
    },
};
function createBaseListTuitionDiscountsResponse() {
    return { discounts: [] };
}
exports.ListTuitionDiscountsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.discounts) {
            tuition_1.TuitionDiscount.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTuitionDiscountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.discounts.push(tuition_1.TuitionDiscount.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            discounts: globalThis.Array.isArray(object?.discounts)
                ? object.discounts.map((e) => tuition_1.TuitionDiscount.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.discounts?.length) {
            obj.discounts = message.discounts.map((e) => tuition_1.TuitionDiscount.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListTuitionDiscountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListTuitionDiscountsResponse();
        message.discounts = object.discounts?.map((e) => tuition_1.TuitionDiscount.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateTuitionDiscountRequest() {
    return {
        context: undefined,
        schoolYear: undefined,
        name: "",
        discountType: tuition_1.DiscountType.STANDARD,
        scope: tuition_1.DiscountScope.STUDENT_DISCOUNT,
        valueType: tuition_1.DiscountValueType.AMOUNT,
        value: 0,
        description: "",
    };
}
exports.CreateTuitionDiscountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.discountType !== tuition_1.DiscountType.STANDARD) {
            writer.uint32(32).int32((0, tuition_1.discountTypeToNumber)(message.discountType));
        }
        if (message.scope !== tuition_1.DiscountScope.STUDENT_DISCOUNT) {
            writer.uint32(40).int32((0, tuition_1.discountScopeToNumber)(message.scope));
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(48).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(57).double(message.value);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateTuitionDiscountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.discountType = (0, tuition_1.discountTypeFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.scope = (0, tuition_1.discountScopeFromJSON)(reader.int32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            discountType: isSet(object.discountType) ? (0, tuition_1.discountTypeFromJSON)(object.discountType) : tuition_1.DiscountType.STANDARD,
            scope: isSet(object.scope) ? (0, tuition_1.discountScopeFromJSON)(object.scope) : tuition_1.DiscountScope.STUDENT_DISCOUNT,
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.discountType !== tuition_1.DiscountType.STANDARD) {
            obj.discountType = (0, tuition_1.discountTypeToJSON)(message.discountType);
        }
        if (message.scope !== tuition_1.DiscountScope.STUDENT_DISCOUNT) {
            obj.scope = (0, tuition_1.discountScopeToJSON)(message.scope);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.CreateTuitionDiscountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateTuitionDiscountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.name = object.name ?? "";
        message.discountType = object.discountType ?? tuition_1.DiscountType.STANDARD;
        message.scope = object.scope ?? tuition_1.DiscountScope.STUDENT_DISCOUNT;
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseUpdateTuitionDiscountRequest() {
    return {
        context: undefined,
        id: undefined,
        name: "",
        discountType: tuition_1.DiscountType.STANDARD,
        scope: tuition_1.DiscountScope.STUDENT_DISCOUNT,
        valueType: tuition_1.DiscountValueType.AMOUNT,
        value: 0,
        description: "",
    };
}
exports.UpdateTuitionDiscountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.discountType !== tuition_1.DiscountType.STANDARD) {
            writer.uint32(32).int32((0, tuition_1.discountTypeToNumber)(message.discountType));
        }
        if (message.scope !== tuition_1.DiscountScope.STUDENT_DISCOUNT) {
            writer.uint32(40).int32((0, tuition_1.discountScopeToNumber)(message.scope));
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            writer.uint32(48).int32((0, tuition_1.discountValueTypeToNumber)(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(57).double(message.value);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateTuitionDiscountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.discountType = (0, tuition_1.discountTypeFromJSON)(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.scope = (0, tuition_1.discountScopeFromJSON)(reader.int32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.valueType = (0, tuition_1.discountValueTypeFromJSON)(reader.int32());
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            discountType: isSet(object.discountType) ? (0, tuition_1.discountTypeFromJSON)(object.discountType) : tuition_1.DiscountType.STANDARD,
            scope: isSet(object.scope) ? (0, tuition_1.discountScopeFromJSON)(object.scope) : tuition_1.DiscountScope.STUDENT_DISCOUNT,
            valueType: isSet(object.valueType) ? (0, tuition_1.discountValueTypeFromJSON)(object.valueType) : tuition_1.DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.discountType !== tuition_1.DiscountType.STANDARD) {
            obj.discountType = (0, tuition_1.discountTypeToJSON)(message.discountType);
        }
        if (message.scope !== tuition_1.DiscountScope.STUDENT_DISCOUNT) {
            obj.scope = (0, tuition_1.discountScopeToJSON)(message.scope);
        }
        if (message.valueType !== tuition_1.DiscountValueType.AMOUNT) {
            obj.valueType = (0, tuition_1.discountValueTypeToJSON)(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateTuitionDiscountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateTuitionDiscountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.name = object.name ?? "";
        message.discountType = object.discountType ?? tuition_1.DiscountType.STANDARD;
        message.scope = object.scope ?? tuition_1.DiscountScope.STUDENT_DISCOUNT;
        message.valueType = object.valueType ?? tuition_1.DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseDeleteTuitionDiscountRequest() {
    return { context: undefined, id: undefined };
}
exports.DeleteTuitionDiscountRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTuitionDiscountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteTuitionDiscountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTuitionDiscountRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseDeleteTuitionDiscountResponse() {
    return { success: false };
}
exports.DeleteTuitionDiscountResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTuitionDiscountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteTuitionDiscountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTuitionDiscountResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
