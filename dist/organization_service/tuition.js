"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/tuition.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.TuitionDiscount = exports.AdditionalFee = exports.TuitionRate = exports.DiscountValueType = exports.DiscountScope = exports.DiscountType = exports.protobufPackage = void 0;
exports.discountTypeFromJSON = discountTypeFromJSON;
exports.discountTypeToJSON = discountTypeToJSON;
exports.discountTypeToNumber = discountTypeToNumber;
exports.discountScopeFromJSON = discountScopeFromJSON;
exports.discountScopeToJSON = discountScopeToJSON;
exports.discountScopeToNumber = discountScopeToNumber;
exports.discountValueTypeFromJSON = discountValueTypeFromJSON;
exports.discountValueTypeToJSON = discountValueTypeToJSON;
exports.discountValueTypeToNumber = discountValueTypeToNumber;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_id_1 = require("../utils/object_id");
exports.protobufPackage = "organization_service";
var DiscountType;
(function (DiscountType) {
    /** STANDARD - subsidized, teacher, sibling, scholarship */
    DiscountType["STANDARD"] = "STANDARD";
    /** CUSTOM - financial aid */
    DiscountType["CUSTOM"] = "CUSTOM";
    DiscountType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(DiscountType || (exports.DiscountType = DiscountType = {}));
function discountTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "STANDARD":
            return DiscountType.STANDARD;
        case 2:
        case "CUSTOM":
            return DiscountType.CUSTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiscountType.UNRECOGNIZED;
    }
}
function discountTypeToJSON(object) {
    switch (object) {
        case DiscountType.STANDARD:
            return "STANDARD";
        case DiscountType.CUSTOM:
            return "CUSTOM";
        case DiscountType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function discountTypeToNumber(object) {
    switch (object) {
        case DiscountType.STANDARD:
            return 1;
        case DiscountType.CUSTOM:
            return 2;
        case DiscountType.UNRECOGNIZED:
        default:
            return -1;
    }
}
var DiscountScope;
(function (DiscountScope) {
    DiscountScope["STUDENT_DISCOUNT"] = "STUDENT_DISCOUNT";
    DiscountScope["FAMILY_DISCOUNT"] = "FAMILY_DISCOUNT";
    DiscountScope["UNRECOGNIZED"] = "UNRECOGNIZED";
})(DiscountScope || (exports.DiscountScope = DiscountScope = {}));
function discountScopeFromJSON(object) {
    switch (object) {
        case 1:
        case "STUDENT_DISCOUNT":
            return DiscountScope.STUDENT_DISCOUNT;
        case 2:
        case "FAMILY_DISCOUNT":
            return DiscountScope.FAMILY_DISCOUNT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiscountScope.UNRECOGNIZED;
    }
}
function discountScopeToJSON(object) {
    switch (object) {
        case DiscountScope.STUDENT_DISCOUNT:
            return "STUDENT_DISCOUNT";
        case DiscountScope.FAMILY_DISCOUNT:
            return "FAMILY_DISCOUNT";
        case DiscountScope.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function discountScopeToNumber(object) {
    switch (object) {
        case DiscountScope.STUDENT_DISCOUNT:
            return 1;
        case DiscountScope.FAMILY_DISCOUNT:
            return 2;
        case DiscountScope.UNRECOGNIZED:
        default:
            return -1;
    }
}
var DiscountValueType;
(function (DiscountValueType) {
    DiscountValueType["AMOUNT"] = "AMOUNT";
    DiscountValueType["PERCENTAGE"] = "PERCENTAGE";
    DiscountValueType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(DiscountValueType || (exports.DiscountValueType = DiscountValueType = {}));
function discountValueTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "AMOUNT":
            return DiscountValueType.AMOUNT;
        case 2:
        case "PERCENTAGE":
            return DiscountValueType.PERCENTAGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiscountValueType.UNRECOGNIZED;
    }
}
function discountValueTypeToJSON(object) {
    switch (object) {
        case DiscountValueType.AMOUNT:
            return "AMOUNT";
        case DiscountValueType.PERCENTAGE:
            return "PERCENTAGE";
        case DiscountValueType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function discountValueTypeToNumber(object) {
    switch (object) {
        case DiscountValueType.AMOUNT:
            return 1;
        case DiscountValueType.PERCENTAGE:
            return 2;
        case DiscountValueType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseTuitionRate() {
    return { id: undefined, organization: undefined, schoolYear: undefined, grade: "", amount: 0 };
}
exports.TuitionRate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.grade !== "") {
            writer.uint32(34).string(message.grade);
        }
        if (message.amount !== 0) {
            writer.uint32(41).double(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionRate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.grade = reader.string();
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            grade: isSet(object.grade) ? globalThis.String(object.grade) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.grade !== "") {
            obj.grade = message.grade;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.TuitionRate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionRate();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.grade = object.grade ?? "";
        message.amount = object.amount ?? 0;
        return message;
    },
};
function createBaseAdditionalFee() {
    return {
        id: undefined,
        organization: undefined,
        schoolYear: undefined,
        name: "",
        description: "",
        amount: 0,
        isOptional: false,
    };
}
exports.AdditionalFee = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.amount !== 0) {
            writer.uint32(49).double(message.amount);
        }
        if (message.isOptional !== false) {
            writer.uint32(56).bool(message.isOptional);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAdditionalFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 6:
                    if (tag !== 49) {
                        break;
                    }
                    message.amount = reader.double();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.isOptional = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        if (message.isOptional !== false) {
            obj.isOptional = message.isOptional;
        }
        return obj;
    },
    create(base) {
        return exports.AdditionalFee.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAdditionalFee();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.amount = object.amount ?? 0;
        message.isOptional = object.isOptional ?? false;
        return message;
    },
};
function createBaseTuitionDiscount() {
    return {
        id: undefined,
        organization: undefined,
        schoolYear: undefined,
        discountType: DiscountType.STANDARD,
        scope: DiscountScope.STUDENT_DISCOUNT,
        valueType: DiscountValueType.AMOUNT,
        value: 0,
        student: undefined,
        family: undefined,
        description: "",
    };
}
exports.TuitionDiscount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.organization !== undefined) {
            object_id_1.ObjectId.encode(message.organization, writer.uint32(18).fork()).join();
        }
        if (message.schoolYear !== undefined) {
            object_id_1.ObjectId.encode(message.schoolYear, writer.uint32(26).fork()).join();
        }
        if (message.discountType !== DiscountType.STANDARD) {
            writer.uint32(32).int32(discountTypeToNumber(message.discountType));
        }
        if (message.scope !== DiscountScope.STUDENT_DISCOUNT) {
            writer.uint32(40).int32(discountScopeToNumber(message.scope));
        }
        if (message.valueType !== DiscountValueType.AMOUNT) {
            writer.uint32(48).int32(discountValueTypeToNumber(message.valueType));
        }
        if (message.value !== 0) {
            writer.uint32(57).double(message.value);
        }
        if (message.student !== undefined) {
            object_id_1.ObjectId.encode(message.student, writer.uint32(66).fork()).join();
        }
        if (message.family !== undefined) {
            object_id_1.ObjectId.encode(message.family, writer.uint32(74).fork()).join();
        }
        if (message.description !== "") {
            writer.uint32(82).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTuitionDiscount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organization = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schoolYear = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.discountType = discountTypeFromJSON(reader.int32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.scope = discountScopeFromJSON(reader.int32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.valueType = discountValueTypeFromJSON(reader.int32());
                    continue;
                case 7:
                    if (tag !== 57) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.student = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.family = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            organization: isSet(object.organization) ? object_id_1.ObjectId.fromJSON(object.organization) : undefined,
            schoolYear: isSet(object.schoolYear) ? object_id_1.ObjectId.fromJSON(object.schoolYear) : undefined,
            discountType: isSet(object.discountType) ? discountTypeFromJSON(object.discountType) : DiscountType.STANDARD,
            scope: isSet(object.scope) ? discountScopeFromJSON(object.scope) : DiscountScope.STUDENT_DISCOUNT,
            valueType: isSet(object.valueType) ? discountValueTypeFromJSON(object.valueType) : DiscountValueType.AMOUNT,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            student: isSet(object.student) ? object_id_1.ObjectId.fromJSON(object.student) : undefined,
            family: isSet(object.family) ? object_id_1.ObjectId.fromJSON(object.family) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.organization !== undefined) {
            obj.organization = object_id_1.ObjectId.toJSON(message.organization);
        }
        if (message.schoolYear !== undefined) {
            obj.schoolYear = object_id_1.ObjectId.toJSON(message.schoolYear);
        }
        if (message.discountType !== DiscountType.STANDARD) {
            obj.discountType = discountTypeToJSON(message.discountType);
        }
        if (message.scope !== DiscountScope.STUDENT_DISCOUNT) {
            obj.scope = discountScopeToJSON(message.scope);
        }
        if (message.valueType !== DiscountValueType.AMOUNT) {
            obj.valueType = discountValueTypeToJSON(message.valueType);
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        if (message.student !== undefined) {
            obj.student = object_id_1.ObjectId.toJSON(message.student);
        }
        if (message.family !== undefined) {
            obj.family = object_id_1.ObjectId.toJSON(message.family);
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.TuitionDiscount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTuitionDiscount();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? object_id_1.ObjectId.fromPartial(object.organization)
            : undefined;
        message.schoolYear = (object.schoolYear !== undefined && object.schoolYear !== null)
            ? object_id_1.ObjectId.fromPartial(object.schoolYear)
            : undefined;
        message.discountType = object.discountType ?? DiscountType.STANDARD;
        message.scope = object.scope ?? DiscountScope.STUDENT_DISCOUNT;
        message.valueType = object.valueType ?? DiscountValueType.AMOUNT;
        message.value = object.value ?? 0;
        message.student = (object.student !== undefined && object.student !== null)
            ? object_id_1.ObjectId.fromPartial(object.student)
            : undefined;
        message.family = (object.family !== undefined && object.family !== null)
            ? object_id_1.ObjectId.fromPartial(object.family)
            : undefined;
        message.description = object.description ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
