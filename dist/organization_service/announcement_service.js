"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: organization_service/announcement_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteAnnouncementResponse = exports.DeleteAnnouncementRequest = exports.UpdateAnnouncementRequest = exports.CreateAnnouncementRequest = exports.GetAnnouncementRequest = exports.ListAnnouncementsResponse = exports.ListAnnouncementsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../google/protobuf/timestamp");
const object_id_1 = require("../utils/object_id");
const request_context_1 = require("../utils/request_context");
const user_type_1 = require("../utils/user_type");
const announcement_1 = require("./announcement");
exports.protobufPackage = "organization_service";
function createBaseListAnnouncementsRequest() {
    return { context: undefined };
}
exports.ListAnnouncementsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAnnouncementsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.ListAnnouncementsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAnnouncementsRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseListAnnouncementsResponse() {
    return { announcements: [] };
}
exports.ListAnnouncementsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.announcements) {
            announcement_1.Announcement.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAnnouncementsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.announcements.push(announcement_1.Announcement.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            announcements: globalThis.Array.isArray(object?.announcements)
                ? object.announcements.map((e) => announcement_1.Announcement.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.announcements?.length) {
            obj.announcements = message.announcements.map((e) => announcement_1.Announcement.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListAnnouncementsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAnnouncementsResponse();
        message.announcements = object.announcements?.map((e) => announcement_1.Announcement.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetAnnouncementRequest() {
    return { context: undefined, id: undefined };
}
exports.GetAnnouncementRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAnnouncementRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetAnnouncementRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAnnouncementRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseCreateAnnouncementRequest() {
    return { context: undefined, title: "", body: "", startDate: undefined, endDate: undefined, link: "", audience: [] };
}
exports.CreateAnnouncementRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.body !== "") {
            writer.uint32(26).string(message.body);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
        }
        if (message.link !== undefined && message.link !== "") {
            writer.uint32(50).string(message.link);
        }
        writer.uint32(58).fork();
        for (const v of message.audience) {
            writer.int32((0, user_type_1.userTypeToNumber)(v));
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAnnouncementRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.link = reader.string();
                    continue;
                case 7:
                    if (tag === 56) {
                        message.audience.push((0, user_type_1.userTypeFromJSON)(reader.int32()));
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.audience.push((0, user_type_1.userTypeFromJSON)(reader.int32()));
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
            link: isSet(object.link) ? globalThis.String(object.link) : "",
            audience: globalThis.Array.isArray(object?.audience) ? object.audience.map((e) => (0, user_type_1.userTypeFromJSON)(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        if (message.link !== undefined && message.link !== "") {
            obj.link = message.link;
        }
        if (message.audience?.length) {
            obj.audience = message.audience.map((e) => (0, user_type_1.userTypeToJSON)(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateAnnouncementRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAnnouncementRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.title = object.title ?? "";
        message.body = object.body ?? "";
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        message.link = object.link ?? "";
        message.audience = object.audience?.map((e) => e) || [];
        return message;
    },
};
function createBaseUpdateAnnouncementRequest() {
    return {
        context: undefined,
        id: undefined,
        title: "",
        body: "",
        startDate: undefined,
        endDate: undefined,
        link: "",
        audience: [],
    };
}
exports.UpdateAnnouncementRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        if (message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.body !== "") {
            writer.uint32(34).string(message.body);
        }
        if (message.startDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(42).fork()).join();
        }
        if (message.endDate !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(50).fork()).join();
        }
        if (message.link !== undefined && message.link !== "") {
            writer.uint32(58).string(message.link);
        }
        writer.uint32(66).fork();
        for (const v of message.audience) {
            writer.int32((0, user_type_1.userTypeToNumber)(v));
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAnnouncementRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.startDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.endDate = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.link = reader.string();
                    continue;
                case 8:
                    if (tag === 64) {
                        message.audience.push((0, user_type_1.userTypeFromJSON)(reader.int32()));
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.audience.push((0, user_type_1.userTypeFromJSON)(reader.int32()));
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
            link: isSet(object.link) ? globalThis.String(object.link) : "",
            audience: globalThis.Array.isArray(object?.audience) ? object.audience.map((e) => (0, user_type_1.userTypeFromJSON)(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        if (message.link !== undefined && message.link !== "") {
            obj.link = message.link;
        }
        if (message.audience?.length) {
            obj.audience = message.audience.map((e) => (0, user_type_1.userTypeToJSON)(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAnnouncementRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAnnouncementRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        message.title = object.title ?? "";
        message.body = object.body ?? "";
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        message.link = object.link ?? "";
        message.audience = object.audience?.map((e) => e) || [];
        return message;
    },
};
function createBaseDeleteAnnouncementRequest() {
    return { context: undefined, id: undefined };
}
exports.DeleteAnnouncementRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.context !== undefined) {
            request_context_1.RequestContext.encode(message.context, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            object_id_1.ObjectId.encode(message.id, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteAnnouncementRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.context = request_context_1.RequestContext.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = object_id_1.ObjectId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? request_context_1.RequestContext.fromJSON(object.context) : undefined,
            id: isSet(object.id) ? object_id_1.ObjectId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.context !== undefined) {
            obj.context = request_context_1.RequestContext.toJSON(message.context);
        }
        if (message.id !== undefined) {
            obj.id = object_id_1.ObjectId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteAnnouncementRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteAnnouncementRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? request_context_1.RequestContext.fromPartial(object.context)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ObjectId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseDeleteAnnouncementResponse() {
    return { success: false };
}
exports.DeleteAnnouncementResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteAnnouncementResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteAnnouncementResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteAnnouncementResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
